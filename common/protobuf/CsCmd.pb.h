// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CsCmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CsCmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CsCmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CsCmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CsCmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CsCmd_2eproto;
namespace pb {
class AllRoomInfoNotify;
class AllRoomInfoNotifyDefaultTypeInternal;
extern AllRoomInfoNotifyDefaultTypeInternal _AllRoomInfoNotify_default_instance_;
class BattleMsgScNotify;
class BattleMsgScNotifyDefaultTypeInternal;
extern BattleMsgScNotifyDefaultTypeInternal _BattleMsgScNotify_default_instance_;
class ChooseLevelCsReq;
class ChooseLevelCsReqDefaultTypeInternal;
extern ChooseLevelCsReqDefaultTypeInternal _ChooseLevelCsReq_default_instance_;
class ChooseLevelScRsp;
class ChooseLevelScRspDefaultTypeInternal;
extern ChooseLevelScRspDefaultTypeInternal _ChooseLevelScRsp_default_instance_;
class GameOverCsNotify;
class GameOverCsNotifyDefaultTypeInternal;
extern GameOverCsNotifyDefaultTypeInternal _GameOverCsNotify_default_instance_;
class GameStartScReq;
class GameStartScReqDefaultTypeInternal;
extern GameStartScReqDefaultTypeInternal _GameStartScReq_default_instance_;
class InRoomUserInfo;
class InRoomUserInfoDefaultTypeInternal;
extern InRoomUserInfoDefaultTypeInternal _InRoomUserInfo_default_instance_;
class LinkTeamSuccCsReq;
class LinkTeamSuccCsReqDefaultTypeInternal;
extern LinkTeamSuccCsReqDefaultTypeInternal _LinkTeamSuccCsReq_default_instance_;
class LoginAuthCsReq;
class LoginAuthCsReqDefaultTypeInternal;
extern LoginAuthCsReqDefaultTypeInternal _LoginAuthCsReq_default_instance_;
class LoginAuthScRsp;
class LoginAuthScRspDefaultTypeInternal;
extern LoginAuthScRspDefaultTypeInternal _LoginAuthScRsp_default_instance_;
class LoginCsReq;
class LoginCsReqDefaultTypeInternal;
extern LoginCsReqDefaultTypeInternal _LoginCsReq_default_instance_;
class LoginScRsp;
class LoginScRspDefaultTypeInternal;
extern LoginScRspDefaultTypeInternal _LoginScRsp_default_instance_;
class ReadyInRoomCsReq;
class ReadyInRoomCsReqDefaultTypeInternal;
extern ReadyInRoomCsReqDefaultTypeInternal _ReadyInRoomCsReq_default_instance_;
class ReadyInRoomScRsp;
class ReadyInRoomScRspDefaultTypeInternal;
extern ReadyInRoomScRspDefaultTypeInternal _ReadyInRoomScRsp_default_instance_;
class RoomInfoMsg;
class RoomInfoMsgDefaultTypeInternal;
extern RoomInfoMsgDefaultTypeInternal _RoomInfoMsg_default_instance_;
class RoomUserInfoNotify;
class RoomUserInfoNotifyDefaultTypeInternal;
extern RoomUserInfoNotifyDefaultTypeInternal _RoomUserInfoNotify_default_instance_;
class SCGate2ClientMsgNotify;
class SCGate2ClientMsgNotifyDefaultTypeInternal;
extern SCGate2ClientMsgNotifyDefaultTypeInternal _SCGate2ClientMsgNotify_default_instance_;
class SCNode2ClientBattleMsgNotify;
class SCNode2ClientBattleMsgNotifyDefaultTypeInternal;
extern SCNode2ClientBattleMsgNotifyDefaultTypeInternal _SCNode2ClientBattleMsgNotify_default_instance_;
class TeamHeartBeatCsReq;
class TeamHeartBeatCsReqDefaultTypeInternal;
extern TeamHeartBeatCsReqDefaultTypeInternal _TeamHeartBeatCsReq_default_instance_;
class TryCreateRoomCsReq;
class TryCreateRoomCsReqDefaultTypeInternal;
extern TryCreateRoomCsReqDefaultTypeInternal _TryCreateRoomCsReq_default_instance_;
class TryCreateRoomScRsp;
class TryCreateRoomScRspDefaultTypeInternal;
extern TryCreateRoomScRspDefaultTypeInternal _TryCreateRoomScRsp_default_instance_;
class TryEnterRoomCsReq;
class TryEnterRoomCsReqDefaultTypeInternal;
extern TryEnterRoomCsReqDefaultTypeInternal _TryEnterRoomCsReq_default_instance_;
class TryEnterRoomScRsp;
class TryEnterRoomScRspDefaultTypeInternal;
extern TryEnterRoomScRspDefaultTypeInternal _TryEnterRoomScRsp_default_instance_;
class TryLeaveRoomCsReq;
class TryLeaveRoomCsReqDefaultTypeInternal;
extern TryLeaveRoomCsReqDefaultTypeInternal _TryLeaveRoomCsReq_default_instance_;
class TryLeaveRoomScRsp;
class TryLeaveRoomScRspDefaultTypeInternal;
extern TryLeaveRoomScRspDefaultTypeInternal _TryLeaveRoomScRsp_default_instance_;
class TryLinkTeamScRsp;
class TryLinkTeamScRspDefaultTypeInternal;
extern TryLinkTeamScRspDefaultTypeInternal _TryLinkTeamScRsp_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::AllRoomInfoNotify* Arena::CreateMaybeMessage<::pb::AllRoomInfoNotify>(Arena*);
template<> ::pb::BattleMsgScNotify* Arena::CreateMaybeMessage<::pb::BattleMsgScNotify>(Arena*);
template<> ::pb::ChooseLevelCsReq* Arena::CreateMaybeMessage<::pb::ChooseLevelCsReq>(Arena*);
template<> ::pb::ChooseLevelScRsp* Arena::CreateMaybeMessage<::pb::ChooseLevelScRsp>(Arena*);
template<> ::pb::GameOverCsNotify* Arena::CreateMaybeMessage<::pb::GameOverCsNotify>(Arena*);
template<> ::pb::GameStartScReq* Arena::CreateMaybeMessage<::pb::GameStartScReq>(Arena*);
template<> ::pb::InRoomUserInfo* Arena::CreateMaybeMessage<::pb::InRoomUserInfo>(Arena*);
template<> ::pb::LinkTeamSuccCsReq* Arena::CreateMaybeMessage<::pb::LinkTeamSuccCsReq>(Arena*);
template<> ::pb::LoginAuthCsReq* Arena::CreateMaybeMessage<::pb::LoginAuthCsReq>(Arena*);
template<> ::pb::LoginAuthScRsp* Arena::CreateMaybeMessage<::pb::LoginAuthScRsp>(Arena*);
template<> ::pb::LoginCsReq* Arena::CreateMaybeMessage<::pb::LoginCsReq>(Arena*);
template<> ::pb::LoginScRsp* Arena::CreateMaybeMessage<::pb::LoginScRsp>(Arena*);
template<> ::pb::ReadyInRoomCsReq* Arena::CreateMaybeMessage<::pb::ReadyInRoomCsReq>(Arena*);
template<> ::pb::ReadyInRoomScRsp* Arena::CreateMaybeMessage<::pb::ReadyInRoomScRsp>(Arena*);
template<> ::pb::RoomInfoMsg* Arena::CreateMaybeMessage<::pb::RoomInfoMsg>(Arena*);
template<> ::pb::RoomUserInfoNotify* Arena::CreateMaybeMessage<::pb::RoomUserInfoNotify>(Arena*);
template<> ::pb::SCGate2ClientMsgNotify* Arena::CreateMaybeMessage<::pb::SCGate2ClientMsgNotify>(Arena*);
template<> ::pb::SCNode2ClientBattleMsgNotify* Arena::CreateMaybeMessage<::pb::SCNode2ClientBattleMsgNotify>(Arena*);
template<> ::pb::TeamHeartBeatCsReq* Arena::CreateMaybeMessage<::pb::TeamHeartBeatCsReq>(Arena*);
template<> ::pb::TryCreateRoomCsReq* Arena::CreateMaybeMessage<::pb::TryCreateRoomCsReq>(Arena*);
template<> ::pb::TryCreateRoomScRsp* Arena::CreateMaybeMessage<::pb::TryCreateRoomScRsp>(Arena*);
template<> ::pb::TryEnterRoomCsReq* Arena::CreateMaybeMessage<::pb::TryEnterRoomCsReq>(Arena*);
template<> ::pb::TryEnterRoomScRsp* Arena::CreateMaybeMessage<::pb::TryEnterRoomScRsp>(Arena*);
template<> ::pb::TryLeaveRoomCsReq* Arena::CreateMaybeMessage<::pb::TryLeaveRoomCsReq>(Arena*);
template<> ::pb::TryLeaveRoomScRsp* Arena::CreateMaybeMessage<::pb::TryLeaveRoomScRsp>(Arena*);
template<> ::pb::TryLinkTeamScRsp* Arena::CreateMaybeMessage<::pb::TryLinkTeamScRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum LoginAuthScRsp_RetCode : int {
  LoginAuthScRsp_RetCode_RET_SUCC = 0,
  LoginAuthScRsp_RetCode_RET_FAILED = 1,
  LoginAuthScRsp_RetCode_RET_NOT_EXIST = 2,
  LoginAuthScRsp_RetCode_LoginAuthScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginAuthScRsp_RetCode_LoginAuthScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginAuthScRsp_RetCode_IsValid(int value);
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp_RetCode_RetCode_MIN = LoginAuthScRsp_RetCode_RET_SUCC;
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp_RetCode_RetCode_MAX = LoginAuthScRsp_RetCode_RET_NOT_EXIST;
constexpr int LoginAuthScRsp_RetCode_RetCode_ARRAYSIZE = LoginAuthScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginAuthScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& LoginAuthScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginAuthScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginAuthScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginAuthScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool LoginAuthScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginAuthScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginAuthScRsp_RetCode>(
    LoginAuthScRsp_RetCode_descriptor(), name, value);
}
enum LoginScRsp_RetCode : int {
  LoginScRsp_RetCode_RET_SUCC = 0,
  LoginScRsp_RetCode_RET_FAILED = 1,
  LoginScRsp_RetCode_RET_ACCOUNT_ERROR = 2,
  LoginScRsp_RetCode_RET_RECONNECT = 3,
  LoginScRsp_RetCode_RET_IN_GAME = 4,
  LoginScRsp_RetCode_RET_REQ_INVALID = 5,
  LoginScRsp_RetCode_LoginScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginScRsp_RetCode_LoginScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginScRsp_RetCode_IsValid(int value);
constexpr LoginScRsp_RetCode LoginScRsp_RetCode_RetCode_MIN = LoginScRsp_RetCode_RET_SUCC;
constexpr LoginScRsp_RetCode LoginScRsp_RetCode_RetCode_MAX = LoginScRsp_RetCode_RET_REQ_INVALID;
constexpr int LoginScRsp_RetCode_RetCode_ARRAYSIZE = LoginScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& LoginScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool LoginScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginScRsp_RetCode>(
    LoginScRsp_RetCode_descriptor(), name, value);
}
enum TryCreateRoomScRsp_RetCode : int {
  TryCreateRoomScRsp_RetCode_RET_SUCC = 0,
  TryCreateRoomScRsp_RetCode_RET_FAILED = 1,
  TryCreateRoomScRsp_RetCode_RET_ROOMID_EXIST = 2,
  TryCreateRoomScRsp_RetCode_RET_USER_IN_ROOM = 3,
  TryCreateRoomScRsp_RetCode_TryCreateRoomScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TryCreateRoomScRsp_RetCode_TryCreateRoomScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TryCreateRoomScRsp_RetCode_IsValid(int value);
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp_RetCode_RetCode_MIN = TryCreateRoomScRsp_RetCode_RET_SUCC;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp_RetCode_RetCode_MAX = TryCreateRoomScRsp_RetCode_RET_USER_IN_ROOM;
constexpr int TryCreateRoomScRsp_RetCode_RetCode_ARRAYSIZE = TryCreateRoomScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryCreateRoomScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& TryCreateRoomScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TryCreateRoomScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TryCreateRoomScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TryCreateRoomScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool TryCreateRoomScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TryCreateRoomScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TryCreateRoomScRsp_RetCode>(
    TryCreateRoomScRsp_RetCode_descriptor(), name, value);
}
enum TryEnterRoomScRsp_RetCode : int {
  TryEnterRoomScRsp_RetCode_RET_SUCC = 0,
  TryEnterRoomScRsp_RetCode_RET_FAILED = 1,
  TryEnterRoomScRsp_RetCode_RET_ROOM_NOT_EXIST = 2,
  TryEnterRoomScRsp_RetCode_RET_ROOM_FULL = 3,
  TryEnterRoomScRsp_RetCode_RET_ROOM_BUSY = 4,
  TryEnterRoomScRsp_RetCode_RET_IN_ROOM = 5,
  TryEnterRoomScRsp_RetCode_RET_REQ_INVALID = 6,
  TryEnterRoomScRsp_RetCode_TryEnterRoomScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TryEnterRoomScRsp_RetCode_TryEnterRoomScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TryEnterRoomScRsp_RetCode_IsValid(int value);
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp_RetCode_RetCode_MIN = TryEnterRoomScRsp_RetCode_RET_SUCC;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp_RetCode_RetCode_MAX = TryEnterRoomScRsp_RetCode_RET_REQ_INVALID;
constexpr int TryEnterRoomScRsp_RetCode_RetCode_ARRAYSIZE = TryEnterRoomScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryEnterRoomScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& TryEnterRoomScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TryEnterRoomScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TryEnterRoomScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TryEnterRoomScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool TryEnterRoomScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TryEnterRoomScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TryEnterRoomScRsp_RetCode>(
    TryEnterRoomScRsp_RetCode_descriptor(), name, value);
}
enum TryLeaveRoomScRsp_RetCode : int {
  TryLeaveRoomScRsp_RetCode_RET_SUCC = 0,
  TryLeaveRoomScRsp_RetCode_RET_FAILED = 1,
  TryLeaveRoomScRsp_RetCode_RET_NOT_IN_ROOM = 2,
  TryLeaveRoomScRsp_RetCode_RET_ROOM_BUSY = 3,
  TryLeaveRoomScRsp_RetCode_RET_REQ_INVALID = 4,
  TryLeaveRoomScRsp_RetCode_TryLeaveRoomScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TryLeaveRoomScRsp_RetCode_TryLeaveRoomScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TryLeaveRoomScRsp_RetCode_IsValid(int value);
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp_RetCode_RetCode_MIN = TryLeaveRoomScRsp_RetCode_RET_SUCC;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp_RetCode_RetCode_MAX = TryLeaveRoomScRsp_RetCode_RET_REQ_INVALID;
constexpr int TryLeaveRoomScRsp_RetCode_RetCode_ARRAYSIZE = TryLeaveRoomScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryLeaveRoomScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& TryLeaveRoomScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TryLeaveRoomScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TryLeaveRoomScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TryLeaveRoomScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool TryLeaveRoomScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TryLeaveRoomScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TryLeaveRoomScRsp_RetCode>(
    TryLeaveRoomScRsp_RetCode_descriptor(), name, value);
}
enum ChooseLevelScRsp_RetCode : int {
  ChooseLevelScRsp_RetCode_RET_SUCC = 0,
  ChooseLevelScRsp_RetCode_RET_REQ_INVALID = 1,
  ChooseLevelScRsp_RetCode_RET_ROOM_BUSY = 2,
  ChooseLevelScRsp_RetCode_RET_LEVEL_NOT_EXIST = 3,
  ChooseLevelScRsp_RetCode_ChooseLevelScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChooseLevelScRsp_RetCode_ChooseLevelScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChooseLevelScRsp_RetCode_IsValid(int value);
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp_RetCode_RetCode_MIN = ChooseLevelScRsp_RetCode_RET_SUCC;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp_RetCode_RetCode_MAX = ChooseLevelScRsp_RetCode_RET_LEVEL_NOT_EXIST;
constexpr int ChooseLevelScRsp_RetCode_RetCode_ARRAYSIZE = ChooseLevelScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChooseLevelScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& ChooseLevelScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChooseLevelScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChooseLevelScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChooseLevelScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool ChooseLevelScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChooseLevelScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChooseLevelScRsp_RetCode>(
    ChooseLevelScRsp_RetCode_descriptor(), name, value);
}
enum ReadyInRoomScRsp_RetCode : int {
  ReadyInRoomScRsp_RetCode_RET_SUCC = 0,
  ReadyInRoomScRsp_RetCode_RET_FAILED = 1,
  ReadyInRoomScRsp_RetCode_RET_REQ_INVALID = 2,
  ReadyInRoomScRsp_RetCode_RET_ROLE_NOT_SELECTED = 3,
  ReadyInRoomScRsp_RetCode_RET_USER_NOT_READY = 4,
  ReadyInRoomScRsp_RetCode_RET_USER_BEEN_READY = 5,
  ReadyInRoomScRsp_RetCode_ReadyInRoomScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadyInRoomScRsp_RetCode_ReadyInRoomScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadyInRoomScRsp_RetCode_IsValid(int value);
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp_RetCode_RetCode_MIN = ReadyInRoomScRsp_RetCode_RET_SUCC;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp_RetCode_RetCode_MAX = ReadyInRoomScRsp_RetCode_RET_USER_BEEN_READY;
constexpr int ReadyInRoomScRsp_RetCode_RetCode_ARRAYSIZE = ReadyInRoomScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadyInRoomScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& ReadyInRoomScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadyInRoomScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadyInRoomScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadyInRoomScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool ReadyInRoomScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadyInRoomScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadyInRoomScRsp_RetCode>(
    ReadyInRoomScRsp_RetCode_descriptor(), name, value);
}
// ===================================================================

class LoginAuthCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginAuthCsReq) */ {
 public:
  inline LoginAuthCsReq() : LoginAuthCsReq(nullptr) {}
  virtual ~LoginAuthCsReq();

  LoginAuthCsReq(const LoginAuthCsReq& from);
  LoginAuthCsReq(LoginAuthCsReq&& from) noexcept
    : LoginAuthCsReq() {
    *this = ::std::move(from);
  }

  inline LoginAuthCsReq& operator=(const LoginAuthCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAuthCsReq& operator=(LoginAuthCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAuthCsReq& default_instance();

  static inline const LoginAuthCsReq* internal_default_instance() {
    return reinterpret_cast<const LoginAuthCsReq*>(
               &_LoginAuthCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginAuthCsReq& a, LoginAuthCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAuthCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAuthCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAuthCsReq* New() const final {
    return CreateMaybeMessage<LoginAuthCsReq>(nullptr);
  }

  LoginAuthCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAuthCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAuthCsReq& from);
  void MergeFrom(const LoginAuthCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAuthCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginAuthCsReq";
  }
  protected:
  explicit LoginAuthCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginAuthCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class LoginAuthScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginAuthScRsp) */ {
 public:
  inline LoginAuthScRsp() : LoginAuthScRsp(nullptr) {}
  virtual ~LoginAuthScRsp();

  LoginAuthScRsp(const LoginAuthScRsp& from);
  LoginAuthScRsp(LoginAuthScRsp&& from) noexcept
    : LoginAuthScRsp() {
    *this = ::std::move(from);
  }

  inline LoginAuthScRsp& operator=(const LoginAuthScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAuthScRsp& operator=(LoginAuthScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAuthScRsp& default_instance();

  static inline const LoginAuthScRsp* internal_default_instance() {
    return reinterpret_cast<const LoginAuthScRsp*>(
               &_LoginAuthScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginAuthScRsp& a, LoginAuthScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAuthScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAuthScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAuthScRsp* New() const final {
    return CreateMaybeMessage<LoginAuthScRsp>(nullptr);
  }

  LoginAuthScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAuthScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAuthScRsp& from);
  void MergeFrom(const LoginAuthScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAuthScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginAuthScRsp";
  }
  protected:
  explicit LoginAuthScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginAuthScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    LoginAuthScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    LoginAuthScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_NOT_EXIST =
    LoginAuthScRsp_RetCode_RET_NOT_EXIST;
  static inline bool RetCode_IsValid(int value) {
    return LoginAuthScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    LoginAuthScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    LoginAuthScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    LoginAuthScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return LoginAuthScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return LoginAuthScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return LoginAuthScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kAccountIdFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .pb.LoginAuthScRsp.RetCode retCode = 1;
  void clear_retcode();
  ::pb::LoginAuthScRsp_RetCode retcode() const;
  void set_retcode(::pb::LoginAuthScRsp_RetCode value);
  private:
  ::pb::LoginAuthScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::LoginAuthScRsp_RetCode value);
  public:

  // uint32 accountId = 3;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginAuthScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class LoginCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginCsReq) */ {
 public:
  inline LoginCsReq() : LoginCsReq(nullptr) {}
  virtual ~LoginCsReq();

  LoginCsReq(const LoginCsReq& from);
  LoginCsReq(LoginCsReq&& from) noexcept
    : LoginCsReq() {
    *this = ::std::move(from);
  }

  inline LoginCsReq& operator=(const LoginCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginCsReq& operator=(LoginCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginCsReq& default_instance();

  static inline const LoginCsReq* internal_default_instance() {
    return reinterpret_cast<const LoginCsReq*>(
               &_LoginCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginCsReq& a, LoginCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginCsReq* New() const final {
    return CreateMaybeMessage<LoginCsReq>(nullptr);
  }

  LoginCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginCsReq& from);
  void MergeFrom(const LoginCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginCsReq";
  }
  protected:
  explicit LoginCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 accountId = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class LoginScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginScRsp) */ {
 public:
  inline LoginScRsp() : LoginScRsp(nullptr) {}
  virtual ~LoginScRsp();

  LoginScRsp(const LoginScRsp& from);
  LoginScRsp(LoginScRsp&& from) noexcept
    : LoginScRsp() {
    *this = ::std::move(from);
  }

  inline LoginScRsp& operator=(const LoginScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginScRsp& operator=(LoginScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginScRsp& default_instance();

  static inline const LoginScRsp* internal_default_instance() {
    return reinterpret_cast<const LoginScRsp*>(
               &_LoginScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginScRsp& a, LoginScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginScRsp* New() const final {
    return CreateMaybeMessage<LoginScRsp>(nullptr);
  }

  LoginScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginScRsp& from);
  void MergeFrom(const LoginScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginScRsp";
  }
  protected:
  explicit LoginScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    LoginScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    LoginScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_ACCOUNT_ERROR =
    LoginScRsp_RetCode_RET_ACCOUNT_ERROR;
  static constexpr RetCode RET_RECONNECT =
    LoginScRsp_RetCode_RET_RECONNECT;
  static constexpr RetCode RET_IN_GAME =
    LoginScRsp_RetCode_RET_IN_GAME;
  static constexpr RetCode RET_REQ_INVALID =
    LoginScRsp_RetCode_RET_REQ_INVALID;
  static inline bool RetCode_IsValid(int value) {
    return LoginScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    LoginScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    LoginScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    LoginScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return LoginScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return LoginScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return LoginScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kIsinRoomFieldNumber = 3,
    kIsBattlingFieldNumber = 4,
  };
  // .pb.LoginScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::LoginScRsp_RetCode retcode() const;
  void set_retcode(::pb::LoginScRsp_RetCode value);
  private:
  ::pb::LoginScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::LoginScRsp_RetCode value);
  public:

  // uint32 accountid = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool IsinRoom = 3;
  void clear_isinroom();
  bool isinroom() const;
  void set_isinroom(bool value);
  private:
  bool _internal_isinroom() const;
  void _internal_set_isinroom(bool value);
  public:

  // bool IsBattling = 4;
  void clear_isbattling();
  bool isbattling() const;
  void set_isbattling(bool value);
  private:
  bool _internal_isbattling() const;
  void _internal_set_isbattling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  bool isinroom_;
  bool isbattling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RoomInfoMsg) */ {
 public:
  inline RoomInfoMsg() : RoomInfoMsg(nullptr) {}
  virtual ~RoomInfoMsg();

  RoomInfoMsg(const RoomInfoMsg& from);
  RoomInfoMsg(RoomInfoMsg&& from) noexcept
    : RoomInfoMsg() {
    *this = ::std::move(from);
  }

  inline RoomInfoMsg& operator=(const RoomInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoMsg& operator=(RoomInfoMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfoMsg& default_instance();

  static inline const RoomInfoMsg* internal_default_instance() {
    return reinterpret_cast<const RoomInfoMsg*>(
               &_RoomInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomInfoMsg& a, RoomInfoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfoMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfoMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoMsg* New() const final {
    return CreateMaybeMessage<RoomInfoMsg>(nullptr);
  }

  RoomInfoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfoMsg& from);
  void MergeFrom(const RoomInfoMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RoomInfoMsg";
  }
  protected:
  explicit RoomInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 6,
    kRoomidFieldNumber = 1,
    kMaxUserCountFieldNumber = 2,
    kCurUserCountFieldNumber = 3,
    kLevelFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string RoomName = 6;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // uint64 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 max_user_count = 2;
  void clear_max_user_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_user_count() const;
  void set_max_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_user_count() const;
  void _internal_set_max_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cur_user_count = 3;
  void clear_cur_user_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_user_count() const;
  void set_cur_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_user_count() const;
  void _internal_set_cur_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RoomInfoMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_user_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_user_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class SCGate2ClientMsgNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SCGate2ClientMsgNotify) */ {
 public:
  inline SCGate2ClientMsgNotify() : SCGate2ClientMsgNotify(nullptr) {}
  virtual ~SCGate2ClientMsgNotify();

  SCGate2ClientMsgNotify(const SCGate2ClientMsgNotify& from);
  SCGate2ClientMsgNotify(SCGate2ClientMsgNotify&& from) noexcept
    : SCGate2ClientMsgNotify() {
    *this = ::std::move(from);
  }

  inline SCGate2ClientMsgNotify& operator=(const SCGate2ClientMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGate2ClientMsgNotify& operator=(SCGate2ClientMsgNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGate2ClientMsgNotify& default_instance();

  static inline const SCGate2ClientMsgNotify* internal_default_instance() {
    return reinterpret_cast<const SCGate2ClientMsgNotify*>(
               &_SCGate2ClientMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SCGate2ClientMsgNotify& a, SCGate2ClientMsgNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGate2ClientMsgNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGate2ClientMsgNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGate2ClientMsgNotify* New() const final {
    return CreateMaybeMessage<SCGate2ClientMsgNotify>(nullptr);
  }

  SCGate2ClientMsgNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGate2ClientMsgNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGate2ClientMsgNotify& from);
  void MergeFrom(const SCGate2ClientMsgNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGate2ClientMsgNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SCGate2ClientMsgNotify";
  }
  protected:
  explicit SCGate2ClientMsgNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 3,
    kRoommsgFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // repeated .pb.InRoomUserInfo users = 3;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::pb::InRoomUserInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >*
      mutable_users();
  private:
  const ::pb::InRoomUserInfo& _internal_users(int index) const;
  ::pb::InRoomUserInfo* _internal_add_users();
  public:
  const ::pb::InRoomUserInfo& users(int index) const;
  ::pb::InRoomUserInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >&
      users() const;

  // .pb.RoomInfoMsg roommsg = 2;
  bool has_roommsg() const;
  private:
  bool _internal_has_roommsg() const;
  public:
  void clear_roommsg();
  const ::pb::RoomInfoMsg& roommsg() const;
  ::pb::RoomInfoMsg* release_roommsg();
  ::pb::RoomInfoMsg* mutable_roommsg();
  void set_allocated_roommsg(::pb::RoomInfoMsg* roommsg);
  private:
  const ::pb::RoomInfoMsg& _internal_roommsg() const;
  ::pb::RoomInfoMsg* _internal_mutable_roommsg();
  public:
  void unsafe_arena_set_allocated_roommsg(
      ::pb::RoomInfoMsg* roommsg);
  ::pb::RoomInfoMsg* unsafe_arena_release_roommsg();

  // uint32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SCGate2ClientMsgNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo > users_;
  ::pb::RoomInfoMsg* roommsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class SCNode2ClientBattleMsgNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SCNode2ClientBattleMsgNotify) */ {
 public:
  inline SCNode2ClientBattleMsgNotify() : SCNode2ClientBattleMsgNotify(nullptr) {}
  virtual ~SCNode2ClientBattleMsgNotify();

  SCNode2ClientBattleMsgNotify(const SCNode2ClientBattleMsgNotify& from);
  SCNode2ClientBattleMsgNotify(SCNode2ClientBattleMsgNotify&& from) noexcept
    : SCNode2ClientBattleMsgNotify() {
    *this = ::std::move(from);
  }

  inline SCNode2ClientBattleMsgNotify& operator=(const SCNode2ClientBattleMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNode2ClientBattleMsgNotify& operator=(SCNode2ClientBattleMsgNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNode2ClientBattleMsgNotify& default_instance();

  static inline const SCNode2ClientBattleMsgNotify* internal_default_instance() {
    return reinterpret_cast<const SCNode2ClientBattleMsgNotify*>(
               &_SCNode2ClientBattleMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SCNode2ClientBattleMsgNotify& a, SCNode2ClientBattleMsgNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNode2ClientBattleMsgNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNode2ClientBattleMsgNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNode2ClientBattleMsgNotify* New() const final {
    return CreateMaybeMessage<SCNode2ClientBattleMsgNotify>(nullptr);
  }

  SCNode2ClientBattleMsgNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNode2ClientBattleMsgNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNode2ClientBattleMsgNotify& from);
  void MergeFrom(const SCNode2ClientBattleMsgNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNode2ClientBattleMsgNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SCNode2ClientBattleMsgNotify";
  }
  protected:
  explicit SCNode2ClientBattleMsgNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kTokenFieldNumber = 4,
    kAccountidFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SCNode2ClientBattleMsgNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class AllRoomInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.AllRoomInfoNotify) */ {
 public:
  inline AllRoomInfoNotify() : AllRoomInfoNotify(nullptr) {}
  virtual ~AllRoomInfoNotify();

  AllRoomInfoNotify(const AllRoomInfoNotify& from);
  AllRoomInfoNotify(AllRoomInfoNotify&& from) noexcept
    : AllRoomInfoNotify() {
    *this = ::std::move(from);
  }

  inline AllRoomInfoNotify& operator=(const AllRoomInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllRoomInfoNotify& operator=(AllRoomInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllRoomInfoNotify& default_instance();

  static inline const AllRoomInfoNotify* internal_default_instance() {
    return reinterpret_cast<const AllRoomInfoNotify*>(
               &_AllRoomInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AllRoomInfoNotify& a, AllRoomInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(AllRoomInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllRoomInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllRoomInfoNotify* New() const final {
    return CreateMaybeMessage<AllRoomInfoNotify>(nullptr);
  }

  AllRoomInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllRoomInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllRoomInfoNotify& from);
  void MergeFrom(const AllRoomInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllRoomInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.AllRoomInfoNotify";
  }
  protected:
  explicit AllRoomInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoListFieldNumber = 2,
    kRoomCountFieldNumber = 1,
  };
  // repeated .pb.RoomInfoMsg room_info_list = 2;
  int room_info_list_size() const;
  private:
  int _internal_room_info_list_size() const;
  public:
  void clear_room_info_list();
  ::pb::RoomInfoMsg* mutable_room_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::RoomInfoMsg >*
      mutable_room_info_list();
  private:
  const ::pb::RoomInfoMsg& _internal_room_info_list(int index) const;
  ::pb::RoomInfoMsg* _internal_add_room_info_list();
  public:
  const ::pb::RoomInfoMsg& room_info_list(int index) const;
  ::pb::RoomInfoMsg* add_room_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::RoomInfoMsg >&
      room_info_list() const;

  // uint32 room_count = 1;
  void clear_room_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_count() const;
  void set_room_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_count() const;
  void _internal_set_room_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.AllRoomInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::RoomInfoMsg > room_info_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryCreateRoomCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryCreateRoomCsReq) */ {
 public:
  inline TryCreateRoomCsReq() : TryCreateRoomCsReq(nullptr) {}
  virtual ~TryCreateRoomCsReq();

  TryCreateRoomCsReq(const TryCreateRoomCsReq& from);
  TryCreateRoomCsReq(TryCreateRoomCsReq&& from) noexcept
    : TryCreateRoomCsReq() {
    *this = ::std::move(from);
  }

  inline TryCreateRoomCsReq& operator=(const TryCreateRoomCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryCreateRoomCsReq& operator=(TryCreateRoomCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryCreateRoomCsReq& default_instance();

  static inline const TryCreateRoomCsReq* internal_default_instance() {
    return reinterpret_cast<const TryCreateRoomCsReq*>(
               &_TryCreateRoomCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TryCreateRoomCsReq& a, TryCreateRoomCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TryCreateRoomCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryCreateRoomCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryCreateRoomCsReq* New() const final {
    return CreateMaybeMessage<TryCreateRoomCsReq>(nullptr);
  }

  TryCreateRoomCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryCreateRoomCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryCreateRoomCsReq& from);
  void MergeFrom(const TryCreateRoomCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryCreateRoomCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryCreateRoomCsReq";
  }
  protected:
  explicit TryCreateRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kRoomIDFieldNumber = 2,
    kAccountIDFieldNumber = 1,
    kMaxUserCountFieldNumber = 3,
  };
  // string Name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 RoomID = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxUserCount = 3;
  void clear_maxusercount();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount() const;
  void set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxusercount() const;
  void _internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryCreateRoomCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryCreateRoomScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryCreateRoomScRsp) */ {
 public:
  inline TryCreateRoomScRsp() : TryCreateRoomScRsp(nullptr) {}
  virtual ~TryCreateRoomScRsp();

  TryCreateRoomScRsp(const TryCreateRoomScRsp& from);
  TryCreateRoomScRsp(TryCreateRoomScRsp&& from) noexcept
    : TryCreateRoomScRsp() {
    *this = ::std::move(from);
  }

  inline TryCreateRoomScRsp& operator=(const TryCreateRoomScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryCreateRoomScRsp& operator=(TryCreateRoomScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryCreateRoomScRsp& default_instance();

  static inline const TryCreateRoomScRsp* internal_default_instance() {
    return reinterpret_cast<const TryCreateRoomScRsp*>(
               &_TryCreateRoomScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TryCreateRoomScRsp& a, TryCreateRoomScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TryCreateRoomScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryCreateRoomScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryCreateRoomScRsp* New() const final {
    return CreateMaybeMessage<TryCreateRoomScRsp>(nullptr);
  }

  TryCreateRoomScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryCreateRoomScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryCreateRoomScRsp& from);
  void MergeFrom(const TryCreateRoomScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryCreateRoomScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryCreateRoomScRsp";
  }
  protected:
  explicit TryCreateRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TryCreateRoomScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    TryCreateRoomScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    TryCreateRoomScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_ROOMID_EXIST =
    TryCreateRoomScRsp_RetCode_RET_ROOMID_EXIST;
  static constexpr RetCode RET_USER_IN_ROOM =
    TryCreateRoomScRsp_RetCode_RET_USER_IN_ROOM;
  static inline bool RetCode_IsValid(int value) {
    return TryCreateRoomScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    TryCreateRoomScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    TryCreateRoomScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    TryCreateRoomScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return TryCreateRoomScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return TryCreateRoomScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return TryCreateRoomScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kRetcodeFieldNumber = 1,
    kMaxUserCountFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // uint64 RoomID = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.TryCreateRoomScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::TryCreateRoomScRsp_RetCode retcode() const;
  void set_retcode(::pb::TryCreateRoomScRsp_RetCode value);
  private:
  ::pb::TryCreateRoomScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::TryCreateRoomScRsp_RetCode value);
  public:

  // uint32 MaxUserCount = 3;
  void clear_maxusercount();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount() const;
  void set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxusercount() const;
  void _internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryCreateRoomScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryEnterRoomCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryEnterRoomCsReq) */ {
 public:
  inline TryEnterRoomCsReq() : TryEnterRoomCsReq(nullptr) {}
  virtual ~TryEnterRoomCsReq();

  TryEnterRoomCsReq(const TryEnterRoomCsReq& from);
  TryEnterRoomCsReq(TryEnterRoomCsReq&& from) noexcept
    : TryEnterRoomCsReq() {
    *this = ::std::move(from);
  }

  inline TryEnterRoomCsReq& operator=(const TryEnterRoomCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryEnterRoomCsReq& operator=(TryEnterRoomCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryEnterRoomCsReq& default_instance();

  static inline const TryEnterRoomCsReq* internal_default_instance() {
    return reinterpret_cast<const TryEnterRoomCsReq*>(
               &_TryEnterRoomCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TryEnterRoomCsReq& a, TryEnterRoomCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TryEnterRoomCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryEnterRoomCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryEnterRoomCsReq* New() const final {
    return CreateMaybeMessage<TryEnterRoomCsReq>(nullptr);
  }

  TryEnterRoomCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryEnterRoomCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryEnterRoomCsReq& from);
  void MergeFrom(const TryEnterRoomCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryEnterRoomCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryEnterRoomCsReq";
  }
  protected:
  explicit TryEnterRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kAccountIDFieldNumber = 1,
  };
  // uint64 RoomID = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryEnterRoomCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryEnterRoomScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryEnterRoomScRsp) */ {
 public:
  inline TryEnterRoomScRsp() : TryEnterRoomScRsp(nullptr) {}
  virtual ~TryEnterRoomScRsp();

  TryEnterRoomScRsp(const TryEnterRoomScRsp& from);
  TryEnterRoomScRsp(TryEnterRoomScRsp&& from) noexcept
    : TryEnterRoomScRsp() {
    *this = ::std::move(from);
  }

  inline TryEnterRoomScRsp& operator=(const TryEnterRoomScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryEnterRoomScRsp& operator=(TryEnterRoomScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryEnterRoomScRsp& default_instance();

  static inline const TryEnterRoomScRsp* internal_default_instance() {
    return reinterpret_cast<const TryEnterRoomScRsp*>(
               &_TryEnterRoomScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TryEnterRoomScRsp& a, TryEnterRoomScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TryEnterRoomScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryEnterRoomScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryEnterRoomScRsp* New() const final {
    return CreateMaybeMessage<TryEnterRoomScRsp>(nullptr);
  }

  TryEnterRoomScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryEnterRoomScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryEnterRoomScRsp& from);
  void MergeFrom(const TryEnterRoomScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryEnterRoomScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryEnterRoomScRsp";
  }
  protected:
  explicit TryEnterRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TryEnterRoomScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    TryEnterRoomScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    TryEnterRoomScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_ROOM_NOT_EXIST =
    TryEnterRoomScRsp_RetCode_RET_ROOM_NOT_EXIST;
  static constexpr RetCode RET_ROOM_FULL =
    TryEnterRoomScRsp_RetCode_RET_ROOM_FULL;
  static constexpr RetCode RET_ROOM_BUSY =
    TryEnterRoomScRsp_RetCode_RET_ROOM_BUSY;
  static constexpr RetCode RET_IN_ROOM =
    TryEnterRoomScRsp_RetCode_RET_IN_ROOM;
  static constexpr RetCode RET_REQ_INVALID =
    TryEnterRoomScRsp_RetCode_RET_REQ_INVALID;
  static inline bool RetCode_IsValid(int value) {
    return TryEnterRoomScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    TryEnterRoomScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    TryEnterRoomScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    TryEnterRoomScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return TryEnterRoomScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return TryEnterRoomScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return TryEnterRoomScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kRetcodeFieldNumber = 1,
    kMaxUserCountFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // uint64 roomId = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.TryEnterRoomScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::TryEnterRoomScRsp_RetCode retcode() const;
  void set_retcode(::pb::TryEnterRoomScRsp_RetCode value);
  private:
  ::pb::TryEnterRoomScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::TryEnterRoomScRsp_RetCode value);
  public:

  // uint32 MaxUserCount = 3;
  void clear_maxusercount();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount() const;
  void set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxusercount() const;
  void _internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryEnterRoomScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryLeaveRoomCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryLeaveRoomCsReq) */ {
 public:
  inline TryLeaveRoomCsReq() : TryLeaveRoomCsReq(nullptr) {}
  virtual ~TryLeaveRoomCsReq();

  TryLeaveRoomCsReq(const TryLeaveRoomCsReq& from);
  TryLeaveRoomCsReq(TryLeaveRoomCsReq&& from) noexcept
    : TryLeaveRoomCsReq() {
    *this = ::std::move(from);
  }

  inline TryLeaveRoomCsReq& operator=(const TryLeaveRoomCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryLeaveRoomCsReq& operator=(TryLeaveRoomCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryLeaveRoomCsReq& default_instance();

  static inline const TryLeaveRoomCsReq* internal_default_instance() {
    return reinterpret_cast<const TryLeaveRoomCsReq*>(
               &_TryLeaveRoomCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TryLeaveRoomCsReq& a, TryLeaveRoomCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TryLeaveRoomCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryLeaveRoomCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryLeaveRoomCsReq* New() const final {
    return CreateMaybeMessage<TryLeaveRoomCsReq>(nullptr);
  }

  TryLeaveRoomCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryLeaveRoomCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryLeaveRoomCsReq& from);
  void MergeFrom(const TryLeaveRoomCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryLeaveRoomCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryLeaveRoomCsReq";
  }
  protected:
  explicit TryLeaveRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomidFieldNumber = 2,
  };
  // uint64 accountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryLeaveRoomCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryLeaveRoomScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryLeaveRoomScRsp) */ {
 public:
  inline TryLeaveRoomScRsp() : TryLeaveRoomScRsp(nullptr) {}
  virtual ~TryLeaveRoomScRsp();

  TryLeaveRoomScRsp(const TryLeaveRoomScRsp& from);
  TryLeaveRoomScRsp(TryLeaveRoomScRsp&& from) noexcept
    : TryLeaveRoomScRsp() {
    *this = ::std::move(from);
  }

  inline TryLeaveRoomScRsp& operator=(const TryLeaveRoomScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryLeaveRoomScRsp& operator=(TryLeaveRoomScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryLeaveRoomScRsp& default_instance();

  static inline const TryLeaveRoomScRsp* internal_default_instance() {
    return reinterpret_cast<const TryLeaveRoomScRsp*>(
               &_TryLeaveRoomScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TryLeaveRoomScRsp& a, TryLeaveRoomScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TryLeaveRoomScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryLeaveRoomScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryLeaveRoomScRsp* New() const final {
    return CreateMaybeMessage<TryLeaveRoomScRsp>(nullptr);
  }

  TryLeaveRoomScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryLeaveRoomScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryLeaveRoomScRsp& from);
  void MergeFrom(const TryLeaveRoomScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryLeaveRoomScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryLeaveRoomScRsp";
  }
  protected:
  explicit TryLeaveRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TryLeaveRoomScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    TryLeaveRoomScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    TryLeaveRoomScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_NOT_IN_ROOM =
    TryLeaveRoomScRsp_RetCode_RET_NOT_IN_ROOM;
  static constexpr RetCode RET_ROOM_BUSY =
    TryLeaveRoomScRsp_RetCode_RET_ROOM_BUSY;
  static constexpr RetCode RET_REQ_INVALID =
    TryLeaveRoomScRsp_RetCode_RET_REQ_INVALID;
  static inline bool RetCode_IsValid(int value) {
    return TryLeaveRoomScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    TryLeaveRoomScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    TryLeaveRoomScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    TryLeaveRoomScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return TryLeaveRoomScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return TryLeaveRoomScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return TryLeaveRoomScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // .pb.TryLeaveRoomScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::TryLeaveRoomScRsp_RetCode retcode() const;
  void set_retcode(::pb::TryLeaveRoomScRsp_RetCode value);
  private:
  ::pb::TryLeaveRoomScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::TryLeaveRoomScRsp_RetCode value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryLeaveRoomScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class InRoomUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.InRoomUserInfo) */ {
 public:
  inline InRoomUserInfo() : InRoomUserInfo(nullptr) {}
  virtual ~InRoomUserInfo();

  InRoomUserInfo(const InRoomUserInfo& from);
  InRoomUserInfo(InRoomUserInfo&& from) noexcept
    : InRoomUserInfo() {
    *this = ::std::move(from);
  }

  inline InRoomUserInfo& operator=(const InRoomUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InRoomUserInfo& operator=(InRoomUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InRoomUserInfo& default_instance();

  static inline const InRoomUserInfo* internal_default_instance() {
    return reinterpret_cast<const InRoomUserInfo*>(
               &_InRoomUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InRoomUserInfo& a, InRoomUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InRoomUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InRoomUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InRoomUserInfo* New() const final {
    return CreateMaybeMessage<InRoomUserInfo>(nullptr);
  }

  InRoomUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InRoomUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InRoomUserInfo& from);
  void MergeFrom(const InRoomUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InRoomUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.InRoomUserInfo";
  }
  protected:
  explicit InRoomUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kAccountIDFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
    kIsHostFieldNumber = 3,
    kReadyStateFieldNumber = 4,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 isHost = 3;
  void clear_ishost();
  ::PROTOBUF_NAMESPACE_ID::uint32 ishost() const;
  void set_ishost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ishost() const;
  void _internal_set_ishost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ReadyState = 4;
  void clear_readystate();
  ::PROTOBUF_NAMESPACE_ID::uint32 readystate() const;
  void set_readystate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_readystate() const;
  void _internal_set_readystate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.InRoomUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ishost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 readystate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class RoomUserInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RoomUserInfoNotify) */ {
 public:
  inline RoomUserInfoNotify() : RoomUserInfoNotify(nullptr) {}
  virtual ~RoomUserInfoNotify();

  RoomUserInfoNotify(const RoomUserInfoNotify& from);
  RoomUserInfoNotify(RoomUserInfoNotify&& from) noexcept
    : RoomUserInfoNotify() {
    *this = ::std::move(from);
  }

  inline RoomUserInfoNotify& operator=(const RoomUserInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomUserInfoNotify& operator=(RoomUserInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomUserInfoNotify& default_instance();

  static inline const RoomUserInfoNotify* internal_default_instance() {
    return reinterpret_cast<const RoomUserInfoNotify*>(
               &_RoomUserInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RoomUserInfoNotify& a, RoomUserInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomUserInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomUserInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomUserInfoNotify* New() const final {
    return CreateMaybeMessage<RoomUserInfoNotify>(nullptr);
  }

  RoomUserInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomUserInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomUserInfoNotify& from);
  void MergeFrom(const RoomUserInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomUserInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RoomUserInfoNotify";
  }
  protected:
  explicit RoomUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserlistsFieldNumber = 4,
    kRoomIDFieldNumber = 1,
    kMaxUserCountFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // repeated .pb.InRoomUserInfo userlists = 4;
  int userlists_size() const;
  private:
  int _internal_userlists_size() const;
  public:
  void clear_userlists();
  ::pb::InRoomUserInfo* mutable_userlists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >*
      mutable_userlists();
  private:
  const ::pb::InRoomUserInfo& _internal_userlists(int index) const;
  ::pb::InRoomUserInfo* _internal_add_userlists();
  public:
  const ::pb::InRoomUserInfo& userlists(int index) const;
  ::pb::InRoomUserInfo* add_userlists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >&
      userlists() const;

  // uint64 RoomID = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 MaxUserCount = 2;
  void clear_maxusercount();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount() const;
  void set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxusercount() const;
  void _internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RoomUserInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo > userlists_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxusercount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class ChooseLevelCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ChooseLevelCsReq) */ {
 public:
  inline ChooseLevelCsReq() : ChooseLevelCsReq(nullptr) {}
  virtual ~ChooseLevelCsReq();

  ChooseLevelCsReq(const ChooseLevelCsReq& from);
  ChooseLevelCsReq(ChooseLevelCsReq&& from) noexcept
    : ChooseLevelCsReq() {
    *this = ::std::move(from);
  }

  inline ChooseLevelCsReq& operator=(const ChooseLevelCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChooseLevelCsReq& operator=(ChooseLevelCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChooseLevelCsReq& default_instance();

  static inline const ChooseLevelCsReq* internal_default_instance() {
    return reinterpret_cast<const ChooseLevelCsReq*>(
               &_ChooseLevelCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChooseLevelCsReq& a, ChooseLevelCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChooseLevelCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChooseLevelCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChooseLevelCsReq* New() const final {
    return CreateMaybeMessage<ChooseLevelCsReq>(nullptr);
  }

  ChooseLevelCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChooseLevelCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChooseLevelCsReq& from);
  void MergeFrom(const ChooseLevelCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChooseLevelCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ChooseLevelCsReq";
  }
  protected:
  explicit ChooseLevelCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kLevelIdFieldNumber = 3,
  };
  // uint64 AccountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 roomId = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 LevelId = 3;
  void clear_levelid();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid() const;
  void set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelid() const;
  void _internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ChooseLevelCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class ChooseLevelScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ChooseLevelScRsp) */ {
 public:
  inline ChooseLevelScRsp() : ChooseLevelScRsp(nullptr) {}
  virtual ~ChooseLevelScRsp();

  ChooseLevelScRsp(const ChooseLevelScRsp& from);
  ChooseLevelScRsp(ChooseLevelScRsp&& from) noexcept
    : ChooseLevelScRsp() {
    *this = ::std::move(from);
  }

  inline ChooseLevelScRsp& operator=(const ChooseLevelScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChooseLevelScRsp& operator=(ChooseLevelScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChooseLevelScRsp& default_instance();

  static inline const ChooseLevelScRsp* internal_default_instance() {
    return reinterpret_cast<const ChooseLevelScRsp*>(
               &_ChooseLevelScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChooseLevelScRsp& a, ChooseLevelScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChooseLevelScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChooseLevelScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChooseLevelScRsp* New() const final {
    return CreateMaybeMessage<ChooseLevelScRsp>(nullptr);
  }

  ChooseLevelScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChooseLevelScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChooseLevelScRsp& from);
  void MergeFrom(const ChooseLevelScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChooseLevelScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ChooseLevelScRsp";
  }
  protected:
  explicit ChooseLevelScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChooseLevelScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    ChooseLevelScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_REQ_INVALID =
    ChooseLevelScRsp_RetCode_RET_REQ_INVALID;
  static constexpr RetCode RET_ROOM_BUSY =
    ChooseLevelScRsp_RetCode_RET_ROOM_BUSY;
  static constexpr RetCode RET_LEVEL_NOT_EXIST =
    ChooseLevelScRsp_RetCode_RET_LEVEL_NOT_EXIST;
  static inline bool RetCode_IsValid(int value) {
    return ChooseLevelScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    ChooseLevelScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    ChooseLevelScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    ChooseLevelScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return ChooseLevelScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return ChooseLevelScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return ChooseLevelScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kRetcodeFieldNumber = 1,
    kLevelIdFieldNumber = 3,
  };
  // uint64 roomId = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.ChooseLevelScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::ChooseLevelScRsp_RetCode retcode() const;
  void set_retcode(::pb::ChooseLevelScRsp_RetCode value);
  private:
  ::pb::ChooseLevelScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::ChooseLevelScRsp_RetCode value);
  public:

  // uint32 LevelId = 3;
  void clear_levelid();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid() const;
  void set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelid() const;
  void _internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ChooseLevelScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class ReadyInRoomCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReadyInRoomCsReq) */ {
 public:
  inline ReadyInRoomCsReq() : ReadyInRoomCsReq(nullptr) {}
  virtual ~ReadyInRoomCsReq();

  ReadyInRoomCsReq(const ReadyInRoomCsReq& from);
  ReadyInRoomCsReq(ReadyInRoomCsReq&& from) noexcept
    : ReadyInRoomCsReq() {
    *this = ::std::move(from);
  }

  inline ReadyInRoomCsReq& operator=(const ReadyInRoomCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyInRoomCsReq& operator=(ReadyInRoomCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadyInRoomCsReq& default_instance();

  static inline const ReadyInRoomCsReq* internal_default_instance() {
    return reinterpret_cast<const ReadyInRoomCsReq*>(
               &_ReadyInRoomCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReadyInRoomCsReq& a, ReadyInRoomCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyInRoomCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyInRoomCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadyInRoomCsReq* New() const final {
    return CreateMaybeMessage<ReadyInRoomCsReq>(nullptr);
  }

  ReadyInRoomCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadyInRoomCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadyInRoomCsReq& from);
  void MergeFrom(const ReadyInRoomCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyInRoomCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReadyInRoomCsReq";
  }
  protected:
  explicit ReadyInRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kAccountIDFieldNumber = 1,
    kMasterPortFieldNumber = 3,
  };
  // uint64 RoomID = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MasterPort = 3;
  void clear_masterport();
  ::PROTOBUF_NAMESPACE_ID::uint32 masterport() const;
  void set_masterport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_masterport() const;
  void _internal_set_masterport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ReadyInRoomCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 masterport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class ReadyInRoomScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReadyInRoomScRsp) */ {
 public:
  inline ReadyInRoomScRsp() : ReadyInRoomScRsp(nullptr) {}
  virtual ~ReadyInRoomScRsp();

  ReadyInRoomScRsp(const ReadyInRoomScRsp& from);
  ReadyInRoomScRsp(ReadyInRoomScRsp&& from) noexcept
    : ReadyInRoomScRsp() {
    *this = ::std::move(from);
  }

  inline ReadyInRoomScRsp& operator=(const ReadyInRoomScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyInRoomScRsp& operator=(ReadyInRoomScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadyInRoomScRsp& default_instance();

  static inline const ReadyInRoomScRsp* internal_default_instance() {
    return reinterpret_cast<const ReadyInRoomScRsp*>(
               &_ReadyInRoomScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ReadyInRoomScRsp& a, ReadyInRoomScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyInRoomScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyInRoomScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadyInRoomScRsp* New() const final {
    return CreateMaybeMessage<ReadyInRoomScRsp>(nullptr);
  }

  ReadyInRoomScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadyInRoomScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadyInRoomScRsp& from);
  void MergeFrom(const ReadyInRoomScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyInRoomScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReadyInRoomScRsp";
  }
  protected:
  explicit ReadyInRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadyInRoomScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    ReadyInRoomScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    ReadyInRoomScRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_REQ_INVALID =
    ReadyInRoomScRsp_RetCode_RET_REQ_INVALID;
  static constexpr RetCode RET_ROLE_NOT_SELECTED =
    ReadyInRoomScRsp_RetCode_RET_ROLE_NOT_SELECTED;
  static constexpr RetCode RET_USER_NOT_READY =
    ReadyInRoomScRsp_RetCode_RET_USER_NOT_READY;
  static constexpr RetCode RET_USER_BEEN_READY =
    ReadyInRoomScRsp_RetCode_RET_USER_BEEN_READY;
  static inline bool RetCode_IsValid(int value) {
    return ReadyInRoomScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    ReadyInRoomScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    ReadyInRoomScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    ReadyInRoomScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return ReadyInRoomScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return ReadyInRoomScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return ReadyInRoomScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // .pb.ReadyInRoomScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::ReadyInRoomScRsp_RetCode retcode() const;
  void set_retcode(::pb::ReadyInRoomScRsp_RetCode value);
  private:
  ::pb::ReadyInRoomScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::ReadyInRoomScRsp_RetCode value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ReadyInRoomScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TryLinkTeamScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TryLinkTeamScRsp) */ {
 public:
  inline TryLinkTeamScRsp() : TryLinkTeamScRsp(nullptr) {}
  virtual ~TryLinkTeamScRsp();

  TryLinkTeamScRsp(const TryLinkTeamScRsp& from);
  TryLinkTeamScRsp(TryLinkTeamScRsp&& from) noexcept
    : TryLinkTeamScRsp() {
    *this = ::std::move(from);
  }

  inline TryLinkTeamScRsp& operator=(const TryLinkTeamScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryLinkTeamScRsp& operator=(TryLinkTeamScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryLinkTeamScRsp& default_instance();

  static inline const TryLinkTeamScRsp* internal_default_instance() {
    return reinterpret_cast<const TryLinkTeamScRsp*>(
               &_TryLinkTeamScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TryLinkTeamScRsp& a, TryLinkTeamScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TryLinkTeamScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryLinkTeamScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryLinkTeamScRsp* New() const final {
    return CreateMaybeMessage<TryLinkTeamScRsp>(nullptr);
  }

  TryLinkTeamScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryLinkTeamScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryLinkTeamScRsp& from);
  void MergeFrom(const TryLinkTeamScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryLinkTeamScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TryLinkTeamScRsp";
  }
  protected:
  explicit TryLinkTeamScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterIPFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPortFieldNumber = 4,
    kLevelIDFieldNumber = 5,
  };
  // string MasterIP = 3;
  void clear_masterip();
  const std::string& masterip() const;
  void set_masterip(const std::string& value);
  void set_masterip(std::string&& value);
  void set_masterip(const char* value);
  void set_masterip(const char* value, size_t size);
  std::string* mutable_masterip();
  std::string* release_masterip();
  void set_allocated_masterip(std::string* masterip);
  private:
  const std::string& _internal_masterip() const;
  void _internal_set_masterip(const std::string& value);
  std::string* _internal_mutable_masterip();
  public:

  // uint32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LevelID = 5;
  void clear_levelid();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid() const;
  void set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelid() const;
  void _internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TryLinkTeamScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masterip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class TeamHeartBeatCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TeamHeartBeatCsReq) */ {
 public:
  inline TeamHeartBeatCsReq() : TeamHeartBeatCsReq(nullptr) {}
  virtual ~TeamHeartBeatCsReq();

  TeamHeartBeatCsReq(const TeamHeartBeatCsReq& from);
  TeamHeartBeatCsReq(TeamHeartBeatCsReq&& from) noexcept
    : TeamHeartBeatCsReq() {
    *this = ::std::move(from);
  }

  inline TeamHeartBeatCsReq& operator=(const TeamHeartBeatCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamHeartBeatCsReq& operator=(TeamHeartBeatCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamHeartBeatCsReq& default_instance();

  static inline const TeamHeartBeatCsReq* internal_default_instance() {
    return reinterpret_cast<const TeamHeartBeatCsReq*>(
               &_TeamHeartBeatCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TeamHeartBeatCsReq& a, TeamHeartBeatCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamHeartBeatCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamHeartBeatCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamHeartBeatCsReq* New() const final {
    return CreateMaybeMessage<TeamHeartBeatCsReq>(nullptr);
  }

  TeamHeartBeatCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamHeartBeatCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamHeartBeatCsReq& from);
  void MergeFrom(const TeamHeartBeatCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamHeartBeatCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TeamHeartBeatCsReq";
  }
  protected:
  explicit TeamHeartBeatCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TeamHeartBeatCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class LinkTeamSuccCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LinkTeamSuccCsReq) */ {
 public:
  inline LinkTeamSuccCsReq() : LinkTeamSuccCsReq(nullptr) {}
  virtual ~LinkTeamSuccCsReq();

  LinkTeamSuccCsReq(const LinkTeamSuccCsReq& from);
  LinkTeamSuccCsReq(LinkTeamSuccCsReq&& from) noexcept
    : LinkTeamSuccCsReq() {
    *this = ::std::move(from);
  }

  inline LinkTeamSuccCsReq& operator=(const LinkTeamSuccCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkTeamSuccCsReq& operator=(LinkTeamSuccCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkTeamSuccCsReq& default_instance();

  static inline const LinkTeamSuccCsReq* internal_default_instance() {
    return reinterpret_cast<const LinkTeamSuccCsReq*>(
               &_LinkTeamSuccCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LinkTeamSuccCsReq& a, LinkTeamSuccCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkTeamSuccCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkTeamSuccCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkTeamSuccCsReq* New() const final {
    return CreateMaybeMessage<LinkTeamSuccCsReq>(nullptr);
  }

  LinkTeamSuccCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkTeamSuccCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkTeamSuccCsReq& from);
  void MergeFrom(const LinkTeamSuccCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkTeamSuccCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LinkTeamSuccCsReq";
  }
  protected:
  explicit LinkTeamSuccCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
    kSuccFieldNumber = 2,
  };
  // uint32 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool succ = 2;
  void clear_succ();
  bool succ() const;
  void set_succ(bool value);
  private:
  bool _internal_succ() const;
  void _internal_set_succ(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LinkTeamSuccCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  bool succ_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class GameStartScReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GameStartScReq) */ {
 public:
  inline GameStartScReq() : GameStartScReq(nullptr) {}
  virtual ~GameStartScReq();

  GameStartScReq(const GameStartScReq& from);
  GameStartScReq(GameStartScReq&& from) noexcept
    : GameStartScReq() {
    *this = ::std::move(from);
  }

  inline GameStartScReq& operator=(const GameStartScReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartScReq& operator=(GameStartScReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStartScReq& default_instance();

  static inline const GameStartScReq* internal_default_instance() {
    return reinterpret_cast<const GameStartScReq*>(
               &_GameStartScReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GameStartScReq& a, GameStartScReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStartScReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStartScReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStartScReq* New() const final {
    return CreateMaybeMessage<GameStartScReq>(nullptr);
  }

  GameStartScReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStartScReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStartScReq& from);
  void MergeFrom(const GameStartScReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartScReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GameStartScReq";
  }
  protected:
  explicit GameStartScReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelIDFieldNumber = 1,
  };
  // uint32 LevelID = 1;
  void clear_levelid();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid() const;
  void set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelid() const;
  void _internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GameStartScReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class GameOverCsNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GameOverCsNotify) */ {
 public:
  inline GameOverCsNotify() : GameOverCsNotify(nullptr) {}
  virtual ~GameOverCsNotify();

  GameOverCsNotify(const GameOverCsNotify& from);
  GameOverCsNotify(GameOverCsNotify&& from) noexcept
    : GameOverCsNotify() {
    *this = ::std::move(from);
  }

  inline GameOverCsNotify& operator=(const GameOverCsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameOverCsNotify& operator=(GameOverCsNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameOverCsNotify& default_instance();

  static inline const GameOverCsNotify* internal_default_instance() {
    return reinterpret_cast<const GameOverCsNotify*>(
               &_GameOverCsNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GameOverCsNotify& a, GameOverCsNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GameOverCsNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameOverCsNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameOverCsNotify* New() const final {
    return CreateMaybeMessage<GameOverCsNotify>(nullptr);
  }

  GameOverCsNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameOverCsNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameOverCsNotify& from);
  void MergeFrom(const GameOverCsNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOverCsNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GameOverCsNotify";
  }
  protected:
  explicit GameOverCsNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // uint64 accountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 roomId = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GameOverCsNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// -------------------------------------------------------------------

class BattleMsgScNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BattleMsgScNotify) */ {
 public:
  inline BattleMsgScNotify() : BattleMsgScNotify(nullptr) {}
  virtual ~BattleMsgScNotify();

  BattleMsgScNotify(const BattleMsgScNotify& from);
  BattleMsgScNotify(BattleMsgScNotify&& from) noexcept
    : BattleMsgScNotify() {
    *this = ::std::move(from);
  }

  inline BattleMsgScNotify& operator=(const BattleMsgScNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleMsgScNotify& operator=(BattleMsgScNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleMsgScNotify& default_instance();

  static inline const BattleMsgScNotify* internal_default_instance() {
    return reinterpret_cast<const BattleMsgScNotify*>(
               &_BattleMsgScNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BattleMsgScNotify& a, BattleMsgScNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleMsgScNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleMsgScNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleMsgScNotify* New() const final {
    return CreateMaybeMessage<BattleMsgScNotify>(nullptr);
  }

  BattleMsgScNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleMsgScNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleMsgScNotify& from);
  void MergeFrom(const BattleMsgScNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleMsgScNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BattleMsgScNotify";
  }
  protected:
  explicit BattleMsgScNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CsCmd_2eproto);
    return ::descriptor_table_CsCmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kTokenFieldNumber = 4,
    kAccountidFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BattleMsgScNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CsCmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginAuthCsReq

// string username = 1;
inline void LoginAuthCsReq::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LoginAuthCsReq::username() const {
  // @@protoc_insertion_point(field_get:pb.LoginAuthCsReq.username)
  return _internal_username();
}
inline void LoginAuthCsReq::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:pb.LoginAuthCsReq.username)
}
inline std::string* LoginAuthCsReq::mutable_username() {
  // @@protoc_insertion_point(field_mutable:pb.LoginAuthCsReq.username)
  return _internal_mutable_username();
}
inline const std::string& LoginAuthCsReq::_internal_username() const {
  return username_.Get();
}
inline void LoginAuthCsReq::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginAuthCsReq::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginAuthCsReq.username)
}
inline void LoginAuthCsReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.LoginAuthCsReq.username)
}
inline void LoginAuthCsReq::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.LoginAuthCsReq.username)
}
inline std::string* LoginAuthCsReq::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginAuthCsReq::release_username() {
  // @@protoc_insertion_point(field_release:pb.LoginAuthCsReq.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginAuthCsReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAuthCsReq.username)
}

// string passwd = 2;
inline void LoginAuthCsReq::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& LoginAuthCsReq::passwd() const {
  // @@protoc_insertion_point(field_get:pb.LoginAuthCsReq.passwd)
  return _internal_passwd();
}
inline void LoginAuthCsReq::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:pb.LoginAuthCsReq.passwd)
}
inline std::string* LoginAuthCsReq::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:pb.LoginAuthCsReq.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& LoginAuthCsReq::_internal_passwd() const {
  return passwd_.Get();
}
inline void LoginAuthCsReq::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginAuthCsReq::set_passwd(std::string&& value) {
  
  passwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginAuthCsReq.passwd)
}
inline void LoginAuthCsReq::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.LoginAuthCsReq.passwd)
}
inline void LoginAuthCsReq::set_passwd(const char* value,
    size_t size) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.LoginAuthCsReq.passwd)
}
inline std::string* LoginAuthCsReq::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginAuthCsReq::release_passwd() {
  // @@protoc_insertion_point(field_release:pb.LoginAuthCsReq.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginAuthCsReq::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAuthCsReq.passwd)
}

// -------------------------------------------------------------------

// LoginAuthScRsp

// .pb.LoginAuthScRsp.RetCode retCode = 1;
inline void LoginAuthScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::LoginAuthScRsp_RetCode LoginAuthScRsp::_internal_retcode() const {
  return static_cast< ::pb::LoginAuthScRsp_RetCode >(retcode_);
}
inline ::pb::LoginAuthScRsp_RetCode LoginAuthScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.LoginAuthScRsp.retCode)
  return _internal_retcode();
}
inline void LoginAuthScRsp::_internal_set_retcode(::pb::LoginAuthScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void LoginAuthScRsp::set_retcode(::pb::LoginAuthScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.LoginAuthScRsp.retCode)
}

// string username = 2;
inline void LoginAuthScRsp::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LoginAuthScRsp::username() const {
  // @@protoc_insertion_point(field_get:pb.LoginAuthScRsp.username)
  return _internal_username();
}
inline void LoginAuthScRsp::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:pb.LoginAuthScRsp.username)
}
inline std::string* LoginAuthScRsp::mutable_username() {
  // @@protoc_insertion_point(field_mutable:pb.LoginAuthScRsp.username)
  return _internal_mutable_username();
}
inline const std::string& LoginAuthScRsp::_internal_username() const {
  return username_.Get();
}
inline void LoginAuthScRsp::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginAuthScRsp::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginAuthScRsp.username)
}
inline void LoginAuthScRsp::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.LoginAuthScRsp.username)
}
inline void LoginAuthScRsp::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.LoginAuthScRsp.username)
}
inline std::string* LoginAuthScRsp::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginAuthScRsp::release_username() {
  // @@protoc_insertion_point(field_release:pb.LoginAuthScRsp.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginAuthScRsp::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAuthScRsp.username)
}

// uint32 accountId = 3;
inline void LoginAuthScRsp::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginAuthScRsp::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginAuthScRsp::accountid() const {
  // @@protoc_insertion_point(field_get:pb.LoginAuthScRsp.accountId)
  return _internal_accountid();
}
inline void LoginAuthScRsp::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void LoginAuthScRsp::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.LoginAuthScRsp.accountId)
}

// -------------------------------------------------------------------

// LoginCsReq

// string name = 1;
inline void LoginCsReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoginCsReq::name() const {
  // @@protoc_insertion_point(field_get:pb.LoginCsReq.name)
  return _internal_name();
}
inline void LoginCsReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.LoginCsReq.name)
}
inline std::string* LoginCsReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.LoginCsReq.name)
  return _internal_mutable_name();
}
inline const std::string& LoginCsReq::_internal_name() const {
  return name_.Get();
}
inline void LoginCsReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginCsReq::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginCsReq.name)
}
inline void LoginCsReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.LoginCsReq.name)
}
inline void LoginCsReq::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.LoginCsReq.name)
}
inline std::string* LoginCsReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginCsReq::release_name() {
  // @@protoc_insertion_point(field_release:pb.LoginCsReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginCsReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.LoginCsReq.name)
}

// uint32 accountId = 2;
inline void LoginCsReq::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.LoginCsReq.accountId)
  return _internal_accountid();
}
inline void LoginCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void LoginCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.LoginCsReq.accountId)
}

// -------------------------------------------------------------------

// LoginScRsp

// .pb.LoginScRsp.RetCode retcode = 1;
inline void LoginScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::LoginScRsp_RetCode LoginScRsp::_internal_retcode() const {
  return static_cast< ::pb::LoginScRsp_RetCode >(retcode_);
}
inline ::pb::LoginScRsp_RetCode LoginScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.LoginScRsp.retcode)
  return _internal_retcode();
}
inline void LoginScRsp::_internal_set_retcode(::pb::LoginScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void LoginScRsp::set_retcode(::pb::LoginScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.LoginScRsp.retcode)
}

// uint32 accountid = 2;
inline void LoginScRsp::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginScRsp::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginScRsp::accountid() const {
  // @@protoc_insertion_point(field_get:pb.LoginScRsp.accountid)
  return _internal_accountid();
}
inline void LoginScRsp::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void LoginScRsp::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.LoginScRsp.accountid)
}

// bool IsinRoom = 3;
inline void LoginScRsp::clear_isinroom() {
  isinroom_ = false;
}
inline bool LoginScRsp::_internal_isinroom() const {
  return isinroom_;
}
inline bool LoginScRsp::isinroom() const {
  // @@protoc_insertion_point(field_get:pb.LoginScRsp.IsinRoom)
  return _internal_isinroom();
}
inline void LoginScRsp::_internal_set_isinroom(bool value) {
  
  isinroom_ = value;
}
inline void LoginScRsp::set_isinroom(bool value) {
  _internal_set_isinroom(value);
  // @@protoc_insertion_point(field_set:pb.LoginScRsp.IsinRoom)
}

// bool IsBattling = 4;
inline void LoginScRsp::clear_isbattling() {
  isbattling_ = false;
}
inline bool LoginScRsp::_internal_isbattling() const {
  return isbattling_;
}
inline bool LoginScRsp::isbattling() const {
  // @@protoc_insertion_point(field_get:pb.LoginScRsp.IsBattling)
  return _internal_isbattling();
}
inline void LoginScRsp::_internal_set_isbattling(bool value) {
  
  isbattling_ = value;
}
inline void LoginScRsp::set_isbattling(bool value) {
  _internal_set_isbattling(value);
  // @@protoc_insertion_point(field_set:pb.LoginScRsp.IsBattling)
}

// -------------------------------------------------------------------

// RoomInfoMsg

// uint64 roomid = 1;
inline void RoomInfoMsg::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomInfoMsg::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomInfoMsg::roomid() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.roomid)
  return _internal_roomid();
}
inline void RoomInfoMsg::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void RoomInfoMsg::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.roomid)
}

// uint32 max_user_count = 2;
inline void RoomInfoMsg::clear_max_user_count() {
  max_user_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::_internal_max_user_count() const {
  return max_user_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::max_user_count() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.max_user_count)
  return _internal_max_user_count();
}
inline void RoomInfoMsg::_internal_set_max_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_user_count_ = value;
}
inline void RoomInfoMsg::set_max_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_user_count(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.max_user_count)
}

// uint32 cur_user_count = 3;
inline void RoomInfoMsg::clear_cur_user_count() {
  cur_user_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::_internal_cur_user_count() const {
  return cur_user_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::cur_user_count() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.cur_user_count)
  return _internal_cur_user_count();
}
inline void RoomInfoMsg::_internal_set_cur_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_user_count_ = value;
}
inline void RoomInfoMsg::set_cur_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_user_count(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.cur_user_count)
}

// uint32 level = 4;
inline void RoomInfoMsg::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::level() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.level)
  return _internal_level();
}
inline void RoomInfoMsg::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void RoomInfoMsg::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.level)
}

// uint32 status = 5;
inline void RoomInfoMsg::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoMsg::status() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.status)
  return _internal_status();
}
inline void RoomInfoMsg::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void RoomInfoMsg::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.status)
}

// string RoomName = 6;
inline void RoomInfoMsg::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& RoomInfoMsg::roomname() const {
  // @@protoc_insertion_point(field_get:pb.RoomInfoMsg.RoomName)
  return _internal_roomname();
}
inline void RoomInfoMsg::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:pb.RoomInfoMsg.RoomName)
}
inline std::string* RoomInfoMsg::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:pb.RoomInfoMsg.RoomName)
  return _internal_mutable_roomname();
}
inline const std::string& RoomInfoMsg::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomInfoMsg::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomInfoMsg::set_roomname(std::string&& value) {
  
  roomname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomInfoMsg.RoomName)
}
inline void RoomInfoMsg::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.RoomInfoMsg.RoomName)
}
inline void RoomInfoMsg::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.RoomInfoMsg.RoomName)
}
inline std::string* RoomInfoMsg::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomInfoMsg::release_roomname() {
  // @@protoc_insertion_point(field_release:pb.RoomInfoMsg.RoomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomInfoMsg::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.RoomInfoMsg.RoomName)
}

// -------------------------------------------------------------------

// SCGate2ClientMsgNotify

// uint32 accountid = 1;
inline void SCGate2ClientMsgNotify::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCGate2ClientMsgNotify::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCGate2ClientMsgNotify::accountid() const {
  // @@protoc_insertion_point(field_get:pb.SCGate2ClientMsgNotify.accountid)
  return _internal_accountid();
}
inline void SCGate2ClientMsgNotify::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void SCGate2ClientMsgNotify::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.SCGate2ClientMsgNotify.accountid)
}

// .pb.RoomInfoMsg roommsg = 2;
inline bool SCGate2ClientMsgNotify::_internal_has_roommsg() const {
  return this != internal_default_instance() && roommsg_ != nullptr;
}
inline bool SCGate2ClientMsgNotify::has_roommsg() const {
  return _internal_has_roommsg();
}
inline void SCGate2ClientMsgNotify::clear_roommsg() {
  if (GetArena() == nullptr && roommsg_ != nullptr) {
    delete roommsg_;
  }
  roommsg_ = nullptr;
}
inline const ::pb::RoomInfoMsg& SCGate2ClientMsgNotify::_internal_roommsg() const {
  const ::pb::RoomInfoMsg* p = roommsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::RoomInfoMsg&>(
      ::pb::_RoomInfoMsg_default_instance_);
}
inline const ::pb::RoomInfoMsg& SCGate2ClientMsgNotify::roommsg() const {
  // @@protoc_insertion_point(field_get:pb.SCGate2ClientMsgNotify.roommsg)
  return _internal_roommsg();
}
inline void SCGate2ClientMsgNotify::unsafe_arena_set_allocated_roommsg(
    ::pb::RoomInfoMsg* roommsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roommsg_);
  }
  roommsg_ = roommsg;
  if (roommsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SCGate2ClientMsgNotify.roommsg)
}
inline ::pb::RoomInfoMsg* SCGate2ClientMsgNotify::release_roommsg() {
  
  ::pb::RoomInfoMsg* temp = roommsg_;
  roommsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::RoomInfoMsg* SCGate2ClientMsgNotify::unsafe_arena_release_roommsg() {
  // @@protoc_insertion_point(field_release:pb.SCGate2ClientMsgNotify.roommsg)
  
  ::pb::RoomInfoMsg* temp = roommsg_;
  roommsg_ = nullptr;
  return temp;
}
inline ::pb::RoomInfoMsg* SCGate2ClientMsgNotify::_internal_mutable_roommsg() {
  
  if (roommsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::RoomInfoMsg>(GetArena());
    roommsg_ = p;
  }
  return roommsg_;
}
inline ::pb::RoomInfoMsg* SCGate2ClientMsgNotify::mutable_roommsg() {
  // @@protoc_insertion_point(field_mutable:pb.SCGate2ClientMsgNotify.roommsg)
  return _internal_mutable_roommsg();
}
inline void SCGate2ClientMsgNotify::set_allocated_roommsg(::pb::RoomInfoMsg* roommsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roommsg_;
  }
  if (roommsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roommsg);
    if (message_arena != submessage_arena) {
      roommsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roommsg, submessage_arena);
    }
    
  } else {
    
  }
  roommsg_ = roommsg;
  // @@protoc_insertion_point(field_set_allocated:pb.SCGate2ClientMsgNotify.roommsg)
}

// repeated .pb.InRoomUserInfo users = 3;
inline int SCGate2ClientMsgNotify::_internal_users_size() const {
  return users_.size();
}
inline int SCGate2ClientMsgNotify::users_size() const {
  return _internal_users_size();
}
inline void SCGate2ClientMsgNotify::clear_users() {
  users_.Clear();
}
inline ::pb::InRoomUserInfo* SCGate2ClientMsgNotify::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SCGate2ClientMsgNotify.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >*
SCGate2ClientMsgNotify::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:pb.SCGate2ClientMsgNotify.users)
  return &users_;
}
inline const ::pb::InRoomUserInfo& SCGate2ClientMsgNotify::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::pb::InRoomUserInfo& SCGate2ClientMsgNotify::users(int index) const {
  // @@protoc_insertion_point(field_get:pb.SCGate2ClientMsgNotify.users)
  return _internal_users(index);
}
inline ::pb::InRoomUserInfo* SCGate2ClientMsgNotify::_internal_add_users() {
  return users_.Add();
}
inline ::pb::InRoomUserInfo* SCGate2ClientMsgNotify::add_users() {
  // @@protoc_insertion_point(field_add:pb.SCGate2ClientMsgNotify.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >&
SCGate2ClientMsgNotify::users() const {
  // @@protoc_insertion_point(field_list:pb.SCGate2ClientMsgNotify.users)
  return users_;
}

// -------------------------------------------------------------------

// SCNode2ClientBattleMsgNotify

// uint32 accountid = 1;
inline void SCNode2ClientBattleMsgNotify::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCNode2ClientBattleMsgNotify::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCNode2ClientBattleMsgNotify::accountid() const {
  // @@protoc_insertion_point(field_get:pb.SCNode2ClientBattleMsgNotify.accountid)
  return _internal_accountid();
}
inline void SCNode2ClientBattleMsgNotify::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void SCNode2ClientBattleMsgNotify::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.SCNode2ClientBattleMsgNotify.accountid)
}

// string addr = 2;
inline void SCNode2ClientBattleMsgNotify::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& SCNode2ClientBattleMsgNotify::addr() const {
  // @@protoc_insertion_point(field_get:pb.SCNode2ClientBattleMsgNotify.addr)
  return _internal_addr();
}
inline void SCNode2ClientBattleMsgNotify::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:pb.SCNode2ClientBattleMsgNotify.addr)
}
inline std::string* SCNode2ClientBattleMsgNotify::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:pb.SCNode2ClientBattleMsgNotify.addr)
  return _internal_mutable_addr();
}
inline const std::string& SCNode2ClientBattleMsgNotify::_internal_addr() const {
  return addr_.Get();
}
inline void SCNode2ClientBattleMsgNotify::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCNode2ClientBattleMsgNotify::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SCNode2ClientBattleMsgNotify.addr)
}
inline void SCNode2ClientBattleMsgNotify::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SCNode2ClientBattleMsgNotify.addr)
}
inline void SCNode2ClientBattleMsgNotify::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SCNode2ClientBattleMsgNotify.addr)
}
inline std::string* SCNode2ClientBattleMsgNotify::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCNode2ClientBattleMsgNotify::release_addr() {
  // @@protoc_insertion_point(field_release:pb.SCNode2ClientBattleMsgNotify.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCNode2ClientBattleMsgNotify::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SCNode2ClientBattleMsgNotify.addr)
}

// uint32 port = 3;
inline void SCNode2ClientBattleMsgNotify::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCNode2ClientBattleMsgNotify::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SCNode2ClientBattleMsgNotify::port() const {
  // @@protoc_insertion_point(field_get:pb.SCNode2ClientBattleMsgNotify.port)
  return _internal_port();
}
inline void SCNode2ClientBattleMsgNotify::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void SCNode2ClientBattleMsgNotify::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pb.SCNode2ClientBattleMsgNotify.port)
}

// string token = 4;
inline void SCNode2ClientBattleMsgNotify::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SCNode2ClientBattleMsgNotify::token() const {
  // @@protoc_insertion_point(field_get:pb.SCNode2ClientBattleMsgNotify.token)
  return _internal_token();
}
inline void SCNode2ClientBattleMsgNotify::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.SCNode2ClientBattleMsgNotify.token)
}
inline std::string* SCNode2ClientBattleMsgNotify::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.SCNode2ClientBattleMsgNotify.token)
  return _internal_mutable_token();
}
inline const std::string& SCNode2ClientBattleMsgNotify::_internal_token() const {
  return token_.Get();
}
inline void SCNode2ClientBattleMsgNotify::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCNode2ClientBattleMsgNotify::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SCNode2ClientBattleMsgNotify.token)
}
inline void SCNode2ClientBattleMsgNotify::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SCNode2ClientBattleMsgNotify.token)
}
inline void SCNode2ClientBattleMsgNotify::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SCNode2ClientBattleMsgNotify.token)
}
inline std::string* SCNode2ClientBattleMsgNotify::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCNode2ClientBattleMsgNotify::release_token() {
  // @@protoc_insertion_point(field_release:pb.SCNode2ClientBattleMsgNotify.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCNode2ClientBattleMsgNotify::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SCNode2ClientBattleMsgNotify.token)
}

// -------------------------------------------------------------------

// AllRoomInfoNotify

// uint32 room_count = 1;
inline void AllRoomInfoNotify::clear_room_count() {
  room_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllRoomInfoNotify::_internal_room_count() const {
  return room_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AllRoomInfoNotify::room_count() const {
  // @@protoc_insertion_point(field_get:pb.AllRoomInfoNotify.room_count)
  return _internal_room_count();
}
inline void AllRoomInfoNotify::_internal_set_room_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_count_ = value;
}
inline void AllRoomInfoNotify::set_room_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_count(value);
  // @@protoc_insertion_point(field_set:pb.AllRoomInfoNotify.room_count)
}

// repeated .pb.RoomInfoMsg room_info_list = 2;
inline int AllRoomInfoNotify::_internal_room_info_list_size() const {
  return room_info_list_.size();
}
inline int AllRoomInfoNotify::room_info_list_size() const {
  return _internal_room_info_list_size();
}
inline void AllRoomInfoNotify::clear_room_info_list() {
  room_info_list_.Clear();
}
inline ::pb::RoomInfoMsg* AllRoomInfoNotify::mutable_room_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.AllRoomInfoNotify.room_info_list)
  return room_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::RoomInfoMsg >*
AllRoomInfoNotify::mutable_room_info_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.AllRoomInfoNotify.room_info_list)
  return &room_info_list_;
}
inline const ::pb::RoomInfoMsg& AllRoomInfoNotify::_internal_room_info_list(int index) const {
  return room_info_list_.Get(index);
}
inline const ::pb::RoomInfoMsg& AllRoomInfoNotify::room_info_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.AllRoomInfoNotify.room_info_list)
  return _internal_room_info_list(index);
}
inline ::pb::RoomInfoMsg* AllRoomInfoNotify::_internal_add_room_info_list() {
  return room_info_list_.Add();
}
inline ::pb::RoomInfoMsg* AllRoomInfoNotify::add_room_info_list() {
  // @@protoc_insertion_point(field_add:pb.AllRoomInfoNotify.room_info_list)
  return _internal_add_room_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::RoomInfoMsg >&
AllRoomInfoNotify::room_info_list() const {
  // @@protoc_insertion_point(field_list:pb.AllRoomInfoNotify.room_info_list)
  return room_info_list_;
}

// -------------------------------------------------------------------

// TryCreateRoomCsReq

// uint32 AccountID = 1;
inline void TryCreateRoomCsReq::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomCsReq.AccountID)
  return _internal_accountid();
}
inline void TryCreateRoomCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void TryCreateRoomCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomCsReq.AccountID)
}

// uint64 RoomID = 2;
inline void TryCreateRoomCsReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryCreateRoomCsReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryCreateRoomCsReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomCsReq.RoomID)
  return _internal_roomid();
}
inline void TryCreateRoomCsReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void TryCreateRoomCsReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomCsReq.RoomID)
}

// uint32 MaxUserCount = 3;
inline void TryCreateRoomCsReq::clear_maxusercount() {
  maxusercount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomCsReq::_internal_maxusercount() const {
  return maxusercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomCsReq::maxusercount() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomCsReq.MaxUserCount)
  return _internal_maxusercount();
}
inline void TryCreateRoomCsReq::_internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxusercount_ = value;
}
inline void TryCreateRoomCsReq::set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxusercount(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomCsReq.MaxUserCount)
}

// string Name = 4;
inline void TryCreateRoomCsReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TryCreateRoomCsReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomCsReq.Name)
  return _internal_name();
}
inline void TryCreateRoomCsReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomCsReq.Name)
}
inline std::string* TryCreateRoomCsReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.TryCreateRoomCsReq.Name)
  return _internal_mutable_name();
}
inline const std::string& TryCreateRoomCsReq::_internal_name() const {
  return name_.Get();
}
inline void TryCreateRoomCsReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TryCreateRoomCsReq::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TryCreateRoomCsReq.Name)
}
inline void TryCreateRoomCsReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TryCreateRoomCsReq.Name)
}
inline void TryCreateRoomCsReq::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TryCreateRoomCsReq.Name)
}
inline std::string* TryCreateRoomCsReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TryCreateRoomCsReq::release_name() {
  // @@protoc_insertion_point(field_release:pb.TryCreateRoomCsReq.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TryCreateRoomCsReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TryCreateRoomCsReq.Name)
}

// -------------------------------------------------------------------

// TryCreateRoomScRsp

// .pb.TryCreateRoomScRsp.RetCode retcode = 1;
inline void TryCreateRoomScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::_internal_retcode() const {
  return static_cast< ::pb::TryCreateRoomScRsp_RetCode >(retcode_);
}
inline ::pb::TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomScRsp.retcode)
  return _internal_retcode();
}
inline void TryCreateRoomScRsp::_internal_set_retcode(::pb::TryCreateRoomScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void TryCreateRoomScRsp::set_retcode(::pb::TryCreateRoomScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomScRsp.retcode)
}

// uint64 RoomID = 2;
inline void TryCreateRoomScRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryCreateRoomScRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryCreateRoomScRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomScRsp.RoomID)
  return _internal_roomid();
}
inline void TryCreateRoomScRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void TryCreateRoomScRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomScRsp.RoomID)
}

// uint32 MaxUserCount = 3;
inline void TryCreateRoomScRsp::clear_maxusercount() {
  maxusercount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomScRsp::_internal_maxusercount() const {
  return maxusercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomScRsp::maxusercount() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomScRsp.MaxUserCount)
  return _internal_maxusercount();
}
inline void TryCreateRoomScRsp::_internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxusercount_ = value;
}
inline void TryCreateRoomScRsp::set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxusercount(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomScRsp.MaxUserCount)
}

// uint32 Level = 4;
inline void TryCreateRoomScRsp::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomScRsp::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryCreateRoomScRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TryCreateRoomScRsp.Level)
  return _internal_level();
}
inline void TryCreateRoomScRsp::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void TryCreateRoomScRsp::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.TryCreateRoomScRsp.Level)
}

// -------------------------------------------------------------------

// TryEnterRoomCsReq

// uint32 AccountID = 1;
inline void TryEnterRoomCsReq::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomCsReq.AccountID)
  return _internal_accountid();
}
inline void TryEnterRoomCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void TryEnterRoomCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomCsReq.AccountID)
}

// uint64 RoomID = 2;
inline void TryEnterRoomCsReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryEnterRoomCsReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryEnterRoomCsReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomCsReq.RoomID)
  return _internal_roomid();
}
inline void TryEnterRoomCsReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void TryEnterRoomCsReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomCsReq.RoomID)
}

// -------------------------------------------------------------------

// TryEnterRoomScRsp

// .pb.TryEnterRoomScRsp.RetCode retcode = 1;
inline void TryEnterRoomScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::_internal_retcode() const {
  return static_cast< ::pb::TryEnterRoomScRsp_RetCode >(retcode_);
}
inline ::pb::TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomScRsp.retcode)
  return _internal_retcode();
}
inline void TryEnterRoomScRsp::_internal_set_retcode(::pb::TryEnterRoomScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void TryEnterRoomScRsp::set_retcode(::pb::TryEnterRoomScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomScRsp.retcode)
}

// uint64 roomId = 2;
inline void TryEnterRoomScRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryEnterRoomScRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryEnterRoomScRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomScRsp.roomId)
  return _internal_roomid();
}
inline void TryEnterRoomScRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void TryEnterRoomScRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomScRsp.roomId)
}

// uint32 MaxUserCount = 3;
inline void TryEnterRoomScRsp::clear_maxusercount() {
  maxusercount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomScRsp::_internal_maxusercount() const {
  return maxusercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomScRsp::maxusercount() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomScRsp.MaxUserCount)
  return _internal_maxusercount();
}
inline void TryEnterRoomScRsp::_internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxusercount_ = value;
}
inline void TryEnterRoomScRsp::set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxusercount(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomScRsp.MaxUserCount)
}

// uint32 Level = 4;
inline void TryEnterRoomScRsp::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomScRsp::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryEnterRoomScRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TryEnterRoomScRsp.Level)
  return _internal_level();
}
inline void TryEnterRoomScRsp::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void TryEnterRoomScRsp::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.TryEnterRoomScRsp.Level)
}

// -------------------------------------------------------------------

// TryLeaveRoomCsReq

// uint64 accountId = 1;
inline void TryLeaveRoomCsReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryLeaveRoomCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryLeaveRoomCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.TryLeaveRoomCsReq.accountId)
  return _internal_accountid();
}
inline void TryLeaveRoomCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void TryLeaveRoomCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.TryLeaveRoomCsReq.accountId)
}

// uint64 roomid = 2;
inline void TryLeaveRoomCsReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryLeaveRoomCsReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TryLeaveRoomCsReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.TryLeaveRoomCsReq.roomid)
  return _internal_roomid();
}
inline void TryLeaveRoomCsReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void TryLeaveRoomCsReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.TryLeaveRoomCsReq.roomid)
}

// -------------------------------------------------------------------

// TryLeaveRoomScRsp

// .pb.TryLeaveRoomScRsp.RetCode retcode = 1;
inline void TryLeaveRoomScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::_internal_retcode() const {
  return static_cast< ::pb::TryLeaveRoomScRsp_RetCode >(retcode_);
}
inline ::pb::TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TryLeaveRoomScRsp.retcode)
  return _internal_retcode();
}
inline void TryLeaveRoomScRsp::_internal_set_retcode(::pb::TryLeaveRoomScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void TryLeaveRoomScRsp::set_retcode(::pb::TryLeaveRoomScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.TryLeaveRoomScRsp.retcode)
}

// -------------------------------------------------------------------

// InRoomUserInfo

// uint64 AccountID = 1;
inline void InRoomUserInfo::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InRoomUserInfo::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InRoomUserInfo::accountid() const {
  // @@protoc_insertion_point(field_get:pb.InRoomUserInfo.AccountID)
  return _internal_accountid();
}
inline void InRoomUserInfo::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void InRoomUserInfo::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.InRoomUserInfo.AccountID)
}

// uint32 playerID = 2;
inline void InRoomUserInfo::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::playerid() const {
  // @@protoc_insertion_point(field_get:pb.InRoomUserInfo.playerID)
  return _internal_playerid();
}
inline void InRoomUserInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void InRoomUserInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.InRoomUserInfo.playerID)
}

// uint32 isHost = 3;
inline void InRoomUserInfo::clear_ishost() {
  ishost_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::_internal_ishost() const {
  return ishost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::ishost() const {
  // @@protoc_insertion_point(field_get:pb.InRoomUserInfo.isHost)
  return _internal_ishost();
}
inline void InRoomUserInfo::_internal_set_ishost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ishost_ = value;
}
inline void InRoomUserInfo::set_ishost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ishost(value);
  // @@protoc_insertion_point(field_set:pb.InRoomUserInfo.isHost)
}

// uint32 ReadyState = 4;
inline void InRoomUserInfo::clear_readystate() {
  readystate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::_internal_readystate() const {
  return readystate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InRoomUserInfo::readystate() const {
  // @@protoc_insertion_point(field_get:pb.InRoomUserInfo.ReadyState)
  return _internal_readystate();
}
inline void InRoomUserInfo::_internal_set_readystate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  readystate_ = value;
}
inline void InRoomUserInfo::set_readystate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_readystate(value);
  // @@protoc_insertion_point(field_set:pb.InRoomUserInfo.ReadyState)
}

// string name = 5;
inline void InRoomUserInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InRoomUserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.InRoomUserInfo.name)
  return _internal_name();
}
inline void InRoomUserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.InRoomUserInfo.name)
}
inline std::string* InRoomUserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.InRoomUserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& InRoomUserInfo::_internal_name() const {
  return name_.Get();
}
inline void InRoomUserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InRoomUserInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.InRoomUserInfo.name)
}
inline void InRoomUserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.InRoomUserInfo.name)
}
inline void InRoomUserInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.InRoomUserInfo.name)
}
inline std::string* InRoomUserInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InRoomUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.InRoomUserInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InRoomUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.InRoomUserInfo.name)
}

// -------------------------------------------------------------------

// RoomUserInfoNotify

// uint64 RoomID = 1;
inline void RoomUserInfoNotify::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomUserInfoNotify::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomUserInfoNotify::roomid() const {
  // @@protoc_insertion_point(field_get:pb.RoomUserInfoNotify.RoomID)
  return _internal_roomid();
}
inline void RoomUserInfoNotify::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void RoomUserInfoNotify::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.RoomUserInfoNotify.RoomID)
}

// uint32 MaxUserCount = 2;
inline void RoomUserInfoNotify::clear_maxusercount() {
  maxusercount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomUserInfoNotify::_internal_maxusercount() const {
  return maxusercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomUserInfoNotify::maxusercount() const {
  // @@protoc_insertion_point(field_get:pb.RoomUserInfoNotify.MaxUserCount)
  return _internal_maxusercount();
}
inline void RoomUserInfoNotify::_internal_set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxusercount_ = value;
}
inline void RoomUserInfoNotify::set_maxusercount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxusercount(value);
  // @@protoc_insertion_point(field_set:pb.RoomUserInfoNotify.MaxUserCount)
}

// uint32 Level = 3;
inline void RoomUserInfoNotify::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomUserInfoNotify::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomUserInfoNotify::level() const {
  // @@protoc_insertion_point(field_get:pb.RoomUserInfoNotify.Level)
  return _internal_level();
}
inline void RoomUserInfoNotify::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void RoomUserInfoNotify::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.RoomUserInfoNotify.Level)
}

// repeated .pb.InRoomUserInfo userlists = 4;
inline int RoomUserInfoNotify::_internal_userlists_size() const {
  return userlists_.size();
}
inline int RoomUserInfoNotify::userlists_size() const {
  return _internal_userlists_size();
}
inline void RoomUserInfoNotify::clear_userlists() {
  userlists_.Clear();
}
inline ::pb::InRoomUserInfo* RoomUserInfoNotify::mutable_userlists(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomUserInfoNotify.userlists)
  return userlists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >*
RoomUserInfoNotify::mutable_userlists() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomUserInfoNotify.userlists)
  return &userlists_;
}
inline const ::pb::InRoomUserInfo& RoomUserInfoNotify::_internal_userlists(int index) const {
  return userlists_.Get(index);
}
inline const ::pb::InRoomUserInfo& RoomUserInfoNotify::userlists(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomUserInfoNotify.userlists)
  return _internal_userlists(index);
}
inline ::pb::InRoomUserInfo* RoomUserInfoNotify::_internal_add_userlists() {
  return userlists_.Add();
}
inline ::pb::InRoomUserInfo* RoomUserInfoNotify::add_userlists() {
  // @@protoc_insertion_point(field_add:pb.RoomUserInfoNotify.userlists)
  return _internal_add_userlists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::InRoomUserInfo >&
RoomUserInfoNotify::userlists() const {
  // @@protoc_insertion_point(field_list:pb.RoomUserInfoNotify.userlists)
  return userlists_;
}

// -------------------------------------------------------------------

// ChooseLevelCsReq

// uint64 AccountId = 1;
inline void ChooseLevelCsReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelCsReq.AccountId)
  return _internal_accountid();
}
inline void ChooseLevelCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void ChooseLevelCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelCsReq.AccountId)
}

// uint64 roomId = 2;
inline void ChooseLevelCsReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelCsReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelCsReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelCsReq.roomId)
  return _internal_roomid();
}
inline void ChooseLevelCsReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void ChooseLevelCsReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelCsReq.roomId)
}

// uint32 LevelId = 3;
inline void ChooseLevelCsReq::clear_levelid() {
  levelid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseLevelCsReq::_internal_levelid() const {
  return levelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseLevelCsReq::levelid() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelCsReq.LevelId)
  return _internal_levelid();
}
inline void ChooseLevelCsReq::_internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  levelid_ = value;
}
inline void ChooseLevelCsReq::set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelCsReq.LevelId)
}

// -------------------------------------------------------------------

// ChooseLevelScRsp

// .pb.ChooseLevelScRsp.RetCode retcode = 1;
inline void ChooseLevelScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::ChooseLevelScRsp_RetCode ChooseLevelScRsp::_internal_retcode() const {
  return static_cast< ::pb::ChooseLevelScRsp_RetCode >(retcode_);
}
inline ::pb::ChooseLevelScRsp_RetCode ChooseLevelScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelScRsp.retcode)
  return _internal_retcode();
}
inline void ChooseLevelScRsp::_internal_set_retcode(::pb::ChooseLevelScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void ChooseLevelScRsp::set_retcode(::pb::ChooseLevelScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelScRsp.retcode)
}

// uint64 roomId = 2;
inline void ChooseLevelScRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelScRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChooseLevelScRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelScRsp.roomId)
  return _internal_roomid();
}
inline void ChooseLevelScRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void ChooseLevelScRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelScRsp.roomId)
}

// uint32 LevelId = 3;
inline void ChooseLevelScRsp::clear_levelid() {
  levelid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseLevelScRsp::_internal_levelid() const {
  return levelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseLevelScRsp::levelid() const {
  // @@protoc_insertion_point(field_get:pb.ChooseLevelScRsp.LevelId)
  return _internal_levelid();
}
inline void ChooseLevelScRsp::_internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  levelid_ = value;
}
inline void ChooseLevelScRsp::set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:pb.ChooseLevelScRsp.LevelId)
}

// -------------------------------------------------------------------

// ReadyInRoomCsReq

// uint32 AccountID = 1;
inline void ReadyInRoomCsReq::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadyInRoomCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadyInRoomCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.ReadyInRoomCsReq.AccountID)
  return _internal_accountid();
}
inline void ReadyInRoomCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void ReadyInRoomCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.ReadyInRoomCsReq.AccountID)
}

// uint64 RoomID = 2;
inline void ReadyInRoomCsReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadyInRoomCsReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadyInRoomCsReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.ReadyInRoomCsReq.RoomID)
  return _internal_roomid();
}
inline void ReadyInRoomCsReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void ReadyInRoomCsReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.ReadyInRoomCsReq.RoomID)
}

// uint32 MasterPort = 3;
inline void ReadyInRoomCsReq::clear_masterport() {
  masterport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadyInRoomCsReq::_internal_masterport() const {
  return masterport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadyInRoomCsReq::masterport() const {
  // @@protoc_insertion_point(field_get:pb.ReadyInRoomCsReq.MasterPort)
  return _internal_masterport();
}
inline void ReadyInRoomCsReq::_internal_set_masterport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  masterport_ = value;
}
inline void ReadyInRoomCsReq::set_masterport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_masterport(value);
  // @@protoc_insertion_point(field_set:pb.ReadyInRoomCsReq.MasterPort)
}

// -------------------------------------------------------------------

// ReadyInRoomScRsp

// .pb.ReadyInRoomScRsp.RetCode retcode = 1;
inline void ReadyInRoomScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::_internal_retcode() const {
  return static_cast< ::pb::ReadyInRoomScRsp_RetCode >(retcode_);
}
inline ::pb::ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.ReadyInRoomScRsp.retcode)
  return _internal_retcode();
}
inline void ReadyInRoomScRsp::_internal_set_retcode(::pb::ReadyInRoomScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void ReadyInRoomScRsp::set_retcode(::pb::ReadyInRoomScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.ReadyInRoomScRsp.retcode)
}

// -------------------------------------------------------------------

// TryLinkTeamScRsp

// uint32 playerID = 1;
inline void TryLinkTeamScRsp::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::playerid() const {
  // @@protoc_insertion_point(field_get:pb.TryLinkTeamScRsp.playerID)
  return _internal_playerid();
}
inline void TryLinkTeamScRsp::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void TryLinkTeamScRsp::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.TryLinkTeamScRsp.playerID)
}

// uint32 type = 2;
inline void TryLinkTeamScRsp::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::type() const {
  // @@protoc_insertion_point(field_get:pb.TryLinkTeamScRsp.type)
  return _internal_type();
}
inline void TryLinkTeamScRsp::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TryLinkTeamScRsp::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.TryLinkTeamScRsp.type)
}

// string MasterIP = 3;
inline void TryLinkTeamScRsp::clear_masterip() {
  masterip_.ClearToEmpty();
}
inline const std::string& TryLinkTeamScRsp::masterip() const {
  // @@protoc_insertion_point(field_get:pb.TryLinkTeamScRsp.MasterIP)
  return _internal_masterip();
}
inline void TryLinkTeamScRsp::set_masterip(const std::string& value) {
  _internal_set_masterip(value);
  // @@protoc_insertion_point(field_set:pb.TryLinkTeamScRsp.MasterIP)
}
inline std::string* TryLinkTeamScRsp::mutable_masterip() {
  // @@protoc_insertion_point(field_mutable:pb.TryLinkTeamScRsp.MasterIP)
  return _internal_mutable_masterip();
}
inline const std::string& TryLinkTeamScRsp::_internal_masterip() const {
  return masterip_.Get();
}
inline void TryLinkTeamScRsp::_internal_set_masterip(const std::string& value) {
  
  masterip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TryLinkTeamScRsp::set_masterip(std::string&& value) {
  
  masterip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TryLinkTeamScRsp.MasterIP)
}
inline void TryLinkTeamScRsp::set_masterip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masterip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TryLinkTeamScRsp.MasterIP)
}
inline void TryLinkTeamScRsp::set_masterip(const char* value,
    size_t size) {
  
  masterip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TryLinkTeamScRsp.MasterIP)
}
inline std::string* TryLinkTeamScRsp::_internal_mutable_masterip() {
  
  return masterip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TryLinkTeamScRsp::release_masterip() {
  // @@protoc_insertion_point(field_release:pb.TryLinkTeamScRsp.MasterIP)
  return masterip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TryLinkTeamScRsp::set_allocated_masterip(std::string* masterip) {
  if (masterip != nullptr) {
    
  } else {
    
  }
  masterip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masterip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TryLinkTeamScRsp.MasterIP)
}

// uint32 Port = 4;
inline void TryLinkTeamScRsp::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::port() const {
  // @@protoc_insertion_point(field_get:pb.TryLinkTeamScRsp.Port)
  return _internal_port();
}
inline void TryLinkTeamScRsp::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TryLinkTeamScRsp::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pb.TryLinkTeamScRsp.Port)
}

// uint32 LevelID = 5;
inline void TryLinkTeamScRsp::clear_levelid() {
  levelid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::_internal_levelid() const {
  return levelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TryLinkTeamScRsp::levelid() const {
  // @@protoc_insertion_point(field_get:pb.TryLinkTeamScRsp.LevelID)
  return _internal_levelid();
}
inline void TryLinkTeamScRsp::_internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  levelid_ = value;
}
inline void TryLinkTeamScRsp::set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:pb.TryLinkTeamScRsp.LevelID)
}

// -------------------------------------------------------------------

// TeamHeartBeatCsReq

// uint32 playerID = 1;
inline void TeamHeartBeatCsReq::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamHeartBeatCsReq::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamHeartBeatCsReq::playerid() const {
  // @@protoc_insertion_point(field_get:pb.TeamHeartBeatCsReq.playerID)
  return _internal_playerid();
}
inline void TeamHeartBeatCsReq::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void TeamHeartBeatCsReq::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.TeamHeartBeatCsReq.playerID)
}

// uint32 type = 2;
inline void TeamHeartBeatCsReq::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamHeartBeatCsReq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamHeartBeatCsReq::type() const {
  // @@protoc_insertion_point(field_get:pb.TeamHeartBeatCsReq.type)
  return _internal_type();
}
inline void TeamHeartBeatCsReq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TeamHeartBeatCsReq::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.TeamHeartBeatCsReq.type)
}

// -------------------------------------------------------------------

// LinkTeamSuccCsReq

// uint32 AccountID = 1;
inline void LinkTeamSuccCsReq::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkTeamSuccCsReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkTeamSuccCsReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.LinkTeamSuccCsReq.AccountID)
  return _internal_accountid();
}
inline void LinkTeamSuccCsReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void LinkTeamSuccCsReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.LinkTeamSuccCsReq.AccountID)
}

// bool succ = 2;
inline void LinkTeamSuccCsReq::clear_succ() {
  succ_ = false;
}
inline bool LinkTeamSuccCsReq::_internal_succ() const {
  return succ_;
}
inline bool LinkTeamSuccCsReq::succ() const {
  // @@protoc_insertion_point(field_get:pb.LinkTeamSuccCsReq.succ)
  return _internal_succ();
}
inline void LinkTeamSuccCsReq::_internal_set_succ(bool value) {
  
  succ_ = value;
}
inline void LinkTeamSuccCsReq::set_succ(bool value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:pb.LinkTeamSuccCsReq.succ)
}

// -------------------------------------------------------------------

// GameStartScReq

// uint32 LevelID = 1;
inline void GameStartScReq::clear_levelid() {
  levelid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartScReq::_internal_levelid() const {
  return levelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartScReq::levelid() const {
  // @@protoc_insertion_point(field_get:pb.GameStartScReq.LevelID)
  return _internal_levelid();
}
inline void GameStartScReq::_internal_set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  levelid_ = value;
}
inline void GameStartScReq::set_levelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:pb.GameStartScReq.LevelID)
}

// -------------------------------------------------------------------

// GameOverCsNotify

// uint64 accountId = 1;
inline void GameOverCsNotify::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::accountid() const {
  // @@protoc_insertion_point(field_get:pb.GameOverCsNotify.accountId)
  return _internal_accountid();
}
inline void GameOverCsNotify::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void GameOverCsNotify::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.GameOverCsNotify.accountId)
}

// uint64 roomId = 2;
inline void GameOverCsNotify::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::roomid() const {
  // @@protoc_insertion_point(field_get:pb.GameOverCsNotify.roomId)
  return _internal_roomid();
}
inline void GameOverCsNotify::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void GameOverCsNotify::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.GameOverCsNotify.roomId)
}

// uint64 score = 3;
inline void GameOverCsNotify::clear_score() {
  score_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameOverCsNotify::score() const {
  // @@protoc_insertion_point(field_get:pb.GameOverCsNotify.score)
  return _internal_score();
}
inline void GameOverCsNotify::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  score_ = value;
}
inline void GameOverCsNotify::set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:pb.GameOverCsNotify.score)
}

// -------------------------------------------------------------------

// BattleMsgScNotify

// uint32 accountid = 1;
inline void BattleMsgScNotify::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMsgScNotify::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMsgScNotify::accountid() const {
  // @@protoc_insertion_point(field_get:pb.BattleMsgScNotify.accountid)
  return _internal_accountid();
}
inline void BattleMsgScNotify::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void BattleMsgScNotify::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.BattleMsgScNotify.accountid)
}

// string addr = 2;
inline void BattleMsgScNotify::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& BattleMsgScNotify::addr() const {
  // @@protoc_insertion_point(field_get:pb.BattleMsgScNotify.addr)
  return _internal_addr();
}
inline void BattleMsgScNotify::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:pb.BattleMsgScNotify.addr)
}
inline std::string* BattleMsgScNotify::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:pb.BattleMsgScNotify.addr)
  return _internal_mutable_addr();
}
inline const std::string& BattleMsgScNotify::_internal_addr() const {
  return addr_.Get();
}
inline void BattleMsgScNotify::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BattleMsgScNotify::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BattleMsgScNotify.addr)
}
inline void BattleMsgScNotify::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BattleMsgScNotify.addr)
}
inline void BattleMsgScNotify::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BattleMsgScNotify.addr)
}
inline std::string* BattleMsgScNotify::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BattleMsgScNotify::release_addr() {
  // @@protoc_insertion_point(field_release:pb.BattleMsgScNotify.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMsgScNotify::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BattleMsgScNotify.addr)
}

// uint32 port = 3;
inline void BattleMsgScNotify::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMsgScNotify::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMsgScNotify::port() const {
  // @@protoc_insertion_point(field_get:pb.BattleMsgScNotify.port)
  return _internal_port();
}
inline void BattleMsgScNotify::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void BattleMsgScNotify::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pb.BattleMsgScNotify.port)
}

// string token = 4;
inline void BattleMsgScNotify::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& BattleMsgScNotify::token() const {
  // @@protoc_insertion_point(field_get:pb.BattleMsgScNotify.token)
  return _internal_token();
}
inline void BattleMsgScNotify::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.BattleMsgScNotify.token)
}
inline std::string* BattleMsgScNotify::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.BattleMsgScNotify.token)
  return _internal_mutable_token();
}
inline const std::string& BattleMsgScNotify::_internal_token() const {
  return token_.Get();
}
inline void BattleMsgScNotify::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BattleMsgScNotify::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BattleMsgScNotify.token)
}
inline void BattleMsgScNotify::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BattleMsgScNotify.token)
}
inline void BattleMsgScNotify::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BattleMsgScNotify.token)
}
inline std::string* BattleMsgScNotify::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BattleMsgScNotify::release_token() {
  // @@protoc_insertion_point(field_release:pb.BattleMsgScNotify.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMsgScNotify::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BattleMsgScNotify.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::LoginAuthScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::LoginAuthScRsp_RetCode>() {
  return ::pb::LoginAuthScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::LoginScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::LoginScRsp_RetCode>() {
  return ::pb::LoginScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::TryCreateRoomScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TryCreateRoomScRsp_RetCode>() {
  return ::pb::TryCreateRoomScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::TryEnterRoomScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TryEnterRoomScRsp_RetCode>() {
  return ::pb::TryEnterRoomScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::TryLeaveRoomScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TryLeaveRoomScRsp_RetCode>() {
  return ::pb::TryLeaveRoomScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::ChooseLevelScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ChooseLevelScRsp_RetCode>() {
  return ::pb::ChooseLevelScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::ReadyInRoomScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ReadyInRoomScRsp_RetCode>() {
  return ::pb::ReadyInRoomScRsp_RetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CsCmd_2eproto
