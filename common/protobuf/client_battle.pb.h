// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_battle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fbattle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fbattle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fbattle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fbattle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbattle_2eproto;
namespace pb {
class CliStatusChangeNotify;
class CliStatusChangeNotifyDefaultTypeInternal;
extern CliStatusChangeNotifyDefaultTypeInternal _CliStatusChangeNotify_default_instance_;
class CliTryLinkBattleCsReq;
class CliTryLinkBattleCsReqDefaultTypeInternal;
extern CliTryLinkBattleCsReqDefaultTypeInternal _CliTryLinkBattleCsReq_default_instance_;
class CliTryLinkBattleScRsp;
class CliTryLinkBattleScRspDefaultTypeInternal;
extern CliTryLinkBattleScRspDefaultTypeInternal _CliTryLinkBattleScRsp_default_instance_;
class ClientInputPush;
class ClientInputPushDefaultTypeInternal;
extern ClientInputPushDefaultTypeInternal _ClientInputPush_default_instance_;
class PlayerStatusStruct;
class PlayerStatusStructDefaultTypeInternal;
extern PlayerStatusStructDefaultTypeInternal _PlayerStatusStruct_default_instance_;
class SkillStatusStruct;
class SkillStatusStructDefaultTypeInternal;
extern SkillStatusStructDefaultTypeInternal _SkillStatusStruct_default_instance_;
class WorldSnapshotPush;
class WorldSnapshotPushDefaultTypeInternal;
extern WorldSnapshotPushDefaultTypeInternal _WorldSnapshotPush_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CliStatusChangeNotify* Arena::CreateMaybeMessage<::pb::CliStatusChangeNotify>(Arena*);
template<> ::pb::CliTryLinkBattleCsReq* Arena::CreateMaybeMessage<::pb::CliTryLinkBattleCsReq>(Arena*);
template<> ::pb::CliTryLinkBattleScRsp* Arena::CreateMaybeMessage<::pb::CliTryLinkBattleScRsp>(Arena*);
template<> ::pb::ClientInputPush* Arena::CreateMaybeMessage<::pb::ClientInputPush>(Arena*);
template<> ::pb::PlayerStatusStruct* Arena::CreateMaybeMessage<::pb::PlayerStatusStruct>(Arena*);
template<> ::pb::SkillStatusStruct* Arena::CreateMaybeMessage<::pb::SkillStatusStruct>(Arena*);
template<> ::pb::WorldSnapshotPush* Arena::CreateMaybeMessage<::pb::WorldSnapshotPush>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum CliTryLinkBattleScRsp_RetCode : int {
  CliTryLinkBattleScRsp_RetCode_RET_SUCC = 0,
  CliTryLinkBattleScRsp_RetCode_RET_FAILED = 1,
  CliTryLinkBattleScRsp_RetCode_CliTryLinkBattleScRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CliTryLinkBattleScRsp_RetCode_CliTryLinkBattleScRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CliTryLinkBattleScRsp_RetCode_IsValid(int value);
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp_RetCode_RetCode_MIN = CliTryLinkBattleScRsp_RetCode_RET_SUCC;
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp_RetCode_RetCode_MAX = CliTryLinkBattleScRsp_RetCode_RET_FAILED;
constexpr int CliTryLinkBattleScRsp_RetCode_RetCode_ARRAYSIZE = CliTryLinkBattleScRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CliTryLinkBattleScRsp_RetCode_descriptor();
template<typename T>
inline const std::string& CliTryLinkBattleScRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CliTryLinkBattleScRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CliTryLinkBattleScRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CliTryLinkBattleScRsp_RetCode_descriptor(), enum_t_value);
}
inline bool CliTryLinkBattleScRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CliTryLinkBattleScRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CliTryLinkBattleScRsp_RetCode>(
    CliTryLinkBattleScRsp_RetCode_descriptor(), name, value);
}
enum CliStatusChangeNotify_TypeCode : int {
  CliStatusChangeNotify_TypeCode_PLAYER_JOIN = 0,
  CliStatusChangeNotify_TypeCode_PLAYER_LEAVE = 1,
  CliStatusChangeNotify_TypeCode_PLAYER_DISCONNECT = 2,
  CliStatusChangeNotify_TypeCode_PLAYER_RECONNECT = 3,
  CliStatusChangeNotify_TypeCode_CliStatusChangeNotify_TypeCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CliStatusChangeNotify_TypeCode_CliStatusChangeNotify_TypeCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CliStatusChangeNotify_TypeCode_IsValid(int value);
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify_TypeCode_TypeCode_MIN = CliStatusChangeNotify_TypeCode_PLAYER_JOIN;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify_TypeCode_TypeCode_MAX = CliStatusChangeNotify_TypeCode_PLAYER_RECONNECT;
constexpr int CliStatusChangeNotify_TypeCode_TypeCode_ARRAYSIZE = CliStatusChangeNotify_TypeCode_TypeCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CliStatusChangeNotify_TypeCode_descriptor();
template<typename T>
inline const std::string& CliStatusChangeNotify_TypeCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CliStatusChangeNotify_TypeCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CliStatusChangeNotify_TypeCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CliStatusChangeNotify_TypeCode_descriptor(), enum_t_value);
}
inline bool CliStatusChangeNotify_TypeCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CliStatusChangeNotify_TypeCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CliStatusChangeNotify_TypeCode>(
    CliStatusChangeNotify_TypeCode_descriptor(), name, value);
}
enum CSCliBattleCMD : int {
  CSC2BDefault = 0,
  CMDCliLinkBattleCsReq = 20001,
  CMDCliLinkBattleScRsp = 20002,
  CMDCliUnLinkBattleCsReq = 20003,
  CMDCliUnLinkBattleScRsp = 20004,
  CMDCliInstruSync = 20005,
  CMDCliStatusSyncNotify = 20006,
  CMDBattleStatusSyncNotify = 20007,
  CMDEntityStatusNotify = 20008,
  CMDTryLinkBattleCsReq = 20009,
  CMDTryLinkBattleScRsp = 20010,
  CSCliBattleCMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CSCliBattleCMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CSCliBattleCMD_IsValid(int value);
constexpr CSCliBattleCMD CSCliBattleCMD_MIN = CSC2BDefault;
constexpr CSCliBattleCMD CSCliBattleCMD_MAX = CMDTryLinkBattleScRsp;
constexpr int CSCliBattleCMD_ARRAYSIZE = CSCliBattleCMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSCliBattleCMD_descriptor();
template<typename T>
inline const std::string& CSCliBattleCMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSCliBattleCMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSCliBattleCMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSCliBattleCMD_descriptor(), enum_t_value);
}
inline bool CSCliBattleCMD_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSCliBattleCMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSCliBattleCMD>(
    CSCliBattleCMD_descriptor(), name, value);
}
// ===================================================================

class CliTryLinkBattleCsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CliTryLinkBattleCsReq) */ {
 public:
  inline CliTryLinkBattleCsReq() : CliTryLinkBattleCsReq(nullptr) {}
  virtual ~CliTryLinkBattleCsReq();

  CliTryLinkBattleCsReq(const CliTryLinkBattleCsReq& from);
  CliTryLinkBattleCsReq(CliTryLinkBattleCsReq&& from) noexcept
    : CliTryLinkBattleCsReq() {
    *this = ::std::move(from);
  }

  inline CliTryLinkBattleCsReq& operator=(const CliTryLinkBattleCsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CliTryLinkBattleCsReq& operator=(CliTryLinkBattleCsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CliTryLinkBattleCsReq& default_instance();

  static inline const CliTryLinkBattleCsReq* internal_default_instance() {
    return reinterpret_cast<const CliTryLinkBattleCsReq*>(
               &_CliTryLinkBattleCsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CliTryLinkBattleCsReq& a, CliTryLinkBattleCsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CliTryLinkBattleCsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CliTryLinkBattleCsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CliTryLinkBattleCsReq* New() const final {
    return CreateMaybeMessage<CliTryLinkBattleCsReq>(nullptr);
  }

  CliTryLinkBattleCsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CliTryLinkBattleCsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CliTryLinkBattleCsReq& from);
  void MergeFrom(const CliTryLinkBattleCsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CliTryLinkBattleCsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CliTryLinkBattleCsReq";
  }
  protected:
  explicit CliTryLinkBattleCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kGameidFieldNumber = 1,
    kAccountFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 gameid = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 account = 2;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint32 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CliTryLinkBattleCsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class CliTryLinkBattleScRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CliTryLinkBattleScRsp) */ {
 public:
  inline CliTryLinkBattleScRsp() : CliTryLinkBattleScRsp(nullptr) {}
  virtual ~CliTryLinkBattleScRsp();

  CliTryLinkBattleScRsp(const CliTryLinkBattleScRsp& from);
  CliTryLinkBattleScRsp(CliTryLinkBattleScRsp&& from) noexcept
    : CliTryLinkBattleScRsp() {
    *this = ::std::move(from);
  }

  inline CliTryLinkBattleScRsp& operator=(const CliTryLinkBattleScRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CliTryLinkBattleScRsp& operator=(CliTryLinkBattleScRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CliTryLinkBattleScRsp& default_instance();

  static inline const CliTryLinkBattleScRsp* internal_default_instance() {
    return reinterpret_cast<const CliTryLinkBattleScRsp*>(
               &_CliTryLinkBattleScRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CliTryLinkBattleScRsp& a, CliTryLinkBattleScRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CliTryLinkBattleScRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CliTryLinkBattleScRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CliTryLinkBattleScRsp* New() const final {
    return CreateMaybeMessage<CliTryLinkBattleScRsp>(nullptr);
  }

  CliTryLinkBattleScRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CliTryLinkBattleScRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CliTryLinkBattleScRsp& from);
  void MergeFrom(const CliTryLinkBattleScRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CliTryLinkBattleScRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CliTryLinkBattleScRsp";
  }
  protected:
  explicit CliTryLinkBattleScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CliTryLinkBattleScRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    CliTryLinkBattleScRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    CliTryLinkBattleScRsp_RetCode_RET_FAILED;
  static inline bool RetCode_IsValid(int value) {
    return CliTryLinkBattleScRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    CliTryLinkBattleScRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    CliTryLinkBattleScRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    CliTryLinkBattleScRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return CliTryLinkBattleScRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return CliTryLinkBattleScRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return CliTryLinkBattleScRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kGameidFieldNumber = 2,
  };
  // .pb.CliTryLinkBattleScRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::CliTryLinkBattleScRsp_RetCode retcode() const;
  void set_retcode(::pb::CliTryLinkBattleScRsp_RetCode value);
  private:
  ::pb::CliTryLinkBattleScRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::CliTryLinkBattleScRsp_RetCode value);
  public:

  // uint32 gameid = 2;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CliTryLinkBattleScRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class CliStatusChangeNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CliStatusChangeNotify) */ {
 public:
  inline CliStatusChangeNotify() : CliStatusChangeNotify(nullptr) {}
  virtual ~CliStatusChangeNotify();

  CliStatusChangeNotify(const CliStatusChangeNotify& from);
  CliStatusChangeNotify(CliStatusChangeNotify&& from) noexcept
    : CliStatusChangeNotify() {
    *this = ::std::move(from);
  }

  inline CliStatusChangeNotify& operator=(const CliStatusChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CliStatusChangeNotify& operator=(CliStatusChangeNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CliStatusChangeNotify& default_instance();

  static inline const CliStatusChangeNotify* internal_default_instance() {
    return reinterpret_cast<const CliStatusChangeNotify*>(
               &_CliStatusChangeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CliStatusChangeNotify& a, CliStatusChangeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CliStatusChangeNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CliStatusChangeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CliStatusChangeNotify* New() const final {
    return CreateMaybeMessage<CliStatusChangeNotify>(nullptr);
  }

  CliStatusChangeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CliStatusChangeNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CliStatusChangeNotify& from);
  void MergeFrom(const CliStatusChangeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CliStatusChangeNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CliStatusChangeNotify";
  }
  protected:
  explicit CliStatusChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CliStatusChangeNotify_TypeCode TypeCode;
  static constexpr TypeCode PLAYER_JOIN =
    CliStatusChangeNotify_TypeCode_PLAYER_JOIN;
  static constexpr TypeCode PLAYER_LEAVE =
    CliStatusChangeNotify_TypeCode_PLAYER_LEAVE;
  static constexpr TypeCode PLAYER_DISCONNECT =
    CliStatusChangeNotify_TypeCode_PLAYER_DISCONNECT;
  static constexpr TypeCode PLAYER_RECONNECT =
    CliStatusChangeNotify_TypeCode_PLAYER_RECONNECT;
  static inline bool TypeCode_IsValid(int value) {
    return CliStatusChangeNotify_TypeCode_IsValid(value);
  }
  static constexpr TypeCode TypeCode_MIN =
    CliStatusChangeNotify_TypeCode_TypeCode_MIN;
  static constexpr TypeCode TypeCode_MAX =
    CliStatusChangeNotify_TypeCode_TypeCode_MAX;
  static constexpr int TypeCode_ARRAYSIZE =
    CliStatusChangeNotify_TypeCode_TypeCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeCode_descriptor() {
    return CliStatusChangeNotify_TypeCode_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeCode_Name.");
    return CliStatusChangeNotify_TypeCode_Name(enum_t_value);
  }
  static inline bool TypeCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeCode* value) {
    return CliStatusChangeNotify_TypeCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
  };
  // .pb.CliStatusChangeNotify.TypeCode code = 1;
  void clear_code();
  ::pb::CliStatusChangeNotify_TypeCode code() const;
  void set_code(::pb::CliStatusChangeNotify_TypeCode value);
  private:
  ::pb::CliStatusChangeNotify_TypeCode _internal_code() const;
  void _internal_set_code(::pb::CliStatusChangeNotify_TypeCode value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CliStatusChangeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class ClientInputPush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ClientInputPush) */ {
 public:
  inline ClientInputPush() : ClientInputPush(nullptr) {}
  virtual ~ClientInputPush();

  ClientInputPush(const ClientInputPush& from);
  ClientInputPush(ClientInputPush&& from) noexcept
    : ClientInputPush() {
    *this = ::std::move(from);
  }

  inline ClientInputPush& operator=(const ClientInputPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInputPush& operator=(ClientInputPush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientInputPush& default_instance();

  static inline const ClientInputPush* internal_default_instance() {
    return reinterpret_cast<const ClientInputPush*>(
               &_ClientInputPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientInputPush& a, ClientInputPush& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInputPush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInputPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientInputPush* New() const final {
    return CreateMaybeMessage<ClientInputPush>(nullptr);
  }

  ClientInputPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientInputPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientInputPush& from);
  void MergeFrom(const ClientInputPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInputPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ClientInputPush";
  }
  protected:
  explicit ClientInputPush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpFieldNumber = 2,
    kDirFieldNumber = 1,
    kRealTimeFieldNumber = 3,
    kPlayerIDFieldNumber = 4,
    kSlaveStepFieldNumber = 5,
  };
  // repeated uint32 bp = 2;
  int bp_size() const;
  private:
  int _internal_bp_size() const;
  public:
  void clear_bp();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bp() const;
  void _internal_add_bp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bp();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bp(int index) const;
  void set_bp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bp();

  // .pb.Vector3Struct dir = 1;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  const ::pb::Vector3Struct& dir() const;
  ::pb::Vector3Struct* release_dir();
  ::pb::Vector3Struct* mutable_dir();
  void set_allocated_dir(::pb::Vector3Struct* dir);
  private:
  const ::pb::Vector3Struct& _internal_dir() const;
  ::pb::Vector3Struct* _internal_mutable_dir();
  public:
  void unsafe_arena_set_allocated_dir(
      ::pb::Vector3Struct* dir);
  ::pb::Vector3Struct* unsafe_arena_release_dir();

  // float realTime = 3;
  void clear_realtime();
  float realtime() const;
  void set_realtime(float value);
  private:
  float _internal_realtime() const;
  void _internal_set_realtime(float value);
  public:

  // uint32 playerID = 4;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SlaveStep = 5;
  void clear_slavestep();
  ::PROTOBUF_NAMESPACE_ID::uint32 slavestep() const;
  void set_slavestep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slavestep() const;
  void _internal_set_slavestep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ClientInputPush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bp_;
  mutable std::atomic<int> _bp_cached_byte_size_;
  ::pb::Vector3Struct* dir_;
  float realtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slavestep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class PlayerStatusStruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PlayerStatusStruct) */ {
 public:
  inline PlayerStatusStruct() : PlayerStatusStruct(nullptr) {}
  virtual ~PlayerStatusStruct();

  PlayerStatusStruct(const PlayerStatusStruct& from);
  PlayerStatusStruct(PlayerStatusStruct&& from) noexcept
    : PlayerStatusStruct() {
    *this = ::std::move(from);
  }

  inline PlayerStatusStruct& operator=(const PlayerStatusStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStatusStruct& operator=(PlayerStatusStruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerStatusStruct& default_instance();

  static inline const PlayerStatusStruct* internal_default_instance() {
    return reinterpret_cast<const PlayerStatusStruct*>(
               &_PlayerStatusStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerStatusStruct& a, PlayerStatusStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStatusStruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStatusStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerStatusStruct* New() const final {
    return CreateMaybeMessage<PlayerStatusStruct>(nullptr);
  }

  PlayerStatusStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerStatusStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerStatusStruct& from);
  void MergeFrom(const PlayerStatusStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStatusStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PlayerStatusStruct";
  }
  protected:
  explicit PlayerStatusStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kEntityIDFieldNumber = 1,
    kHealthFieldNumber = 5,
    kSkillEffectFieldNumber = 6,
  };
  // .pb.Vector3Struct _position = 2;
  bool has__position() const;
  private:
  bool _internal_has__position() const;
  public:
  void clear__position();
  const ::pb::Vector3Struct& _position() const;
  ::pb::Vector3Struct* release__position();
  ::pb::Vector3Struct* mutable__position();
  void set_allocated__position(::pb::Vector3Struct* _position);
  private:
  const ::pb::Vector3Struct& _internal__position() const;
  ::pb::Vector3Struct* _internal_mutable__position();
  public:
  void unsafe_arena_set_allocated__position(
      ::pb::Vector3Struct* _position);
  ::pb::Vector3Struct* unsafe_arena_release__position();

  // .pb.QuaternionStruct _rotation = 3;
  bool has__rotation() const;
  private:
  bool _internal_has__rotation() const;
  public:
  void clear__rotation();
  const ::pb::QuaternionStruct& _rotation() const;
  ::pb::QuaternionStruct* release__rotation();
  ::pb::QuaternionStruct* mutable__rotation();
  void set_allocated__rotation(::pb::QuaternionStruct* _rotation);
  private:
  const ::pb::QuaternionStruct& _internal__rotation() const;
  ::pb::QuaternionStruct* _internal_mutable__rotation();
  public:
  void unsafe_arena_set_allocated__rotation(
      ::pb::QuaternionStruct* _rotation);
  ::pb::QuaternionStruct* unsafe_arena_release__rotation();

  // .pb.Vector3Struct _velocity = 4;
  bool has__velocity() const;
  private:
  bool _internal_has__velocity() const;
  public:
  void clear__velocity();
  const ::pb::Vector3Struct& _velocity() const;
  ::pb::Vector3Struct* release__velocity();
  ::pb::Vector3Struct* mutable__velocity();
  void set_allocated__velocity(::pb::Vector3Struct* _velocity);
  private:
  const ::pb::Vector3Struct& _internal__velocity() const;
  ::pb::Vector3Struct* _internal_mutable__velocity();
  public:
  void unsafe_arena_set_allocated__velocity(
      ::pb::Vector3Struct* _velocity);
  ::pb::Vector3Struct* unsafe_arena_release__velocity();

  // uint32 entityID = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float health = 5;
  void clear_health();
  float health() const;
  void set_health(float value);
  private:
  float _internal_health() const;
  void _internal_set_health(float value);
  public:

  // int32 skillEffect = 6;
  void clear_skilleffect();
  ::PROTOBUF_NAMESPACE_ID::int32 skilleffect() const;
  void set_skilleffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skilleffect() const;
  void _internal_set_skilleffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PlayerStatusStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Vector3Struct* _position_;
  ::pb::QuaternionStruct* _rotation_;
  ::pb::Vector3Struct* _velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entityid_;
  float health_;
  ::PROTOBUF_NAMESPACE_ID::int32 skilleffect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SkillStatusStruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SkillStatusStruct) */ {
 public:
  inline SkillStatusStruct() : SkillStatusStruct(nullptr) {}
  virtual ~SkillStatusStruct();

  SkillStatusStruct(const SkillStatusStruct& from);
  SkillStatusStruct(SkillStatusStruct&& from) noexcept
    : SkillStatusStruct() {
    *this = ::std::move(from);
  }

  inline SkillStatusStruct& operator=(const SkillStatusStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillStatusStruct& operator=(SkillStatusStruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillStatusStruct& default_instance();

  static inline const SkillStatusStruct* internal_default_instance() {
    return reinterpret_cast<const SkillStatusStruct*>(
               &_SkillStatusStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SkillStatusStruct& a, SkillStatusStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillStatusStruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillStatusStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillStatusStruct* New() const final {
    return CreateMaybeMessage<SkillStatusStruct>(nullptr);
  }

  SkillStatusStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillStatusStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillStatusStruct& from);
  void MergeFrom(const SkillStatusStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillStatusStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SkillStatusStruct";
  }
  protected:
  explicit SkillStatusStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScaleFieldNumber = 4,
    kEntityIDFieldNumber = 1,
    kOwnerIDFieldNumber = 5,
  };
  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.Vector3Struct _position = 2;
  bool has__position() const;
  private:
  bool _internal_has__position() const;
  public:
  void clear__position();
  const ::pb::Vector3Struct& _position() const;
  ::pb::Vector3Struct* release__position();
  ::pb::Vector3Struct* mutable__position();
  void set_allocated__position(::pb::Vector3Struct* _position);
  private:
  const ::pb::Vector3Struct& _internal__position() const;
  ::pb::Vector3Struct* _internal_mutable__position();
  public:
  void unsafe_arena_set_allocated__position(
      ::pb::Vector3Struct* _position);
  ::pb::Vector3Struct* unsafe_arena_release__position();

  // .pb.QuaternionStruct _rotation = 3;
  bool has__rotation() const;
  private:
  bool _internal_has__rotation() const;
  public:
  void clear__rotation();
  const ::pb::QuaternionStruct& _rotation() const;
  ::pb::QuaternionStruct* release__rotation();
  ::pb::QuaternionStruct* mutable__rotation();
  void set_allocated__rotation(::pb::QuaternionStruct* _rotation);
  private:
  const ::pb::QuaternionStruct& _internal__rotation() const;
  ::pb::QuaternionStruct* _internal_mutable__rotation();
  public:
  void unsafe_arena_set_allocated__rotation(
      ::pb::QuaternionStruct* _rotation);
  ::pb::QuaternionStruct* unsafe_arena_release__rotation();

  // .pb.Vector3Struct _scale = 4;
  bool has__scale() const;
  private:
  bool _internal_has__scale() const;
  public:
  void clear__scale();
  const ::pb::Vector3Struct& _scale() const;
  ::pb::Vector3Struct* release__scale();
  ::pb::Vector3Struct* mutable__scale();
  void set_allocated__scale(::pb::Vector3Struct* _scale);
  private:
  const ::pb::Vector3Struct& _internal__scale() const;
  ::pb::Vector3Struct* _internal_mutable__scale();
  public:
  void unsafe_arena_set_allocated__scale(
      ::pb::Vector3Struct* _scale);
  ::pb::Vector3Struct* unsafe_arena_release__scale();

  // uint32 entityID = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ownerID = 5;
  void clear_ownerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownerid() const;
  void set_ownerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownerid() const;
  void _internal_set_ownerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SkillStatusStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pb::Vector3Struct* _position_;
  ::pb::QuaternionStruct* _rotation_;
  ::pb::Vector3Struct* _scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entityid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class WorldSnapshotPush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.WorldSnapshotPush) */ {
 public:
  inline WorldSnapshotPush() : WorldSnapshotPush(nullptr) {}
  virtual ~WorldSnapshotPush();

  WorldSnapshotPush(const WorldSnapshotPush& from);
  WorldSnapshotPush(WorldSnapshotPush&& from) noexcept
    : WorldSnapshotPush() {
    *this = ::std::move(from);
  }

  inline WorldSnapshotPush& operator=(const WorldSnapshotPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldSnapshotPush& operator=(WorldSnapshotPush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldSnapshotPush& default_instance();

  static inline const WorldSnapshotPush* internal_default_instance() {
    return reinterpret_cast<const WorldSnapshotPush*>(
               &_WorldSnapshotPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorldSnapshotPush& a, WorldSnapshotPush& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldSnapshotPush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldSnapshotPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldSnapshotPush* New() const final {
    return CreateMaybeMessage<WorldSnapshotPush>(nullptr);
  }

  WorldSnapshotPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldSnapshotPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldSnapshotPush& from);
  void MergeFrom(const WorldSnapshotPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldSnapshotPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.WorldSnapshotPush";
  }
  protected:
  explicit WorldSnapshotPush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbattle_2eproto);
    return ::descriptor_table_client_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedSlaveStepFieldNumber = 2,
    kPlayerStatusListFieldNumber = 3,
    kSkillStatusListFieldNumber = 4,
    kServerStepFieldNumber = 1,
  };
  // repeated uint32 ProcessedSlaveStep = 2;
  int processedslavestep_size() const;
  private:
  int _internal_processedslavestep_size() const;
  public:
  void clear_processedslavestep();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processedslavestep(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_processedslavestep() const;
  void _internal_add_processedslavestep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_processedslavestep();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 processedslavestep(int index) const;
  void set_processedslavestep(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_processedslavestep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      processedslavestep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_processedslavestep();

  // repeated .pb.PlayerStatusStruct PlayerStatusList = 3;
  int playerstatuslist_size() const;
  private:
  int _internal_playerstatuslist_size() const;
  public:
  void clear_playerstatuslist();
  ::pb::PlayerStatusStruct* mutable_playerstatuslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerStatusStruct >*
      mutable_playerstatuslist();
  private:
  const ::pb::PlayerStatusStruct& _internal_playerstatuslist(int index) const;
  ::pb::PlayerStatusStruct* _internal_add_playerstatuslist();
  public:
  const ::pb::PlayerStatusStruct& playerstatuslist(int index) const;
  ::pb::PlayerStatusStruct* add_playerstatuslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerStatusStruct >&
      playerstatuslist() const;

  // repeated .pb.SkillStatusStruct SkillStatusList = 4;
  int skillstatuslist_size() const;
  private:
  int _internal_skillstatuslist_size() const;
  public:
  void clear_skillstatuslist();
  ::pb::SkillStatusStruct* mutable_skillstatuslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SkillStatusStruct >*
      mutable_skillstatuslist();
  private:
  const ::pb::SkillStatusStruct& _internal_skillstatuslist(int index) const;
  ::pb::SkillStatusStruct* _internal_add_skillstatuslist();
  public:
  const ::pb::SkillStatusStruct& skillstatuslist(int index) const;
  ::pb::SkillStatusStruct* add_skillstatuslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SkillStatusStruct >&
      skillstatuslist() const;

  // uint32 ServerStep = 1;
  void clear_serverstep();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverstep() const;
  void set_serverstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverstep() const;
  void _internal_set_serverstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.WorldSnapshotPush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > processedslavestep_;
  mutable std::atomic<int> _processedslavestep_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerStatusStruct > playerstatuslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SkillStatusStruct > skillstatuslist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbattle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CliTryLinkBattleCsReq

// uint32 gameid = 1;
inline void CliTryLinkBattleCsReq::clear_gameid() {
  gameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleCsReq::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleCsReq::gameid() const {
  // @@protoc_insertion_point(field_get:pb.CliTryLinkBattleCsReq.gameid)
  return _internal_gameid();
}
inline void CliTryLinkBattleCsReq::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gameid_ = value;
}
inline void CliTryLinkBattleCsReq::set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:pb.CliTryLinkBattleCsReq.gameid)
}

// uint32 account = 2;
inline void CliTryLinkBattleCsReq::clear_account() {
  account_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleCsReq::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleCsReq::account() const {
  // @@protoc_insertion_point(field_get:pb.CliTryLinkBattleCsReq.account)
  return _internal_account();
}
inline void CliTryLinkBattleCsReq::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_ = value;
}
inline void CliTryLinkBattleCsReq::set_account(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:pb.CliTryLinkBattleCsReq.account)
}

// string token = 3;
inline void CliTryLinkBattleCsReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CliTryLinkBattleCsReq::token() const {
  // @@protoc_insertion_point(field_get:pb.CliTryLinkBattleCsReq.token)
  return _internal_token();
}
inline void CliTryLinkBattleCsReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.CliTryLinkBattleCsReq.token)
}
inline std::string* CliTryLinkBattleCsReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.CliTryLinkBattleCsReq.token)
  return _internal_mutable_token();
}
inline const std::string& CliTryLinkBattleCsReq::_internal_token() const {
  return token_.Get();
}
inline void CliTryLinkBattleCsReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CliTryLinkBattleCsReq::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.CliTryLinkBattleCsReq.token)
}
inline void CliTryLinkBattleCsReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.CliTryLinkBattleCsReq.token)
}
inline void CliTryLinkBattleCsReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.CliTryLinkBattleCsReq.token)
}
inline std::string* CliTryLinkBattleCsReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CliTryLinkBattleCsReq::release_token() {
  // @@protoc_insertion_point(field_release:pb.CliTryLinkBattleCsReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CliTryLinkBattleCsReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.CliTryLinkBattleCsReq.token)
}

// -------------------------------------------------------------------

// CliTryLinkBattleScRsp

// .pb.CliTryLinkBattleScRsp.RetCode retcode = 1;
inline void CliTryLinkBattleScRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::_internal_retcode() const {
  return static_cast< ::pb::CliTryLinkBattleScRsp_RetCode >(retcode_);
}
inline ::pb::CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.CliTryLinkBattleScRsp.retcode)
  return _internal_retcode();
}
inline void CliTryLinkBattleScRsp::_internal_set_retcode(::pb::CliTryLinkBattleScRsp_RetCode value) {
  
  retcode_ = value;
}
inline void CliTryLinkBattleScRsp::set_retcode(::pb::CliTryLinkBattleScRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.CliTryLinkBattleScRsp.retcode)
}

// uint32 gameid = 2;
inline void CliTryLinkBattleScRsp::clear_gameid() {
  gameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleScRsp::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliTryLinkBattleScRsp::gameid() const {
  // @@protoc_insertion_point(field_get:pb.CliTryLinkBattleScRsp.gameid)
  return _internal_gameid();
}
inline void CliTryLinkBattleScRsp::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gameid_ = value;
}
inline void CliTryLinkBattleScRsp::set_gameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:pb.CliTryLinkBattleScRsp.gameid)
}

// -------------------------------------------------------------------

// CliStatusChangeNotify

// .pb.CliStatusChangeNotify.TypeCode code = 1;
inline void CliStatusChangeNotify::clear_code() {
  code_ = 0;
}
inline ::pb::CliStatusChangeNotify_TypeCode CliStatusChangeNotify::_internal_code() const {
  return static_cast< ::pb::CliStatusChangeNotify_TypeCode >(code_);
}
inline ::pb::CliStatusChangeNotify_TypeCode CliStatusChangeNotify::code() const {
  // @@protoc_insertion_point(field_get:pb.CliStatusChangeNotify.code)
  return _internal_code();
}
inline void CliStatusChangeNotify::_internal_set_code(::pb::CliStatusChangeNotify_TypeCode value) {
  
  code_ = value;
}
inline void CliStatusChangeNotify::set_code(::pb::CliStatusChangeNotify_TypeCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.CliStatusChangeNotify.code)
}

// uint32 playerid = 2;
inline void CliStatusChangeNotify::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliStatusChangeNotify::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CliStatusChangeNotify::playerid() const {
  // @@protoc_insertion_point(field_get:pb.CliStatusChangeNotify.playerid)
  return _internal_playerid();
}
inline void CliStatusChangeNotify::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void CliStatusChangeNotify::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.CliStatusChangeNotify.playerid)
}

// -------------------------------------------------------------------

// ClientInputPush

// .pb.Vector3Struct dir = 1;
inline bool ClientInputPush::_internal_has_dir() const {
  return this != internal_default_instance() && dir_ != nullptr;
}
inline bool ClientInputPush::has_dir() const {
  return _internal_has_dir();
}
inline const ::pb::Vector3Struct& ClientInputPush::_internal_dir() const {
  const ::pb::Vector3Struct* p = dir_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vector3Struct&>(
      ::pb::_Vector3Struct_default_instance_);
}
inline const ::pb::Vector3Struct& ClientInputPush::dir() const {
  // @@protoc_insertion_point(field_get:pb.ClientInputPush.dir)
  return _internal_dir();
}
inline void ClientInputPush::unsafe_arena_set_allocated_dir(
    ::pb::Vector3Struct* dir) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dir_);
  }
  dir_ = dir;
  if (dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.ClientInputPush.dir)
}
inline ::pb::Vector3Struct* ClientInputPush::release_dir() {
  
  ::pb::Vector3Struct* temp = dir_;
  dir_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Vector3Struct* ClientInputPush::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_release:pb.ClientInputPush.dir)
  
  ::pb::Vector3Struct* temp = dir_;
  dir_ = nullptr;
  return temp;
}
inline ::pb::Vector3Struct* ClientInputPush::_internal_mutable_dir() {
  
  if (dir_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vector3Struct>(GetArena());
    dir_ = p;
  }
  return dir_;
}
inline ::pb::Vector3Struct* ClientInputPush::mutable_dir() {
  // @@protoc_insertion_point(field_mutable:pb.ClientInputPush.dir)
  return _internal_mutable_dir();
}
inline void ClientInputPush::set_allocated_dir(::pb::Vector3Struct* dir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dir_);
  }
  if (dir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dir)->GetArena();
    if (message_arena != submessage_arena) {
      dir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    
  } else {
    
  }
  dir_ = dir;
  // @@protoc_insertion_point(field_set_allocated:pb.ClientInputPush.dir)
}

// repeated uint32 bp = 2;
inline int ClientInputPush::_internal_bp_size() const {
  return bp_.size();
}
inline int ClientInputPush::bp_size() const {
  return _internal_bp_size();
}
inline void ClientInputPush::clear_bp() {
  bp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::_internal_bp(int index) const {
  return bp_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::bp(int index) const {
  // @@protoc_insertion_point(field_get:pb.ClientInputPush.bp)
  return _internal_bp(index);
}
inline void ClientInputPush::set_bp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ClientInputPush.bp)
}
inline void ClientInputPush::_internal_add_bp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bp_.Add(value);
}
inline void ClientInputPush::add_bp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bp(value);
  // @@protoc_insertion_point(field_add:pb.ClientInputPush.bp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ClientInputPush::_internal_bp() const {
  return bp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ClientInputPush::bp() const {
  // @@protoc_insertion_point(field_list:pb.ClientInputPush.bp)
  return _internal_bp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ClientInputPush::_internal_mutable_bp() {
  return &bp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ClientInputPush::mutable_bp() {
  // @@protoc_insertion_point(field_mutable_list:pb.ClientInputPush.bp)
  return _internal_mutable_bp();
}

// float realTime = 3;
inline void ClientInputPush::clear_realtime() {
  realtime_ = 0;
}
inline float ClientInputPush::_internal_realtime() const {
  return realtime_;
}
inline float ClientInputPush::realtime() const {
  // @@protoc_insertion_point(field_get:pb.ClientInputPush.realTime)
  return _internal_realtime();
}
inline void ClientInputPush::_internal_set_realtime(float value) {
  
  realtime_ = value;
}
inline void ClientInputPush::set_realtime(float value) {
  _internal_set_realtime(value);
  // @@protoc_insertion_point(field_set:pb.ClientInputPush.realTime)
}

// uint32 playerID = 4;
inline void ClientInputPush::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::playerid() const {
  // @@protoc_insertion_point(field_get:pb.ClientInputPush.playerID)
  return _internal_playerid();
}
inline void ClientInputPush::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void ClientInputPush::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.ClientInputPush.playerID)
}

// uint32 SlaveStep = 5;
inline void ClientInputPush::clear_slavestep() {
  slavestep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::_internal_slavestep() const {
  return slavestep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInputPush::slavestep() const {
  // @@protoc_insertion_point(field_get:pb.ClientInputPush.SlaveStep)
  return _internal_slavestep();
}
inline void ClientInputPush::_internal_set_slavestep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slavestep_ = value;
}
inline void ClientInputPush::set_slavestep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slavestep(value);
  // @@protoc_insertion_point(field_set:pb.ClientInputPush.SlaveStep)
}

// -------------------------------------------------------------------

// PlayerStatusStruct

// uint32 entityID = 1;
inline void PlayerStatusStruct::clear_entityid() {
  entityid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerStatusStruct::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerStatusStruct::entityid() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct.entityID)
  return _internal_entityid();
}
inline void PlayerStatusStruct::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entityid_ = value;
}
inline void PlayerStatusStruct::set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:pb.PlayerStatusStruct.entityID)
}

// .pb.Vector3Struct _position = 2;
inline bool PlayerStatusStruct::_internal_has__position() const {
  return this != internal_default_instance() && _position_ != nullptr;
}
inline bool PlayerStatusStruct::has__position() const {
  return _internal_has__position();
}
inline const ::pb::Vector3Struct& PlayerStatusStruct::_internal__position() const {
  const ::pb::Vector3Struct* p = _position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vector3Struct&>(
      ::pb::_Vector3Struct_default_instance_);
}
inline const ::pb::Vector3Struct& PlayerStatusStruct::_position() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct._position)
  return _internal__position();
}
inline void PlayerStatusStruct::unsafe_arena_set_allocated__position(
    ::pb::Vector3Struct* _position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position_);
  }
  _position_ = _position;
  if (_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PlayerStatusStruct._position)
}
inline ::pb::Vector3Struct* PlayerStatusStruct::release__position() {
  
  ::pb::Vector3Struct* temp = _position_;
  _position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::unsafe_arena_release__position() {
  // @@protoc_insertion_point(field_release:pb.PlayerStatusStruct._position)
  
  ::pb::Vector3Struct* temp = _position_;
  _position_ = nullptr;
  return temp;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::_internal_mutable__position() {
  
  if (_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vector3Struct>(GetArena());
    _position_ = p;
  }
  return _position_;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::mutable__position() {
  // @@protoc_insertion_point(field_mutable:pb.PlayerStatusStruct._position)
  return _internal_mutable__position();
}
inline void PlayerStatusStruct::set_allocated__position(::pb::Vector3Struct* _position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position_);
  }
  if (_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position)->GetArena();
    if (message_arena != submessage_arena) {
      _position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _position, submessage_arena);
    }
    
  } else {
    
  }
  _position_ = _position;
  // @@protoc_insertion_point(field_set_allocated:pb.PlayerStatusStruct._position)
}

// .pb.QuaternionStruct _rotation = 3;
inline bool PlayerStatusStruct::_internal_has__rotation() const {
  return this != internal_default_instance() && _rotation_ != nullptr;
}
inline bool PlayerStatusStruct::has__rotation() const {
  return _internal_has__rotation();
}
inline const ::pb::QuaternionStruct& PlayerStatusStruct::_internal__rotation() const {
  const ::pb::QuaternionStruct* p = _rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::QuaternionStruct&>(
      ::pb::_QuaternionStruct_default_instance_);
}
inline const ::pb::QuaternionStruct& PlayerStatusStruct::_rotation() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct._rotation)
  return _internal__rotation();
}
inline void PlayerStatusStruct::unsafe_arena_set_allocated__rotation(
    ::pb::QuaternionStruct* _rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation_);
  }
  _rotation_ = _rotation;
  if (_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PlayerStatusStruct._rotation)
}
inline ::pb::QuaternionStruct* PlayerStatusStruct::release__rotation() {
  
  ::pb::QuaternionStruct* temp = _rotation_;
  _rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::QuaternionStruct* PlayerStatusStruct::unsafe_arena_release__rotation() {
  // @@protoc_insertion_point(field_release:pb.PlayerStatusStruct._rotation)
  
  ::pb::QuaternionStruct* temp = _rotation_;
  _rotation_ = nullptr;
  return temp;
}
inline ::pb::QuaternionStruct* PlayerStatusStruct::_internal_mutable__rotation() {
  
  if (_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::QuaternionStruct>(GetArena());
    _rotation_ = p;
  }
  return _rotation_;
}
inline ::pb::QuaternionStruct* PlayerStatusStruct::mutable__rotation() {
  // @@protoc_insertion_point(field_mutable:pb.PlayerStatusStruct._rotation)
  return _internal_mutable__rotation();
}
inline void PlayerStatusStruct::set_allocated__rotation(::pb::QuaternionStruct* _rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation_);
  }
  if (_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation)->GetArena();
    if (message_arena != submessage_arena) {
      _rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _rotation, submessage_arena);
    }
    
  } else {
    
  }
  _rotation_ = _rotation;
  // @@protoc_insertion_point(field_set_allocated:pb.PlayerStatusStruct._rotation)
}

// .pb.Vector3Struct _velocity = 4;
inline bool PlayerStatusStruct::_internal_has__velocity() const {
  return this != internal_default_instance() && _velocity_ != nullptr;
}
inline bool PlayerStatusStruct::has__velocity() const {
  return _internal_has__velocity();
}
inline const ::pb::Vector3Struct& PlayerStatusStruct::_internal__velocity() const {
  const ::pb::Vector3Struct* p = _velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vector3Struct&>(
      ::pb::_Vector3Struct_default_instance_);
}
inline const ::pb::Vector3Struct& PlayerStatusStruct::_velocity() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct._velocity)
  return _internal__velocity();
}
inline void PlayerStatusStruct::unsafe_arena_set_allocated__velocity(
    ::pb::Vector3Struct* _velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_velocity_);
  }
  _velocity_ = _velocity;
  if (_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PlayerStatusStruct._velocity)
}
inline ::pb::Vector3Struct* PlayerStatusStruct::release__velocity() {
  
  ::pb::Vector3Struct* temp = _velocity_;
  _velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::unsafe_arena_release__velocity() {
  // @@protoc_insertion_point(field_release:pb.PlayerStatusStruct._velocity)
  
  ::pb::Vector3Struct* temp = _velocity_;
  _velocity_ = nullptr;
  return temp;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::_internal_mutable__velocity() {
  
  if (_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vector3Struct>(GetArena());
    _velocity_ = p;
  }
  return _velocity_;
}
inline ::pb::Vector3Struct* PlayerStatusStruct::mutable__velocity() {
  // @@protoc_insertion_point(field_mutable:pb.PlayerStatusStruct._velocity)
  return _internal_mutable__velocity();
}
inline void PlayerStatusStruct::set_allocated__velocity(::pb::Vector3Struct* _velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_velocity_);
  }
  if (_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      _velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _velocity, submessage_arena);
    }
    
  } else {
    
  }
  _velocity_ = _velocity;
  // @@protoc_insertion_point(field_set_allocated:pb.PlayerStatusStruct._velocity)
}

// float health = 5;
inline void PlayerStatusStruct::clear_health() {
  health_ = 0;
}
inline float PlayerStatusStruct::_internal_health() const {
  return health_;
}
inline float PlayerStatusStruct::health() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct.health)
  return _internal_health();
}
inline void PlayerStatusStruct::_internal_set_health(float value) {
  
  health_ = value;
}
inline void PlayerStatusStruct::set_health(float value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:pb.PlayerStatusStruct.health)
}

// int32 skillEffect = 6;
inline void PlayerStatusStruct::clear_skilleffect() {
  skilleffect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerStatusStruct::_internal_skilleffect() const {
  return skilleffect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerStatusStruct::skilleffect() const {
  // @@protoc_insertion_point(field_get:pb.PlayerStatusStruct.skillEffect)
  return _internal_skilleffect();
}
inline void PlayerStatusStruct::_internal_set_skilleffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skilleffect_ = value;
}
inline void PlayerStatusStruct::set_skilleffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skilleffect(value);
  // @@protoc_insertion_point(field_set:pb.PlayerStatusStruct.skillEffect)
}

// -------------------------------------------------------------------

// SkillStatusStruct

// uint32 entityID = 1;
inline void SkillStatusStruct::clear_entityid() {
  entityid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SkillStatusStruct::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SkillStatusStruct::entityid() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct.entityID)
  return _internal_entityid();
}
inline void SkillStatusStruct::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entityid_ = value;
}
inline void SkillStatusStruct::set_entityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:pb.SkillStatusStruct.entityID)
}

// .pb.Vector3Struct _position = 2;
inline bool SkillStatusStruct::_internal_has__position() const {
  return this != internal_default_instance() && _position_ != nullptr;
}
inline bool SkillStatusStruct::has__position() const {
  return _internal_has__position();
}
inline const ::pb::Vector3Struct& SkillStatusStruct::_internal__position() const {
  const ::pb::Vector3Struct* p = _position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vector3Struct&>(
      ::pb::_Vector3Struct_default_instance_);
}
inline const ::pb::Vector3Struct& SkillStatusStruct::_position() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct._position)
  return _internal__position();
}
inline void SkillStatusStruct::unsafe_arena_set_allocated__position(
    ::pb::Vector3Struct* _position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position_);
  }
  _position_ = _position;
  if (_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SkillStatusStruct._position)
}
inline ::pb::Vector3Struct* SkillStatusStruct::release__position() {
  
  ::pb::Vector3Struct* temp = _position_;
  _position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Vector3Struct* SkillStatusStruct::unsafe_arena_release__position() {
  // @@protoc_insertion_point(field_release:pb.SkillStatusStruct._position)
  
  ::pb::Vector3Struct* temp = _position_;
  _position_ = nullptr;
  return temp;
}
inline ::pb::Vector3Struct* SkillStatusStruct::_internal_mutable__position() {
  
  if (_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vector3Struct>(GetArena());
    _position_ = p;
  }
  return _position_;
}
inline ::pb::Vector3Struct* SkillStatusStruct::mutable__position() {
  // @@protoc_insertion_point(field_mutable:pb.SkillStatusStruct._position)
  return _internal_mutable__position();
}
inline void SkillStatusStruct::set_allocated__position(::pb::Vector3Struct* _position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position_);
  }
  if (_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_position)->GetArena();
    if (message_arena != submessage_arena) {
      _position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _position, submessage_arena);
    }
    
  } else {
    
  }
  _position_ = _position;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillStatusStruct._position)
}

// .pb.QuaternionStruct _rotation = 3;
inline bool SkillStatusStruct::_internal_has__rotation() const {
  return this != internal_default_instance() && _rotation_ != nullptr;
}
inline bool SkillStatusStruct::has__rotation() const {
  return _internal_has__rotation();
}
inline const ::pb::QuaternionStruct& SkillStatusStruct::_internal__rotation() const {
  const ::pb::QuaternionStruct* p = _rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::QuaternionStruct&>(
      ::pb::_QuaternionStruct_default_instance_);
}
inline const ::pb::QuaternionStruct& SkillStatusStruct::_rotation() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct._rotation)
  return _internal__rotation();
}
inline void SkillStatusStruct::unsafe_arena_set_allocated__rotation(
    ::pb::QuaternionStruct* _rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation_);
  }
  _rotation_ = _rotation;
  if (_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SkillStatusStruct._rotation)
}
inline ::pb::QuaternionStruct* SkillStatusStruct::release__rotation() {
  
  ::pb::QuaternionStruct* temp = _rotation_;
  _rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::QuaternionStruct* SkillStatusStruct::unsafe_arena_release__rotation() {
  // @@protoc_insertion_point(field_release:pb.SkillStatusStruct._rotation)
  
  ::pb::QuaternionStruct* temp = _rotation_;
  _rotation_ = nullptr;
  return temp;
}
inline ::pb::QuaternionStruct* SkillStatusStruct::_internal_mutable__rotation() {
  
  if (_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::QuaternionStruct>(GetArena());
    _rotation_ = p;
  }
  return _rotation_;
}
inline ::pb::QuaternionStruct* SkillStatusStruct::mutable__rotation() {
  // @@protoc_insertion_point(field_mutable:pb.SkillStatusStruct._rotation)
  return _internal_mutable__rotation();
}
inline void SkillStatusStruct::set_allocated__rotation(::pb::QuaternionStruct* _rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation_);
  }
  if (_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_rotation)->GetArena();
    if (message_arena != submessage_arena) {
      _rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _rotation, submessage_arena);
    }
    
  } else {
    
  }
  _rotation_ = _rotation;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillStatusStruct._rotation)
}

// .pb.Vector3Struct _scale = 4;
inline bool SkillStatusStruct::_internal_has__scale() const {
  return this != internal_default_instance() && _scale_ != nullptr;
}
inline bool SkillStatusStruct::has__scale() const {
  return _internal_has__scale();
}
inline const ::pb::Vector3Struct& SkillStatusStruct::_internal__scale() const {
  const ::pb::Vector3Struct* p = _scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Vector3Struct&>(
      ::pb::_Vector3Struct_default_instance_);
}
inline const ::pb::Vector3Struct& SkillStatusStruct::_scale() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct._scale)
  return _internal__scale();
}
inline void SkillStatusStruct::unsafe_arena_set_allocated__scale(
    ::pb::Vector3Struct* _scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_scale_);
  }
  _scale_ = _scale;
  if (_scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SkillStatusStruct._scale)
}
inline ::pb::Vector3Struct* SkillStatusStruct::release__scale() {
  
  ::pb::Vector3Struct* temp = _scale_;
  _scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Vector3Struct* SkillStatusStruct::unsafe_arena_release__scale() {
  // @@protoc_insertion_point(field_release:pb.SkillStatusStruct._scale)
  
  ::pb::Vector3Struct* temp = _scale_;
  _scale_ = nullptr;
  return temp;
}
inline ::pb::Vector3Struct* SkillStatusStruct::_internal_mutable__scale() {
  
  if (_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Vector3Struct>(GetArena());
    _scale_ = p;
  }
  return _scale_;
}
inline ::pb::Vector3Struct* SkillStatusStruct::mutable__scale() {
  // @@protoc_insertion_point(field_mutable:pb.SkillStatusStruct._scale)
  return _internal_mutable__scale();
}
inline void SkillStatusStruct::set_allocated__scale(::pb::Vector3Struct* _scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_scale_);
  }
  if (_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_scale)->GetArena();
    if (message_arena != submessage_arena) {
      _scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _scale, submessage_arena);
    }
    
  } else {
    
  }
  _scale_ = _scale;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillStatusStruct._scale)
}

// uint32 ownerID = 5;
inline void SkillStatusStruct::clear_ownerid() {
  ownerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SkillStatusStruct::_internal_ownerid() const {
  return ownerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SkillStatusStruct::ownerid() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct.ownerID)
  return _internal_ownerid();
}
inline void SkillStatusStruct::_internal_set_ownerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ownerid_ = value;
}
inline void SkillStatusStruct::set_ownerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:pb.SkillStatusStruct.ownerID)
}

// string name = 6;
inline void SkillStatusStruct::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SkillStatusStruct::name() const {
  // @@protoc_insertion_point(field_get:pb.SkillStatusStruct.name)
  return _internal_name();
}
inline void SkillStatusStruct::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.SkillStatusStruct.name)
}
inline std::string* SkillStatusStruct::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.SkillStatusStruct.name)
  return _internal_mutable_name();
}
inline const std::string& SkillStatusStruct::_internal_name() const {
  return name_.Get();
}
inline void SkillStatusStruct::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SkillStatusStruct::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SkillStatusStruct.name)
}
inline void SkillStatusStruct::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SkillStatusStruct.name)
}
inline void SkillStatusStruct::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SkillStatusStruct.name)
}
inline std::string* SkillStatusStruct::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SkillStatusStruct::release_name() {
  // @@protoc_insertion_point(field_release:pb.SkillStatusStruct.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SkillStatusStruct::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SkillStatusStruct.name)
}

// -------------------------------------------------------------------

// WorldSnapshotPush

// uint32 ServerStep = 1;
inline void WorldSnapshotPush::clear_serverstep() {
  serverstep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldSnapshotPush::_internal_serverstep() const {
  return serverstep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldSnapshotPush::serverstep() const {
  // @@protoc_insertion_point(field_get:pb.WorldSnapshotPush.ServerStep)
  return _internal_serverstep();
}
inline void WorldSnapshotPush::_internal_set_serverstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverstep_ = value;
}
inline void WorldSnapshotPush::set_serverstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverstep(value);
  // @@protoc_insertion_point(field_set:pb.WorldSnapshotPush.ServerStep)
}

// repeated uint32 ProcessedSlaveStep = 2;
inline int WorldSnapshotPush::_internal_processedslavestep_size() const {
  return processedslavestep_.size();
}
inline int WorldSnapshotPush::processedslavestep_size() const {
  return _internal_processedslavestep_size();
}
inline void WorldSnapshotPush::clear_processedslavestep() {
  processedslavestep_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldSnapshotPush::_internal_processedslavestep(int index) const {
  return processedslavestep_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldSnapshotPush::processedslavestep(int index) const {
  // @@protoc_insertion_point(field_get:pb.WorldSnapshotPush.ProcessedSlaveStep)
  return _internal_processedslavestep(index);
}
inline void WorldSnapshotPush::set_processedslavestep(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  processedslavestep_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.WorldSnapshotPush.ProcessedSlaveStep)
}
inline void WorldSnapshotPush::_internal_add_processedslavestep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  processedslavestep_.Add(value);
}
inline void WorldSnapshotPush::add_processedslavestep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_processedslavestep(value);
  // @@protoc_insertion_point(field_add:pb.WorldSnapshotPush.ProcessedSlaveStep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
WorldSnapshotPush::_internal_processedslavestep() const {
  return processedslavestep_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
WorldSnapshotPush::processedslavestep() const {
  // @@protoc_insertion_point(field_list:pb.WorldSnapshotPush.ProcessedSlaveStep)
  return _internal_processedslavestep();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
WorldSnapshotPush::_internal_mutable_processedslavestep() {
  return &processedslavestep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
WorldSnapshotPush::mutable_processedslavestep() {
  // @@protoc_insertion_point(field_mutable_list:pb.WorldSnapshotPush.ProcessedSlaveStep)
  return _internal_mutable_processedslavestep();
}

// repeated .pb.PlayerStatusStruct PlayerStatusList = 3;
inline int WorldSnapshotPush::_internal_playerstatuslist_size() const {
  return playerstatuslist_.size();
}
inline int WorldSnapshotPush::playerstatuslist_size() const {
  return _internal_playerstatuslist_size();
}
inline void WorldSnapshotPush::clear_playerstatuslist() {
  playerstatuslist_.Clear();
}
inline ::pb::PlayerStatusStruct* WorldSnapshotPush::mutable_playerstatuslist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.WorldSnapshotPush.PlayerStatusList)
  return playerstatuslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerStatusStruct >*
WorldSnapshotPush::mutable_playerstatuslist() {
  // @@protoc_insertion_point(field_mutable_list:pb.WorldSnapshotPush.PlayerStatusList)
  return &playerstatuslist_;
}
inline const ::pb::PlayerStatusStruct& WorldSnapshotPush::_internal_playerstatuslist(int index) const {
  return playerstatuslist_.Get(index);
}
inline const ::pb::PlayerStatusStruct& WorldSnapshotPush::playerstatuslist(int index) const {
  // @@protoc_insertion_point(field_get:pb.WorldSnapshotPush.PlayerStatusList)
  return _internal_playerstatuslist(index);
}
inline ::pb::PlayerStatusStruct* WorldSnapshotPush::_internal_add_playerstatuslist() {
  return playerstatuslist_.Add();
}
inline ::pb::PlayerStatusStruct* WorldSnapshotPush::add_playerstatuslist() {
  // @@protoc_insertion_point(field_add:pb.WorldSnapshotPush.PlayerStatusList)
  return _internal_add_playerstatuslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerStatusStruct >&
WorldSnapshotPush::playerstatuslist() const {
  // @@protoc_insertion_point(field_list:pb.WorldSnapshotPush.PlayerStatusList)
  return playerstatuslist_;
}

// repeated .pb.SkillStatusStruct SkillStatusList = 4;
inline int WorldSnapshotPush::_internal_skillstatuslist_size() const {
  return skillstatuslist_.size();
}
inline int WorldSnapshotPush::skillstatuslist_size() const {
  return _internal_skillstatuslist_size();
}
inline void WorldSnapshotPush::clear_skillstatuslist() {
  skillstatuslist_.Clear();
}
inline ::pb::SkillStatusStruct* WorldSnapshotPush::mutable_skillstatuslist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.WorldSnapshotPush.SkillStatusList)
  return skillstatuslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SkillStatusStruct >*
WorldSnapshotPush::mutable_skillstatuslist() {
  // @@protoc_insertion_point(field_mutable_list:pb.WorldSnapshotPush.SkillStatusList)
  return &skillstatuslist_;
}
inline const ::pb::SkillStatusStruct& WorldSnapshotPush::_internal_skillstatuslist(int index) const {
  return skillstatuslist_.Get(index);
}
inline const ::pb::SkillStatusStruct& WorldSnapshotPush::skillstatuslist(int index) const {
  // @@protoc_insertion_point(field_get:pb.WorldSnapshotPush.SkillStatusList)
  return _internal_skillstatuslist(index);
}
inline ::pb::SkillStatusStruct* WorldSnapshotPush::_internal_add_skillstatuslist() {
  return skillstatuslist_.Add();
}
inline ::pb::SkillStatusStruct* WorldSnapshotPush::add_skillstatuslist() {
  // @@protoc_insertion_point(field_add:pb.WorldSnapshotPush.SkillStatusList)
  return _internal_add_skillstatuslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SkillStatusStruct >&
WorldSnapshotPush::skillstatuslist() const {
  // @@protoc_insertion_point(field_list:pb.WorldSnapshotPush.SkillStatusList)
  return skillstatuslist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::CliTryLinkBattleScRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CliTryLinkBattleScRsp_RetCode>() {
  return ::pb::CliTryLinkBattleScRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::CliStatusChangeNotify_TypeCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CliStatusChangeNotify_TypeCode>() {
  return ::pb::CliStatusChangeNotify_TypeCode_descriptor();
}
template <> struct is_proto_enum< ::pb::CSCliBattleCMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CSCliBattleCMD>() {
  return ::pb::CSCliBattleCMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fbattle_2eproto
