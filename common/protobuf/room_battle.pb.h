// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room_battle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_room_5fbattle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_room_5fbattle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_room_5fbattle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_room_5fbattle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_room_5fbattle_2eproto;
namespace pb {
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class SSB2RCreateRoomRsp;
class SSB2RCreateRoomRspDefaultTypeInternal;
extern SSB2RCreateRoomRspDefaultTypeInternal _SSB2RCreateRoomRsp_default_instance_;
class SSB2RJoinRoomRsp;
class SSB2RJoinRoomRspDefaultTypeInternal;
extern SSB2RJoinRoomRspDefaultTypeInternal _SSB2RJoinRoomRsp_default_instance_;
class SSB2RLeaveRoomRsp;
class SSB2RLeaveRoomRspDefaultTypeInternal;
extern SSB2RLeaveRoomRspDefaultTypeInternal _SSB2RLeaveRoomRsp_default_instance_;
class SSR2BCreateRoomReq;
class SSR2BCreateRoomReqDefaultTypeInternal;
extern SSR2BCreateRoomReqDefaultTypeInternal _SSR2BCreateRoomReq_default_instance_;
class SSR2BJoinRoomReq;
class SSR2BJoinRoomReqDefaultTypeInternal;
extern SSR2BJoinRoomReqDefaultTypeInternal _SSR2BJoinRoomReq_default_instance_;
class SSR2BLeaveRoomReq;
class SSR2BLeaveRoomReqDefaultTypeInternal;
extern SSR2BLeaveRoomReqDefaultTypeInternal _SSR2BLeaveRoomReq_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PlayerInfo* Arena::CreateMaybeMessage<::pb::PlayerInfo>(Arena*);
template<> ::pb::SSB2RCreateRoomRsp* Arena::CreateMaybeMessage<::pb::SSB2RCreateRoomRsp>(Arena*);
template<> ::pb::SSB2RJoinRoomRsp* Arena::CreateMaybeMessage<::pb::SSB2RJoinRoomRsp>(Arena*);
template<> ::pb::SSB2RLeaveRoomRsp* Arena::CreateMaybeMessage<::pb::SSB2RLeaveRoomRsp>(Arena*);
template<> ::pb::SSR2BCreateRoomReq* Arena::CreateMaybeMessage<::pb::SSR2BCreateRoomReq>(Arena*);
template<> ::pb::SSR2BJoinRoomReq* Arena::CreateMaybeMessage<::pb::SSR2BJoinRoomReq>(Arena*);
template<> ::pb::SSR2BLeaveRoomReq* Arena::CreateMaybeMessage<::pb::SSR2BLeaveRoomReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum SSB2RCreateRoomRsp_RetCode : int {
  SSB2RCreateRoomRsp_RetCode_RET_SUCC = 0,
  SSB2RCreateRoomRsp_RetCode_RET_FAILED = 1,
  SSB2RCreateRoomRsp_RetCode_RET_GAME_EXIST = 2,
  SSB2RCreateRoomRsp_RetCode_SSB2RCreateRoomRsp_RetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SSB2RCreateRoomRsp_RetCode_SSB2RCreateRoomRsp_RetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SSB2RCreateRoomRsp_RetCode_IsValid(int value);
constexpr SSB2RCreateRoomRsp_RetCode SSB2RCreateRoomRsp_RetCode_RetCode_MIN = SSB2RCreateRoomRsp_RetCode_RET_SUCC;
constexpr SSB2RCreateRoomRsp_RetCode SSB2RCreateRoomRsp_RetCode_RetCode_MAX = SSB2RCreateRoomRsp_RetCode_RET_GAME_EXIST;
constexpr int SSB2RCreateRoomRsp_RetCode_RetCode_ARRAYSIZE = SSB2RCreateRoomRsp_RetCode_RetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSB2RCreateRoomRsp_RetCode_descriptor();
template<typename T>
inline const std::string& SSB2RCreateRoomRsp_RetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSB2RCreateRoomRsp_RetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSB2RCreateRoomRsp_RetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSB2RCreateRoomRsp_RetCode_descriptor(), enum_t_value);
}
inline bool SSB2RCreateRoomRsp_RetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSB2RCreateRoomRsp_RetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSB2RCreateRoomRsp_RetCode>(
    SSB2RCreateRoomRsp_RetCode_descriptor(), name, value);
}
enum SSB2RJoinRoomRsp_Retcode : int {
  SSB2RJoinRoomRsp_Retcode_RET_SUCC = 0,
  SSB2RJoinRoomRsp_Retcode_RET_FAILED = 1,
  SSB2RJoinRoomRsp_Retcode_RET_GAME_NOT_EXIST = 2,
  SSB2RJoinRoomRsp_Retcode_SSB2RJoinRoomRsp_Retcode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SSB2RJoinRoomRsp_Retcode_SSB2RJoinRoomRsp_Retcode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SSB2RJoinRoomRsp_Retcode_IsValid(int value);
constexpr SSB2RJoinRoomRsp_Retcode SSB2RJoinRoomRsp_Retcode_Retcode_MIN = SSB2RJoinRoomRsp_Retcode_RET_SUCC;
constexpr SSB2RJoinRoomRsp_Retcode SSB2RJoinRoomRsp_Retcode_Retcode_MAX = SSB2RJoinRoomRsp_Retcode_RET_GAME_NOT_EXIST;
constexpr int SSB2RJoinRoomRsp_Retcode_Retcode_ARRAYSIZE = SSB2RJoinRoomRsp_Retcode_Retcode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSB2RJoinRoomRsp_Retcode_descriptor();
template<typename T>
inline const std::string& SSB2RJoinRoomRsp_Retcode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSB2RJoinRoomRsp_Retcode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSB2RJoinRoomRsp_Retcode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSB2RJoinRoomRsp_Retcode_descriptor(), enum_t_value);
}
inline bool SSB2RJoinRoomRsp_Retcode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSB2RJoinRoomRsp_Retcode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSB2RJoinRoomRsp_Retcode>(
    SSB2RJoinRoomRsp_Retcode_descriptor(), name, value);
}
enum SSB2RLeaveRoomRsp_Retcode : int {
  SSB2RLeaveRoomRsp_Retcode_RET_SUCC = 0,
  SSB2RLeaveRoomRsp_Retcode_RET_FAILED = 1,
  SSB2RLeaveRoomRsp_Retcode_RET_GAME_NOT_EXIST = 2,
  SSB2RLeaveRoomRsp_Retcode_RET_USER_NOT_EXIST = 3,
  SSB2RLeaveRoomRsp_Retcode_SSB2RLeaveRoomRsp_Retcode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SSB2RLeaveRoomRsp_Retcode_SSB2RLeaveRoomRsp_Retcode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SSB2RLeaveRoomRsp_Retcode_IsValid(int value);
constexpr SSB2RLeaveRoomRsp_Retcode SSB2RLeaveRoomRsp_Retcode_Retcode_MIN = SSB2RLeaveRoomRsp_Retcode_RET_SUCC;
constexpr SSB2RLeaveRoomRsp_Retcode SSB2RLeaveRoomRsp_Retcode_Retcode_MAX = SSB2RLeaveRoomRsp_Retcode_RET_USER_NOT_EXIST;
constexpr int SSB2RLeaveRoomRsp_Retcode_Retcode_ARRAYSIZE = SSB2RLeaveRoomRsp_Retcode_Retcode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSB2RLeaveRoomRsp_Retcode_descriptor();
template<typename T>
inline const std::string& SSB2RLeaveRoomRsp_Retcode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSB2RLeaveRoomRsp_Retcode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSB2RLeaveRoomRsp_Retcode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSB2RLeaveRoomRsp_Retcode_descriptor(), enum_t_value);
}
inline bool SSB2RLeaveRoomRsp_Retcode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSB2RLeaveRoomRsp_Retcode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSB2RLeaveRoomRsp_Retcode>(
    SSB2RLeaveRoomRsp_Retcode_descriptor(), name, value);
}
enum SS_ROOM_BATTLE_CMD : int {
  SS_ROOM_BATTLE_DEFAULT = 0,
  SS_ROOM_CREATE_GAMEROOM = 100001,
  SS_BATTLE_CREATE_RSP = 100002,
  SS_ROOM_JOIN_GAMEROOM = 100003,
  SS_BATTLE_JOIN_RSP = 100004,
  SS_ROOM_LEAVE_GAMEROOM = 100005,
  SS_BATTLE_LEAVE_RSP = 100006,
  SS_ROOM_BATTLE_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SS_ROOM_BATTLE_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SS_ROOM_BATTLE_CMD_IsValid(int value);
constexpr SS_ROOM_BATTLE_CMD SS_ROOM_BATTLE_CMD_MIN = SS_ROOM_BATTLE_DEFAULT;
constexpr SS_ROOM_BATTLE_CMD SS_ROOM_BATTLE_CMD_MAX = SS_BATTLE_LEAVE_RSP;
constexpr int SS_ROOM_BATTLE_CMD_ARRAYSIZE = SS_ROOM_BATTLE_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SS_ROOM_BATTLE_CMD_descriptor();
template<typename T>
inline const std::string& SS_ROOM_BATTLE_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SS_ROOM_BATTLE_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SS_ROOM_BATTLE_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SS_ROOM_BATTLE_CMD_descriptor(), enum_t_value);
}
inline bool SS_ROOM_BATTLE_CMD_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SS_ROOM_BATTLE_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SS_ROOM_BATTLE_CMD>(
    SS_ROOM_BATTLE_CMD_descriptor(), name, value);
}
// ===================================================================

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kPlayeridFieldNumber = 2,
  };
  // uint32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSR2BCreateRoomReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSR2BCreateRoomReq) */ {
 public:
  inline SSR2BCreateRoomReq() : SSR2BCreateRoomReq(nullptr) {}
  virtual ~SSR2BCreateRoomReq();

  SSR2BCreateRoomReq(const SSR2BCreateRoomReq& from);
  SSR2BCreateRoomReq(SSR2BCreateRoomReq&& from) noexcept
    : SSR2BCreateRoomReq() {
    *this = ::std::move(from);
  }

  inline SSR2BCreateRoomReq& operator=(const SSR2BCreateRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSR2BCreateRoomReq& operator=(SSR2BCreateRoomReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSR2BCreateRoomReq& default_instance();

  static inline const SSR2BCreateRoomReq* internal_default_instance() {
    return reinterpret_cast<const SSR2BCreateRoomReq*>(
               &_SSR2BCreateRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSR2BCreateRoomReq& a, SSR2BCreateRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSR2BCreateRoomReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSR2BCreateRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSR2BCreateRoomReq* New() const final {
    return CreateMaybeMessage<SSR2BCreateRoomReq>(nullptr);
  }

  SSR2BCreateRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSR2BCreateRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSR2BCreateRoomReq& from);
  void MergeFrom(const SSR2BCreateRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSR2BCreateRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSR2BCreateRoomReq";
  }
  protected:
  explicit SSR2BCreateRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinfoFieldNumber = 2,
    kTokenFieldNumber = 3,
    kRoomidFieldNumber = 1,
  };
  // repeated .pb.PlayerInfo pinfo = 2;
  int pinfo_size() const;
  private:
  int _internal_pinfo_size() const;
  public:
  void clear_pinfo();
  ::pb::PlayerInfo* mutable_pinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerInfo >*
      mutable_pinfo();
  private:
  const ::pb::PlayerInfo& _internal_pinfo(int index) const;
  ::pb::PlayerInfo* _internal_add_pinfo();
  public:
  const ::pb::PlayerInfo& pinfo(int index) const;
  ::pb::PlayerInfo* add_pinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerInfo >&
      pinfo() const;

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSR2BCreateRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerInfo > pinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSB2RCreateRoomRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSB2RCreateRoomRsp) */ {
 public:
  inline SSB2RCreateRoomRsp() : SSB2RCreateRoomRsp(nullptr) {}
  virtual ~SSB2RCreateRoomRsp();

  SSB2RCreateRoomRsp(const SSB2RCreateRoomRsp& from);
  SSB2RCreateRoomRsp(SSB2RCreateRoomRsp&& from) noexcept
    : SSB2RCreateRoomRsp() {
    *this = ::std::move(from);
  }

  inline SSB2RCreateRoomRsp& operator=(const SSB2RCreateRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSB2RCreateRoomRsp& operator=(SSB2RCreateRoomRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSB2RCreateRoomRsp& default_instance();

  static inline const SSB2RCreateRoomRsp* internal_default_instance() {
    return reinterpret_cast<const SSB2RCreateRoomRsp*>(
               &_SSB2RCreateRoomRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSB2RCreateRoomRsp& a, SSB2RCreateRoomRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSB2RCreateRoomRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSB2RCreateRoomRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSB2RCreateRoomRsp* New() const final {
    return CreateMaybeMessage<SSB2RCreateRoomRsp>(nullptr);
  }

  SSB2RCreateRoomRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSB2RCreateRoomRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSB2RCreateRoomRsp& from);
  void MergeFrom(const SSB2RCreateRoomRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSB2RCreateRoomRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSB2RCreateRoomRsp";
  }
  protected:
  explicit SSB2RCreateRoomRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSB2RCreateRoomRsp_RetCode RetCode;
  static constexpr RetCode RET_SUCC =
    SSB2RCreateRoomRsp_RetCode_RET_SUCC;
  static constexpr RetCode RET_FAILED =
    SSB2RCreateRoomRsp_RetCode_RET_FAILED;
  static constexpr RetCode RET_GAME_EXIST =
    SSB2RCreateRoomRsp_RetCode_RET_GAME_EXIST;
  static inline bool RetCode_IsValid(int value) {
    return SSB2RCreateRoomRsp_RetCode_IsValid(value);
  }
  static constexpr RetCode RetCode_MIN =
    SSB2RCreateRoomRsp_RetCode_RetCode_MIN;
  static constexpr RetCode RetCode_MAX =
    SSB2RCreateRoomRsp_RetCode_RetCode_MAX;
  static constexpr int RetCode_ARRAYSIZE =
    SSB2RCreateRoomRsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RetCode_descriptor() {
    return SSB2RCreateRoomRsp_RetCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RetCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RetCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RetCode_Name.");
    return SSB2RCreateRoomRsp_RetCode_Name(enum_t_value);
  }
  static inline bool RetCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RetCode* value) {
    return SSB2RCreateRoomRsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // uint64 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.SSB2RCreateRoomRsp.RetCode retcode = 1;
  void clear_retcode();
  ::pb::SSB2RCreateRoomRsp_RetCode retcode() const;
  void set_retcode(::pb::SSB2RCreateRoomRsp_RetCode value);
  private:
  ::pb::SSB2RCreateRoomRsp_RetCode _internal_retcode() const;
  void _internal_set_retcode(::pb::SSB2RCreateRoomRsp_RetCode value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSB2RCreateRoomRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSR2BJoinRoomReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSR2BJoinRoomReq) */ {
 public:
  inline SSR2BJoinRoomReq() : SSR2BJoinRoomReq(nullptr) {}
  virtual ~SSR2BJoinRoomReq();

  SSR2BJoinRoomReq(const SSR2BJoinRoomReq& from);
  SSR2BJoinRoomReq(SSR2BJoinRoomReq&& from) noexcept
    : SSR2BJoinRoomReq() {
    *this = ::std::move(from);
  }

  inline SSR2BJoinRoomReq& operator=(const SSR2BJoinRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSR2BJoinRoomReq& operator=(SSR2BJoinRoomReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSR2BJoinRoomReq& default_instance();

  static inline const SSR2BJoinRoomReq* internal_default_instance() {
    return reinterpret_cast<const SSR2BJoinRoomReq*>(
               &_SSR2BJoinRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSR2BJoinRoomReq& a, SSR2BJoinRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSR2BJoinRoomReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSR2BJoinRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSR2BJoinRoomReq* New() const final {
    return CreateMaybeMessage<SSR2BJoinRoomReq>(nullptr);
  }

  SSR2BJoinRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSR2BJoinRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSR2BJoinRoomReq& from);
  void MergeFrom(const SSR2BJoinRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSR2BJoinRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSR2BJoinRoomReq";
  }
  protected:
  explicit SSR2BJoinRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinfoFieldNumber = 2,
    kRoomidFieldNumber = 1,
  };
  // .pb.PlayerInfo pinfo = 2;
  bool has_pinfo() const;
  private:
  bool _internal_has_pinfo() const;
  public:
  void clear_pinfo();
  const ::pb::PlayerInfo& pinfo() const;
  ::pb::PlayerInfo* release_pinfo();
  ::pb::PlayerInfo* mutable_pinfo();
  void set_allocated_pinfo(::pb::PlayerInfo* pinfo);
  private:
  const ::pb::PlayerInfo& _internal_pinfo() const;
  ::pb::PlayerInfo* _internal_mutable_pinfo();
  public:
  void unsafe_arena_set_allocated_pinfo(
      ::pb::PlayerInfo* pinfo);
  ::pb::PlayerInfo* unsafe_arena_release_pinfo();

  // uint64 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSR2BJoinRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::PlayerInfo* pinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSB2RJoinRoomRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSB2RJoinRoomRsp) */ {
 public:
  inline SSB2RJoinRoomRsp() : SSB2RJoinRoomRsp(nullptr) {}
  virtual ~SSB2RJoinRoomRsp();

  SSB2RJoinRoomRsp(const SSB2RJoinRoomRsp& from);
  SSB2RJoinRoomRsp(SSB2RJoinRoomRsp&& from) noexcept
    : SSB2RJoinRoomRsp() {
    *this = ::std::move(from);
  }

  inline SSB2RJoinRoomRsp& operator=(const SSB2RJoinRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSB2RJoinRoomRsp& operator=(SSB2RJoinRoomRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSB2RJoinRoomRsp& default_instance();

  static inline const SSB2RJoinRoomRsp* internal_default_instance() {
    return reinterpret_cast<const SSB2RJoinRoomRsp*>(
               &_SSB2RJoinRoomRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSB2RJoinRoomRsp& a, SSB2RJoinRoomRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSB2RJoinRoomRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSB2RJoinRoomRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSB2RJoinRoomRsp* New() const final {
    return CreateMaybeMessage<SSB2RJoinRoomRsp>(nullptr);
  }

  SSB2RJoinRoomRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSB2RJoinRoomRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSB2RJoinRoomRsp& from);
  void MergeFrom(const SSB2RJoinRoomRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSB2RJoinRoomRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSB2RJoinRoomRsp";
  }
  protected:
  explicit SSB2RJoinRoomRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSB2RJoinRoomRsp_Retcode Retcode;
  static constexpr Retcode RET_SUCC =
    SSB2RJoinRoomRsp_Retcode_RET_SUCC;
  static constexpr Retcode RET_FAILED =
    SSB2RJoinRoomRsp_Retcode_RET_FAILED;
  static constexpr Retcode RET_GAME_NOT_EXIST =
    SSB2RJoinRoomRsp_Retcode_RET_GAME_NOT_EXIST;
  static inline bool Retcode_IsValid(int value) {
    return SSB2RJoinRoomRsp_Retcode_IsValid(value);
  }
  static constexpr Retcode Retcode_MIN =
    SSB2RJoinRoomRsp_Retcode_Retcode_MIN;
  static constexpr Retcode Retcode_MAX =
    SSB2RJoinRoomRsp_Retcode_Retcode_MAX;
  static constexpr int Retcode_ARRAYSIZE =
    SSB2RJoinRoomRsp_Retcode_Retcode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Retcode_descriptor() {
    return SSB2RJoinRoomRsp_Retcode_descriptor();
  }
  template<typename T>
  static inline const std::string& Retcode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Retcode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Retcode_Name.");
    return SSB2RJoinRoomRsp_Retcode_Name(enum_t_value);
  }
  static inline bool Retcode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Retcode* value) {
    return SSB2RJoinRoomRsp_Retcode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // uint64 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.SSB2RJoinRoomRsp.Retcode retcode = 1;
  void clear_retcode();
  ::pb::SSB2RJoinRoomRsp_Retcode retcode() const;
  void set_retcode(::pb::SSB2RJoinRoomRsp_Retcode value);
  private:
  ::pb::SSB2RJoinRoomRsp_Retcode _internal_retcode() const;
  void _internal_set_retcode(::pb::SSB2RJoinRoomRsp_Retcode value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSB2RJoinRoomRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSR2BLeaveRoomReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSR2BLeaveRoomReq) */ {
 public:
  inline SSR2BLeaveRoomReq() : SSR2BLeaveRoomReq(nullptr) {}
  virtual ~SSR2BLeaveRoomReq();

  SSR2BLeaveRoomReq(const SSR2BLeaveRoomReq& from);
  SSR2BLeaveRoomReq(SSR2BLeaveRoomReq&& from) noexcept
    : SSR2BLeaveRoomReq() {
    *this = ::std::move(from);
  }

  inline SSR2BLeaveRoomReq& operator=(const SSR2BLeaveRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSR2BLeaveRoomReq& operator=(SSR2BLeaveRoomReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSR2BLeaveRoomReq& default_instance();

  static inline const SSR2BLeaveRoomReq* internal_default_instance() {
    return reinterpret_cast<const SSR2BLeaveRoomReq*>(
               &_SSR2BLeaveRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSR2BLeaveRoomReq& a, SSR2BLeaveRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSR2BLeaveRoomReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSR2BLeaveRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSR2BLeaveRoomReq* New() const final {
    return CreateMaybeMessage<SSR2BLeaveRoomReq>(nullptr);
  }

  SSR2BLeaveRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSR2BLeaveRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSR2BLeaveRoomReq& from);
  void MergeFrom(const SSR2BLeaveRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSR2BLeaveRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSR2BLeaveRoomReq";
  }
  protected:
  explicit SSR2BLeaveRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
    kAccountidFieldNumber = 2,
  };
  // uint64 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accountid = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSR2BLeaveRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class SSB2RLeaveRoomRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSB2RLeaveRoomRsp) */ {
 public:
  inline SSB2RLeaveRoomRsp() : SSB2RLeaveRoomRsp(nullptr) {}
  virtual ~SSB2RLeaveRoomRsp();

  SSB2RLeaveRoomRsp(const SSB2RLeaveRoomRsp& from);
  SSB2RLeaveRoomRsp(SSB2RLeaveRoomRsp&& from) noexcept
    : SSB2RLeaveRoomRsp() {
    *this = ::std::move(from);
  }

  inline SSB2RLeaveRoomRsp& operator=(const SSB2RLeaveRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSB2RLeaveRoomRsp& operator=(SSB2RLeaveRoomRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSB2RLeaveRoomRsp& default_instance();

  static inline const SSB2RLeaveRoomRsp* internal_default_instance() {
    return reinterpret_cast<const SSB2RLeaveRoomRsp*>(
               &_SSB2RLeaveRoomRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSB2RLeaveRoomRsp& a, SSB2RLeaveRoomRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSB2RLeaveRoomRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSB2RLeaveRoomRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSB2RLeaveRoomRsp* New() const final {
    return CreateMaybeMessage<SSB2RLeaveRoomRsp>(nullptr);
  }

  SSB2RLeaveRoomRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSB2RLeaveRoomRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSB2RLeaveRoomRsp& from);
  void MergeFrom(const SSB2RLeaveRoomRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSB2RLeaveRoomRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSB2RLeaveRoomRsp";
  }
  protected:
  explicit SSB2RLeaveRoomRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_room_5fbattle_2eproto);
    return ::descriptor_table_room_5fbattle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSB2RLeaveRoomRsp_Retcode Retcode;
  static constexpr Retcode RET_SUCC =
    SSB2RLeaveRoomRsp_Retcode_RET_SUCC;
  static constexpr Retcode RET_FAILED =
    SSB2RLeaveRoomRsp_Retcode_RET_FAILED;
  static constexpr Retcode RET_GAME_NOT_EXIST =
    SSB2RLeaveRoomRsp_Retcode_RET_GAME_NOT_EXIST;
  static constexpr Retcode RET_USER_NOT_EXIST =
    SSB2RLeaveRoomRsp_Retcode_RET_USER_NOT_EXIST;
  static inline bool Retcode_IsValid(int value) {
    return SSB2RLeaveRoomRsp_Retcode_IsValid(value);
  }
  static constexpr Retcode Retcode_MIN =
    SSB2RLeaveRoomRsp_Retcode_Retcode_MIN;
  static constexpr Retcode Retcode_MAX =
    SSB2RLeaveRoomRsp_Retcode_Retcode_MAX;
  static constexpr int Retcode_ARRAYSIZE =
    SSB2RLeaveRoomRsp_Retcode_Retcode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Retcode_descriptor() {
    return SSB2RLeaveRoomRsp_Retcode_descriptor();
  }
  template<typename T>
  static inline const std::string& Retcode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Retcode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Retcode_Name.");
    return SSB2RLeaveRoomRsp_Retcode_Name(enum_t_value);
  }
  static inline bool Retcode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Retcode* value) {
    return SSB2RLeaveRoomRsp_Retcode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // uint64 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pb.SSB2RLeaveRoomRsp.Retcode retcode = 1;
  void clear_retcode();
  ::pb::SSB2RLeaveRoomRsp_Retcode retcode() const;
  void set_retcode(::pb::SSB2RLeaveRoomRsp_Retcode value);
  private:
  ::pb::SSB2RLeaveRoomRsp_Retcode _internal_retcode() const;
  void _internal_set_retcode(::pb::SSB2RLeaveRoomRsp_Retcode value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSB2RLeaveRoomRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fbattle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// uint32 accountid = 1;
inline void PlayerInfo::clear_accountid() {
  accountid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::accountid() const {
  // @@protoc_insertion_point(field_get:pb.PlayerInfo.accountid)
  return _internal_accountid();
}
inline void PlayerInfo::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accountid_ = value;
}
inline void PlayerInfo::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.PlayerInfo.accountid)
}

// uint32 playerid = 2;
inline void PlayerInfo::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:pb.PlayerInfo.playerid)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void PlayerInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.PlayerInfo.playerid)
}

// -------------------------------------------------------------------

// SSR2BCreateRoomReq

// uint64 roomid = 1;
inline void SSR2BCreateRoomReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BCreateRoomReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BCreateRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BCreateRoomReq.roomid)
  return _internal_roomid();
}
inline void SSR2BCreateRoomReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSR2BCreateRoomReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSR2BCreateRoomReq.roomid)
}

// repeated .pb.PlayerInfo pinfo = 2;
inline int SSR2BCreateRoomReq::_internal_pinfo_size() const {
  return pinfo_.size();
}
inline int SSR2BCreateRoomReq::pinfo_size() const {
  return _internal_pinfo_size();
}
inline void SSR2BCreateRoomReq::clear_pinfo() {
  pinfo_.Clear();
}
inline ::pb::PlayerInfo* SSR2BCreateRoomReq::mutable_pinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SSR2BCreateRoomReq.pinfo)
  return pinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerInfo >*
SSR2BCreateRoomReq::mutable_pinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SSR2BCreateRoomReq.pinfo)
  return &pinfo_;
}
inline const ::pb::PlayerInfo& SSR2BCreateRoomReq::_internal_pinfo(int index) const {
  return pinfo_.Get(index);
}
inline const ::pb::PlayerInfo& SSR2BCreateRoomReq::pinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SSR2BCreateRoomReq.pinfo)
  return _internal_pinfo(index);
}
inline ::pb::PlayerInfo* SSR2BCreateRoomReq::_internal_add_pinfo() {
  return pinfo_.Add();
}
inline ::pb::PlayerInfo* SSR2BCreateRoomReq::add_pinfo() {
  // @@protoc_insertion_point(field_add:pb.SSR2BCreateRoomReq.pinfo)
  return _internal_add_pinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PlayerInfo >&
SSR2BCreateRoomReq::pinfo() const {
  // @@protoc_insertion_point(field_list:pb.SSR2BCreateRoomReq.pinfo)
  return pinfo_;
}

// string token = 3;
inline void SSR2BCreateRoomReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SSR2BCreateRoomReq::token() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BCreateRoomReq.token)
  return _internal_token();
}
inline void SSR2BCreateRoomReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.SSR2BCreateRoomReq.token)
}
inline std::string* SSR2BCreateRoomReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.SSR2BCreateRoomReq.token)
  return _internal_mutable_token();
}
inline const std::string& SSR2BCreateRoomReq::_internal_token() const {
  return token_.Get();
}
inline void SSR2BCreateRoomReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSR2BCreateRoomReq::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SSR2BCreateRoomReq.token)
}
inline void SSR2BCreateRoomReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SSR2BCreateRoomReq.token)
}
inline void SSR2BCreateRoomReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SSR2BCreateRoomReq.token)
}
inline std::string* SSR2BCreateRoomReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSR2BCreateRoomReq::release_token() {
  // @@protoc_insertion_point(field_release:pb.SSR2BCreateRoomReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSR2BCreateRoomReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SSR2BCreateRoomReq.token)
}

// -------------------------------------------------------------------

// SSB2RCreateRoomRsp

// .pb.SSB2RCreateRoomRsp.RetCode retcode = 1;
inline void SSB2RCreateRoomRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::SSB2RCreateRoomRsp_RetCode SSB2RCreateRoomRsp::_internal_retcode() const {
  return static_cast< ::pb::SSB2RCreateRoomRsp_RetCode >(retcode_);
}
inline ::pb::SSB2RCreateRoomRsp_RetCode SSB2RCreateRoomRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RCreateRoomRsp.retcode)
  return _internal_retcode();
}
inline void SSB2RCreateRoomRsp::_internal_set_retcode(::pb::SSB2RCreateRoomRsp_RetCode value) {
  
  retcode_ = value;
}
inline void SSB2RCreateRoomRsp::set_retcode(::pb::SSB2RCreateRoomRsp_RetCode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RCreateRoomRsp.retcode)
}

// uint64 roomid = 2;
inline void SSB2RCreateRoomRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RCreateRoomRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RCreateRoomRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RCreateRoomRsp.roomid)
  return _internal_roomid();
}
inline void SSB2RCreateRoomRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSB2RCreateRoomRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RCreateRoomRsp.roomid)
}

// -------------------------------------------------------------------

// SSR2BJoinRoomReq

// uint64 roomid = 1;
inline void SSR2BJoinRoomReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BJoinRoomReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BJoinRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BJoinRoomReq.roomid)
  return _internal_roomid();
}
inline void SSR2BJoinRoomReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSR2BJoinRoomReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSR2BJoinRoomReq.roomid)
}

// .pb.PlayerInfo pinfo = 2;
inline bool SSR2BJoinRoomReq::_internal_has_pinfo() const {
  return this != internal_default_instance() && pinfo_ != nullptr;
}
inline bool SSR2BJoinRoomReq::has_pinfo() const {
  return _internal_has_pinfo();
}
inline void SSR2BJoinRoomReq::clear_pinfo() {
  if (GetArena() == nullptr && pinfo_ != nullptr) {
    delete pinfo_;
  }
  pinfo_ = nullptr;
}
inline const ::pb::PlayerInfo& SSR2BJoinRoomReq::_internal_pinfo() const {
  const ::pb::PlayerInfo* p = pinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PlayerInfo&>(
      ::pb::_PlayerInfo_default_instance_);
}
inline const ::pb::PlayerInfo& SSR2BJoinRoomReq::pinfo() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BJoinRoomReq.pinfo)
  return _internal_pinfo();
}
inline void SSR2BJoinRoomReq::unsafe_arena_set_allocated_pinfo(
    ::pb::PlayerInfo* pinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pinfo_);
  }
  pinfo_ = pinfo;
  if (pinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SSR2BJoinRoomReq.pinfo)
}
inline ::pb::PlayerInfo* SSR2BJoinRoomReq::release_pinfo() {
  
  ::pb::PlayerInfo* temp = pinfo_;
  pinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::PlayerInfo* SSR2BJoinRoomReq::unsafe_arena_release_pinfo() {
  // @@protoc_insertion_point(field_release:pb.SSR2BJoinRoomReq.pinfo)
  
  ::pb::PlayerInfo* temp = pinfo_;
  pinfo_ = nullptr;
  return temp;
}
inline ::pb::PlayerInfo* SSR2BJoinRoomReq::_internal_mutable_pinfo() {
  
  if (pinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PlayerInfo>(GetArena());
    pinfo_ = p;
  }
  return pinfo_;
}
inline ::pb::PlayerInfo* SSR2BJoinRoomReq::mutable_pinfo() {
  // @@protoc_insertion_point(field_mutable:pb.SSR2BJoinRoomReq.pinfo)
  return _internal_mutable_pinfo();
}
inline void SSR2BJoinRoomReq::set_allocated_pinfo(::pb::PlayerInfo* pinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pinfo_;
  }
  if (pinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pinfo);
    if (message_arena != submessage_arena) {
      pinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinfo, submessage_arena);
    }
    
  } else {
    
  }
  pinfo_ = pinfo;
  // @@protoc_insertion_point(field_set_allocated:pb.SSR2BJoinRoomReq.pinfo)
}

// -------------------------------------------------------------------

// SSB2RJoinRoomRsp

// .pb.SSB2RJoinRoomRsp.Retcode retcode = 1;
inline void SSB2RJoinRoomRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::SSB2RJoinRoomRsp_Retcode SSB2RJoinRoomRsp::_internal_retcode() const {
  return static_cast< ::pb::SSB2RJoinRoomRsp_Retcode >(retcode_);
}
inline ::pb::SSB2RJoinRoomRsp_Retcode SSB2RJoinRoomRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RJoinRoomRsp.retcode)
  return _internal_retcode();
}
inline void SSB2RJoinRoomRsp::_internal_set_retcode(::pb::SSB2RJoinRoomRsp_Retcode value) {
  
  retcode_ = value;
}
inline void SSB2RJoinRoomRsp::set_retcode(::pb::SSB2RJoinRoomRsp_Retcode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RJoinRoomRsp.retcode)
}

// uint64 roomid = 2;
inline void SSB2RJoinRoomRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RJoinRoomRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RJoinRoomRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RJoinRoomRsp.roomid)
  return _internal_roomid();
}
inline void SSB2RJoinRoomRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSB2RJoinRoomRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RJoinRoomRsp.roomid)
}

// -------------------------------------------------------------------

// SSR2BLeaveRoomReq

// uint64 roomid = 1;
inline void SSR2BLeaveRoomReq::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BLeaveRoomReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BLeaveRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BLeaveRoomReq.roomid)
  return _internal_roomid();
}
inline void SSR2BLeaveRoomReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSR2BLeaveRoomReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSR2BLeaveRoomReq.roomid)
}

// uint64 accountid = 2;
inline void SSR2BLeaveRoomReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BLeaveRoomReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSR2BLeaveRoomReq::accountid() const {
  // @@protoc_insertion_point(field_get:pb.SSR2BLeaveRoomReq.accountid)
  return _internal_accountid();
}
inline void SSR2BLeaveRoomReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SSR2BLeaveRoomReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:pb.SSR2BLeaveRoomReq.accountid)
}

// -------------------------------------------------------------------

// SSB2RLeaveRoomRsp

// .pb.SSB2RLeaveRoomRsp.Retcode retcode = 1;
inline void SSB2RLeaveRoomRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::pb::SSB2RLeaveRoomRsp_Retcode SSB2RLeaveRoomRsp::_internal_retcode() const {
  return static_cast< ::pb::SSB2RLeaveRoomRsp_Retcode >(retcode_);
}
inline ::pb::SSB2RLeaveRoomRsp_Retcode SSB2RLeaveRoomRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RLeaveRoomRsp.retcode)
  return _internal_retcode();
}
inline void SSB2RLeaveRoomRsp::_internal_set_retcode(::pb::SSB2RLeaveRoomRsp_Retcode value) {
  
  retcode_ = value;
}
inline void SSB2RLeaveRoomRsp::set_retcode(::pb::SSB2RLeaveRoomRsp_Retcode value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RLeaveRoomRsp.retcode)
}

// uint64 roomid = 2;
inline void SSB2RLeaveRoomRsp::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RLeaveRoomRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSB2RLeaveRoomRsp::roomid() const {
  // @@protoc_insertion_point(field_get:pb.SSB2RLeaveRoomRsp.roomid)
  return _internal_roomid();
}
inline void SSB2RLeaveRoomRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void SSB2RLeaveRoomRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.SSB2RLeaveRoomRsp.roomid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::SSB2RCreateRoomRsp_RetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SSB2RCreateRoomRsp_RetCode>() {
  return ::pb::SSB2RCreateRoomRsp_RetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::SSB2RJoinRoomRsp_Retcode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SSB2RJoinRoomRsp_Retcode>() {
  return ::pb::SSB2RJoinRoomRsp_Retcode_descriptor();
}
template <> struct is_proto_enum< ::pb::SSB2RLeaveRoomRsp_Retcode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SSB2RLeaveRoomRsp_Retcode>() {
  return ::pb::SSB2RLeaveRoomRsp_Retcode_descriptor();
}
template <> struct is_proto_enum< ::pb::SS_ROOM_BATTLE_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SS_ROOM_BATTLE_CMD>() {
  return ::pb::SS_ROOM_BATTLE_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_room_5fbattle_2eproto
