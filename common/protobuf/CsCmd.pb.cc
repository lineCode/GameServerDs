// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CsCmd.proto

#include "CsCmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CsCmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InRoomUserInfo_CsCmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CsCmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfoMsg_CsCmd_2eproto;
namespace pb {
class LoginAuthCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAuthCsReq> _instance;
} _LoginAuthCsReq_default_instance_;
class LoginAuthScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAuthScRsp> _instance;
} _LoginAuthScRsp_default_instance_;
class LoginCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginCsReq> _instance;
} _LoginCsReq_default_instance_;
class LoginScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginScRsp> _instance;
} _LoginScRsp_default_instance_;
class RoomInfoMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInfoMsg> _instance;
} _RoomInfoMsg_default_instance_;
class SCGate2ClientMsgNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGate2ClientMsgNotify> _instance;
} _SCGate2ClientMsgNotify_default_instance_;
class SCNode2ClientBattleMsgNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNode2ClientBattleMsgNotify> _instance;
} _SCNode2ClientBattleMsgNotify_default_instance_;
class AllRoomInfoNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllRoomInfoNotify> _instance;
} _AllRoomInfoNotify_default_instance_;
class TryCreateRoomCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryCreateRoomCsReq> _instance;
} _TryCreateRoomCsReq_default_instance_;
class TryCreateRoomScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryCreateRoomScRsp> _instance;
} _TryCreateRoomScRsp_default_instance_;
class TryEnterRoomCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryEnterRoomCsReq> _instance;
} _TryEnterRoomCsReq_default_instance_;
class TryEnterRoomScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryEnterRoomScRsp> _instance;
} _TryEnterRoomScRsp_default_instance_;
class TryLeaveRoomCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryLeaveRoomCsReq> _instance;
} _TryLeaveRoomCsReq_default_instance_;
class TryLeaveRoomScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryLeaveRoomScRsp> _instance;
} _TryLeaveRoomScRsp_default_instance_;
class InRoomUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InRoomUserInfo> _instance;
} _InRoomUserInfo_default_instance_;
class RoomUserInfoNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomUserInfoNotify> _instance;
} _RoomUserInfoNotify_default_instance_;
class ChooseLevelCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChooseLevelCsReq> _instance;
} _ChooseLevelCsReq_default_instance_;
class ChooseLevelScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChooseLevelScRsp> _instance;
} _ChooseLevelScRsp_default_instance_;
class ReadyInRoomCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadyInRoomCsReq> _instance;
} _ReadyInRoomCsReq_default_instance_;
class ReadyInRoomScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadyInRoomScRsp> _instance;
} _ReadyInRoomScRsp_default_instance_;
class TryLinkTeamScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryLinkTeamScRsp> _instance;
} _TryLinkTeamScRsp_default_instance_;
class TeamHeartBeatCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamHeartBeatCsReq> _instance;
} _TeamHeartBeatCsReq_default_instance_;
class LinkTeamSuccCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkTeamSuccCsReq> _instance;
} _LinkTeamSuccCsReq_default_instance_;
class GameStartScReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartScReq> _instance;
} _GameStartScReq_default_instance_;
class GameOverCsNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameOverCsNotify> _instance;
} _GameOverCsNotify_default_instance_;
class BattleMsgScNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleMsgScNotify> _instance;
} _BattleMsgScNotify_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_AllRoomInfoNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_AllRoomInfoNotify_default_instance_;
    new (ptr) ::pb::AllRoomInfoNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllRoomInfoNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllRoomInfoNotify_CsCmd_2eproto}, {
      &scc_info_RoomInfoMsg_CsCmd_2eproto.base,}};

static void InitDefaultsscc_info_BattleMsgScNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BattleMsgScNotify_default_instance_;
    new (ptr) ::pb::BattleMsgScNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleMsgScNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleMsgScNotify_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_ChooseLevelCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ChooseLevelCsReq_default_instance_;
    new (ptr) ::pb::ChooseLevelCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChooseLevelCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChooseLevelCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_ChooseLevelScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ChooseLevelScRsp_default_instance_;
    new (ptr) ::pb::ChooseLevelScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChooseLevelScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChooseLevelScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_GameOverCsNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GameOverCsNotify_default_instance_;
    new (ptr) ::pb::GameOverCsNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameOverCsNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameOverCsNotify_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_GameStartScReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GameStartScReq_default_instance_;
    new (ptr) ::pb::GameStartScReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStartScReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameStartScReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_InRoomUserInfo_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InRoomUserInfo_default_instance_;
    new (ptr) ::pb::InRoomUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InRoomUserInfo_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InRoomUserInfo_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_LinkTeamSuccCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LinkTeamSuccCsReq_default_instance_;
    new (ptr) ::pb::LinkTeamSuccCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkTeamSuccCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkTeamSuccCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_LoginAuthCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LoginAuthCsReq_default_instance_;
    new (ptr) ::pb::LoginAuthCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAuthCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginAuthCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_LoginAuthScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LoginAuthScRsp_default_instance_;
    new (ptr) ::pb::LoginAuthScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAuthScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginAuthScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_LoginCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LoginCsReq_default_instance_;
    new (ptr) ::pb::LoginCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_LoginScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LoginScRsp_default_instance_;
    new (ptr) ::pb::LoginScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_ReadyInRoomCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReadyInRoomCsReq_default_instance_;
    new (ptr) ::pb::ReadyInRoomCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadyInRoomCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadyInRoomCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_ReadyInRoomScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReadyInRoomScRsp_default_instance_;
    new (ptr) ::pb::ReadyInRoomScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadyInRoomScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadyInRoomScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_RoomInfoMsg_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RoomInfoMsg_default_instance_;
    new (ptr) ::pb::RoomInfoMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfoMsg_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomInfoMsg_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_RoomUserInfoNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RoomUserInfoNotify_default_instance_;
    new (ptr) ::pb::RoomUserInfoNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomUserInfoNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomUserInfoNotify_CsCmd_2eproto}, {
      &scc_info_InRoomUserInfo_CsCmd_2eproto.base,}};

static void InitDefaultsscc_info_SCGate2ClientMsgNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SCGate2ClientMsgNotify_default_instance_;
    new (ptr) ::pb::SCGate2ClientMsgNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCGate2ClientMsgNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCGate2ClientMsgNotify_CsCmd_2eproto}, {
      &scc_info_RoomInfoMsg_CsCmd_2eproto.base,
      &scc_info_InRoomUserInfo_CsCmd_2eproto.base,}};

static void InitDefaultsscc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SCNode2ClientBattleMsgNotify_default_instance_;
    new (ptr) ::pb::SCNode2ClientBattleMsgNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TeamHeartBeatCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TeamHeartBeatCsReq_default_instance_;
    new (ptr) ::pb::TeamHeartBeatCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamHeartBeatCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamHeartBeatCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryCreateRoomCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryCreateRoomCsReq_default_instance_;
    new (ptr) ::pb::TryCreateRoomCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryCreateRoomCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryCreateRoomCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryCreateRoomScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryCreateRoomScRsp_default_instance_;
    new (ptr) ::pb::TryCreateRoomScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryCreateRoomScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryCreateRoomScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryEnterRoomCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryEnterRoomCsReq_default_instance_;
    new (ptr) ::pb::TryEnterRoomCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryEnterRoomCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryEnterRoomCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryEnterRoomScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryEnterRoomScRsp_default_instance_;
    new (ptr) ::pb::TryEnterRoomScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryEnterRoomScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryEnterRoomScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryLeaveRoomCsReq_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryLeaveRoomCsReq_default_instance_;
    new (ptr) ::pb::TryLeaveRoomCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryLeaveRoomCsReq_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryLeaveRoomCsReq_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryLeaveRoomScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryLeaveRoomScRsp_default_instance_;
    new (ptr) ::pb::TryLeaveRoomScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryLeaveRoomScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryLeaveRoomScRsp_CsCmd_2eproto}, {}};

static void InitDefaultsscc_info_TryLinkTeamScRsp_CsCmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TryLinkTeamScRsp_default_instance_;
    new (ptr) ::pb::TryLinkTeamScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryLinkTeamScRsp_CsCmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryLinkTeamScRsp_CsCmd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CsCmd_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_CsCmd_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CsCmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CsCmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthCsReq, username_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthCsReq, passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthScRsp, username_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginAuthScRsp, accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LoginCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LoginCsReq, name_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginCsReq, accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LoginScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LoginScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginScRsp, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginScRsp, isinroom_),
  PROTOBUF_FIELD_OFFSET(::pb::LoginScRsp, isbattling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, max_user_count_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, cur_user_count_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, level_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, status_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomInfoMsg, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SCGate2ClientMsgNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SCGate2ClientMsgNotify, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::SCGate2ClientMsgNotify, roommsg_),
  PROTOBUF_FIELD_OFFSET(::pb::SCGate2ClientMsgNotify, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SCNode2ClientBattleMsgNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SCNode2ClientBattleMsgNotify, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::SCNode2ClientBattleMsgNotify, addr_),
  PROTOBUF_FIELD_OFFSET(::pb::SCNode2ClientBattleMsgNotify, port_),
  PROTOBUF_FIELD_OFFSET(::pb::SCNode2ClientBattleMsgNotify, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::AllRoomInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::AllRoomInfoNotify, room_count_),
  PROTOBUF_FIELD_OFFSET(::pb::AllRoomInfoNotify, room_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomCsReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomCsReq, maxusercount_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomCsReq, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomScRsp, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomScRsp, maxusercount_),
  PROTOBUF_FIELD_OFFSET(::pb::TryCreateRoomScRsp, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomCsReq, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomScRsp, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomScRsp, maxusercount_),
  PROTOBUF_FIELD_OFFSET(::pb::TryEnterRoomScRsp, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryLeaveRoomCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryLeaveRoomCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryLeaveRoomCsReq, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryLeaveRoomScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryLeaveRoomScRsp, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, ishost_),
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, readystate_),
  PROTOBUF_FIELD_OFFSET(::pb::InRoomUserInfo, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RoomUserInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RoomUserInfoNotify, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomUserInfoNotify, maxusercount_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomUserInfoNotify, level_),
  PROTOBUF_FIELD_OFFSET(::pb::RoomUserInfoNotify, userlists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelCsReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelCsReq, levelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelScRsp, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::ChooseLevelScRsp, levelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomCsReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomCsReq, masterport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReadyInRoomScRsp, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, playerid_),
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, type_),
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, masterip_),
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, port_),
  PROTOBUF_FIELD_OFFSET(::pb::TryLinkTeamScRsp, levelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TeamHeartBeatCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TeamHeartBeatCsReq, playerid_),
  PROTOBUF_FIELD_OFFSET(::pb::TeamHeartBeatCsReq, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LinkTeamSuccCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LinkTeamSuccCsReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::LinkTeamSuccCsReq, succ_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GameStartScReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GameStartScReq, levelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GameOverCsNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GameOverCsNotify, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::GameOverCsNotify, roomid_),
  PROTOBUF_FIELD_OFFSET(::pb::GameOverCsNotify, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BattleMsgScNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BattleMsgScNotify, accountid_),
  PROTOBUF_FIELD_OFFSET(::pb::BattleMsgScNotify, addr_),
  PROTOBUF_FIELD_OFFSET(::pb::BattleMsgScNotify, port_),
  PROTOBUF_FIELD_OFFSET(::pb::BattleMsgScNotify, token_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::LoginAuthCsReq)},
  { 7, -1, sizeof(::pb::LoginAuthScRsp)},
  { 15, -1, sizeof(::pb::LoginCsReq)},
  { 22, -1, sizeof(::pb::LoginScRsp)},
  { 31, -1, sizeof(::pb::RoomInfoMsg)},
  { 42, -1, sizeof(::pb::SCGate2ClientMsgNotify)},
  { 50, -1, sizeof(::pb::SCNode2ClientBattleMsgNotify)},
  { 59, -1, sizeof(::pb::AllRoomInfoNotify)},
  { 66, -1, sizeof(::pb::TryCreateRoomCsReq)},
  { 75, -1, sizeof(::pb::TryCreateRoomScRsp)},
  { 84, -1, sizeof(::pb::TryEnterRoomCsReq)},
  { 91, -1, sizeof(::pb::TryEnterRoomScRsp)},
  { 100, -1, sizeof(::pb::TryLeaveRoomCsReq)},
  { 107, -1, sizeof(::pb::TryLeaveRoomScRsp)},
  { 113, -1, sizeof(::pb::InRoomUserInfo)},
  { 123, -1, sizeof(::pb::RoomUserInfoNotify)},
  { 132, -1, sizeof(::pb::ChooseLevelCsReq)},
  { 140, -1, sizeof(::pb::ChooseLevelScRsp)},
  { 148, -1, sizeof(::pb::ReadyInRoomCsReq)},
  { 156, -1, sizeof(::pb::ReadyInRoomScRsp)},
  { 162, -1, sizeof(::pb::TryLinkTeamScRsp)},
  { 172, -1, sizeof(::pb::TeamHeartBeatCsReq)},
  { 179, -1, sizeof(::pb::LinkTeamSuccCsReq)},
  { 186, -1, sizeof(::pb::GameStartScReq)},
  { 192, -1, sizeof(::pb::GameOverCsNotify)},
  { 200, -1, sizeof(::pb::BattleMsgScNotify)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LoginAuthCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LoginAuthScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LoginCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LoginScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RoomInfoMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SCGate2ClientMsgNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SCNode2ClientBattleMsgNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_AllRoomInfoNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryCreateRoomCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryCreateRoomScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryEnterRoomCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryEnterRoomScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryLeaveRoomCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryLeaveRoomScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_InRoomUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RoomUserInfoNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ChooseLevelCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ChooseLevelScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReadyInRoomCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReadyInRoomScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TryLinkTeamScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TeamHeartBeatCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LinkTeamSuccCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GameStartScReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GameOverCsNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BattleMsgScNotify_default_instance_),
};

const char descriptor_table_protodef_CsCmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013CsCmd.proto\022\002pb\"2\n\016LoginAuthCsReq\022\020\n\010u"
  "sername\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\"\236\001\n\016LoginA"
  "uthScRsp\022+\n\007retCode\030\001 \001(\0162\032.pb.LoginAuth"
  "ScRsp.RetCode\022\020\n\010username\030\002 \001(\t\022\021\n\taccou"
  "ntId\030\003 \001(\r\":\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\016\n\nR"
  "ET_FAILED\020\001\022\021\n\rRET_NOT_EXIST\020\002\"-\n\nLoginC"
  "sReq\022\014\n\004name\030\001 \001(\t\022\021\n\taccountId\030\002 \001(\r\"\347\001"
  "\n\nLoginScRsp\022\'\n\007retcode\030\001 \001(\0162\026.pb.Login"
  "ScRsp.RetCode\022\021\n\taccountid\030\002 \001(\r\022\020\n\010Isin"
  "Room\030\003 \001(\010\022\022\n\nIsBattling\030\004 \001(\010\"w\n\007RetCod"
  "e\022\014\n\010RET_SUCC\020\000\022\016\n\nRET_FAILED\020\001\022\025\n\021RET_A"
  "CCOUNT_ERROR\020\002\022\021\n\rRET_RECONNECT\020\003\022\017\n\013RET"
  "_IN_GAME\020\004\022\023\n\017RET_REQ_INVALID\020\005\"~\n\013RoomI"
  "nfoMsg\022\016\n\006roomid\030\001 \001(\004\022\026\n\016max_user_count"
  "\030\002 \001(\r\022\026\n\016cur_user_count\030\003 \001(\r\022\r\n\005level\030"
  "\004 \001(\r\022\016\n\006status\030\005 \001(\r\022\020\n\010RoomName\030\006 \001(\t\""
  "p\n\026SCGate2ClientMsgNotify\022\021\n\taccountid\030\001"
  " \001(\r\022 \n\007roommsg\030\002 \001(\0132\017.pb.RoomInfoMsg\022!"
  "\n\005users\030\003 \003(\0132\022.pb.InRoomUserInfo\"\\\n\034SCN"
  "ode2ClientBattleMsgNotify\022\021\n\taccountid\030\001"
  " \001(\r\022\014\n\004addr\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\r\n\005toke"
  "n\030\004 \001(\t\"P\n\021AllRoomInfoNotify\022\022\n\nroom_cou"
  "nt\030\001 \001(\r\022\'\n\016room_info_list\030\002 \003(\0132\017.pb.Ro"
  "omInfoMsg\"[\n\022TryCreateRoomCsReq\022\021\n\tAccou"
  "ntID\030\001 \001(\r\022\016\n\006RoomID\030\002 \001(\004\022\024\n\014MaxUserCou"
  "nt\030\003 \001(\r\022\014\n\004Name\030\004 \001(\t\"\317\001\n\022TryCreateRoom"
  "ScRsp\022/\n\007retcode\030\001 \001(\0162\036.pb.TryCreateRoo"
  "mScRsp.RetCode\022\016\n\006RoomID\030\002 \001(\004\022\024\n\014MaxUse"
  "rCount\030\003 \001(\r\022\r\n\005Level\030\004 \001(\r\"S\n\007RetCode\022\014"
  "\n\010RET_SUCC\020\000\022\016\n\nRET_FAILED\020\001\022\024\n\020RET_ROOM"
  "ID_EXIST\020\002\022\024\n\020RET_USER_IN_ROOM\020\003\"6\n\021TryE"
  "nterRoomCsReq\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006Room"
  "ID\030\002 \001(\004\"\206\002\n\021TryEnterRoomScRsp\022.\n\007retcod"
  "e\030\001 \001(\0162\035.pb.TryEnterRoomScRsp.RetCode\022\016"
  "\n\006roomId\030\002 \001(\004\022\024\n\014MaxUserCount\030\003 \001(\r\022\r\n\005"
  "Level\030\004 \001(\r\"\213\001\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\016\n"
  "\nRET_FAILED\020\001\022\026\n\022RET_ROOM_NOT_EXIST\020\002\022\021\n"
  "\rRET_ROOM_FULL\020\003\022\021\n\rRET_ROOM_BUSY\020\004\022\017\n\013R"
  "ET_IN_ROOM\020\005\022\023\n\017RET_REQ_INVALID\020\006\"6\n\021Try"
  "LeaveRoomCsReq\022\021\n\taccountId\030\001 \001(\004\022\016\n\006roo"
  "mid\030\002 \001(\004\"\251\001\n\021TryLeaveRoomScRsp\022.\n\007retco"
  "de\030\001 \001(\0162\035.pb.TryLeaveRoomScRsp.RetCode\""
  "d\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\016\n\nRET_FAILED\020\001"
  "\022\023\n\017RET_NOT_IN_ROOM\020\002\022\021\n\rRET_ROOM_BUSY\020\003"
  "\022\023\n\017RET_REQ_INVALID\020\004\"g\n\016InRoomUserInfo\022"
  "\021\n\tAccountID\030\001 \001(\004\022\020\n\010playerID\030\002 \001(\r\022\016\n\006"
  "isHost\030\003 \001(\r\022\022\n\nReadyState\030\004 \001(\r\022\014\n\004name"
  "\030\005 \001(\t\"p\n\022RoomUserInfoNotify\022\016\n\006RoomID\030\001"
  " \001(\004\022\024\n\014MaxUserCount\030\002 \001(\r\022\r\n\005Level\030\003 \001("
  "\r\022%\n\tuserlists\030\004 \003(\0132\022.pb.InRoomUserInfo"
  "\"F\n\020ChooseLevelCsReq\022\021\n\tAccountId\030\001 \001(\004\022"
  "\016\n\006roomId\030\002 \001(\004\022\017\n\007LevelId\030\003 \001(\r\"\274\001\n\020Cho"
  "oseLevelScRsp\022-\n\007retcode\030\001 \001(\0162\034.pb.Choo"
  "seLevelScRsp.RetCode\022\016\n\006roomId\030\002 \001(\004\022\017\n\007"
  "LevelId\030\003 \001(\r\"X\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\023"
  "\n\017RET_REQ_INVALID\020\001\022\021\n\rRET_ROOM_BUSY\020\002\022\027"
  "\n\023RET_LEVEL_NOT_EXIST\020\003\"I\n\020ReadyInRoomCs"
  "Req\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006RoomID\030\002 \001(\004\022\022"
  "\n\nMasterPort\030\003 \001(\r\"\314\001\n\020ReadyInRoomScRsp\022"
  "-\n\007retcode\030\001 \001(\0162\034.pb.ReadyInRoomScRsp.R"
  "etCode\"\210\001\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\016\n\nRET_"
  "FAILED\020\001\022\023\n\017RET_REQ_INVALID\020\002\022\031\n\025RET_ROL"
  "E_NOT_SELECTED\020\003\022\026\n\022RET_USER_NOT_READY\020\004"
  "\022\027\n\023RET_USER_BEEN_READY\020\005\"c\n\020TryLinkTeam"
  "ScRsp\022\020\n\010playerID\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\020\n"
  "\010MasterIP\030\003 \001(\t\022\014\n\004Port\030\004 \001(\r\022\017\n\007LevelID"
  "\030\005 \001(\r\"4\n\022TeamHeartBeatCsReq\022\020\n\010playerID"
  "\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\"4\n\021LinkTeamSuccCsRe"
  "q\022\021\n\tAccountID\030\001 \001(\r\022\014\n\004succ\030\002 \001(\010\"!\n\016Ga"
  "meStartScReq\022\017\n\007LevelID\030\001 \001(\r\"D\n\020GameOve"
  "rCsNotify\022\021\n\taccountId\030\001 \001(\004\022\016\n\006roomId\030\002"
  " \001(\004\022\r\n\005score\030\003 \001(\004\"Q\n\021BattleMsgScNotify"
  "\022\021\n\taccountid\030\001 \001(\r\022\014\n\004addr\030\002 \001(\t\022\014\n\004por"
  "t\030\003 \001(\r\022\r\n\005token\030\004 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CsCmd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CsCmd_2eproto_sccs[26] = {
  &scc_info_AllRoomInfoNotify_CsCmd_2eproto.base,
  &scc_info_BattleMsgScNotify_CsCmd_2eproto.base,
  &scc_info_ChooseLevelCsReq_CsCmd_2eproto.base,
  &scc_info_ChooseLevelScRsp_CsCmd_2eproto.base,
  &scc_info_GameOverCsNotify_CsCmd_2eproto.base,
  &scc_info_GameStartScReq_CsCmd_2eproto.base,
  &scc_info_InRoomUserInfo_CsCmd_2eproto.base,
  &scc_info_LinkTeamSuccCsReq_CsCmd_2eproto.base,
  &scc_info_LoginAuthCsReq_CsCmd_2eproto.base,
  &scc_info_LoginAuthScRsp_CsCmd_2eproto.base,
  &scc_info_LoginCsReq_CsCmd_2eproto.base,
  &scc_info_LoginScRsp_CsCmd_2eproto.base,
  &scc_info_ReadyInRoomCsReq_CsCmd_2eproto.base,
  &scc_info_ReadyInRoomScRsp_CsCmd_2eproto.base,
  &scc_info_RoomInfoMsg_CsCmd_2eproto.base,
  &scc_info_RoomUserInfoNotify_CsCmd_2eproto.base,
  &scc_info_SCGate2ClientMsgNotify_CsCmd_2eproto.base,
  &scc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto.base,
  &scc_info_TeamHeartBeatCsReq_CsCmd_2eproto.base,
  &scc_info_TryCreateRoomCsReq_CsCmd_2eproto.base,
  &scc_info_TryCreateRoomScRsp_CsCmd_2eproto.base,
  &scc_info_TryEnterRoomCsReq_CsCmd_2eproto.base,
  &scc_info_TryEnterRoomScRsp_CsCmd_2eproto.base,
  &scc_info_TryLeaveRoomCsReq_CsCmd_2eproto.base,
  &scc_info_TryLeaveRoomScRsp_CsCmd_2eproto.base,
  &scc_info_TryLinkTeamScRsp_CsCmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CsCmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CsCmd_2eproto = {
  false, false, descriptor_table_protodef_CsCmd_2eproto, "CsCmd.proto", 2950,
  &descriptor_table_CsCmd_2eproto_once, descriptor_table_CsCmd_2eproto_sccs, descriptor_table_CsCmd_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_CsCmd_2eproto::offsets,
  file_level_metadata_CsCmd_2eproto, 26, file_level_enum_descriptors_CsCmd_2eproto, file_level_service_descriptors_CsCmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CsCmd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CsCmd_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginAuthScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[0];
}
bool LoginAuthScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp::RET_SUCC;
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp::RET_FAILED;
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp::RET_NOT_EXIST;
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp::RetCode_MIN;
constexpr LoginAuthScRsp_RetCode LoginAuthScRsp::RetCode_MAX;
constexpr int LoginAuthScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[1];
}
bool LoginScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginScRsp_RetCode LoginScRsp::RET_SUCC;
constexpr LoginScRsp_RetCode LoginScRsp::RET_FAILED;
constexpr LoginScRsp_RetCode LoginScRsp::RET_ACCOUNT_ERROR;
constexpr LoginScRsp_RetCode LoginScRsp::RET_RECONNECT;
constexpr LoginScRsp_RetCode LoginScRsp::RET_IN_GAME;
constexpr LoginScRsp_RetCode LoginScRsp::RET_REQ_INVALID;
constexpr LoginScRsp_RetCode LoginScRsp::RetCode_MIN;
constexpr LoginScRsp_RetCode LoginScRsp::RetCode_MAX;
constexpr int LoginScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryCreateRoomScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[2];
}
bool TryCreateRoomScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RET_SUCC;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RET_FAILED;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RET_ROOMID_EXIST;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RET_USER_IN_ROOM;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RetCode_MIN;
constexpr TryCreateRoomScRsp_RetCode TryCreateRoomScRsp::RetCode_MAX;
constexpr int TryCreateRoomScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryEnterRoomScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[3];
}
bool TryEnterRoomScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_SUCC;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_FAILED;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_ROOM_NOT_EXIST;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_ROOM_FULL;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_ROOM_BUSY;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_IN_ROOM;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RET_REQ_INVALID;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RetCode_MIN;
constexpr TryEnterRoomScRsp_RetCode TryEnterRoomScRsp::RetCode_MAX;
constexpr int TryEnterRoomScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryLeaveRoomScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[4];
}
bool TryLeaveRoomScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RET_SUCC;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RET_FAILED;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RET_NOT_IN_ROOM;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RET_ROOM_BUSY;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RET_REQ_INVALID;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RetCode_MIN;
constexpr TryLeaveRoomScRsp_RetCode TryLeaveRoomScRsp::RetCode_MAX;
constexpr int TryLeaveRoomScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChooseLevelScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[5];
}
bool ChooseLevelScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RET_SUCC;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RET_REQ_INVALID;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RET_ROOM_BUSY;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RET_LEVEL_NOT_EXIST;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RetCode_MIN;
constexpr ChooseLevelScRsp_RetCode ChooseLevelScRsp::RetCode_MAX;
constexpr int ChooseLevelScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadyInRoomScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CsCmd_2eproto);
  return file_level_enum_descriptors_CsCmd_2eproto[6];
}
bool ReadyInRoomScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_SUCC;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_FAILED;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_REQ_INVALID;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_ROLE_NOT_SELECTED;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_USER_NOT_READY;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RET_USER_BEEN_READY;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RetCode_MIN;
constexpr ReadyInRoomScRsp_RetCode ReadyInRoomScRsp::RetCode_MAX;
constexpr int ReadyInRoomScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LoginAuthCsReq::_Internal {
 public:
};

LoginAuthCsReq::LoginAuthCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LoginAuthCsReq)
}
LoginAuthCsReq::LoginAuthCsReq(const LoginAuthCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwd().empty()) {
    passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passwd(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.LoginAuthCsReq)
}

void LoginAuthCsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginAuthCsReq_CsCmd_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginAuthCsReq::~LoginAuthCsReq() {
  // @@protoc_insertion_point(destructor:pb.LoginAuthCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginAuthCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginAuthCsReq::ArenaDtor(void* object) {
  LoginAuthCsReq* _this = reinterpret_cast< LoginAuthCsReq* >(object);
  (void)_this;
}
void LoginAuthCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAuthCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAuthCsReq& LoginAuthCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAuthCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void LoginAuthCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LoginAuthCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  passwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginAuthCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LoginAuthCsReq.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LoginAuthCsReq.passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAuthCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LoginAuthCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LoginAuthCsReq.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LoginAuthCsReq.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LoginAuthCsReq)
  return target;
}

size_t LoginAuthCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LoginAuthCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAuthCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LoginAuthCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAuthCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginAuthCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LoginAuthCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LoginAuthCsReq)
    MergeFrom(*source);
  }
}

void LoginAuthCsReq::MergeFrom(const LoginAuthCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LoginAuthCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.passwd().size() > 0) {
    _internal_set_passwd(from._internal_passwd());
  }
}

void LoginAuthCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LoginAuthCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAuthCsReq::CopyFrom(const LoginAuthCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LoginAuthCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAuthCsReq::IsInitialized() const {
  return true;
}

void LoginAuthCsReq::InternalSwap(LoginAuthCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAuthCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginAuthScRsp::_Internal {
 public:
};

LoginAuthScRsp::LoginAuthScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LoginAuthScRsp)
}
LoginAuthScRsp::LoginAuthScRsp(const LoginAuthScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:pb.LoginAuthScRsp)
}

void LoginAuthScRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginAuthScRsp_CsCmd_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
}

LoginAuthScRsp::~LoginAuthScRsp() {
  // @@protoc_insertion_point(destructor:pb.LoginAuthScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginAuthScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginAuthScRsp::ArenaDtor(void* object) {
  LoginAuthScRsp* _this = reinterpret_cast< LoginAuthScRsp* >(object);
  (void)_this;
}
void LoginAuthScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAuthScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAuthScRsp& LoginAuthScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAuthScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void LoginAuthScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LoginAuthScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginAuthScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.LoginAuthScRsp.RetCode retCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::LoginAuthScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LoginAuthScRsp.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accountId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAuthScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LoginAuthScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.LoginAuthScRsp.RetCode retCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LoginAuthScRsp.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // uint32 accountId = 3;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LoginAuthScRsp)
  return target;
}

size_t LoginAuthScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LoginAuthScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .pb.LoginAuthScRsp.RetCode retCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 accountId = 3;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAuthScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LoginAuthScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAuthScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginAuthScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LoginAuthScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LoginAuthScRsp)
    MergeFrom(*source);
  }
}

void LoginAuthScRsp::MergeFrom(const LoginAuthScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LoginAuthScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void LoginAuthScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LoginAuthScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAuthScRsp::CopyFrom(const LoginAuthScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LoginAuthScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAuthScRsp::IsInitialized() const {
  return true;
}

void LoginAuthScRsp::InternalSwap(LoginAuthScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginAuthScRsp, accountid_)
      + sizeof(LoginAuthScRsp::accountid_)
      - PROTOBUF_FIELD_OFFSET(LoginAuthScRsp, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAuthScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginCsReq::_Internal {
 public:
};

LoginCsReq::LoginCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LoginCsReq)
}
LoginCsReq::LoginCsReq(const LoginCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:pb.LoginCsReq)
}

void LoginCsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginCsReq_CsCmd_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

LoginCsReq::~LoginCsReq() {
  // @@protoc_insertion_point(destructor:pb.LoginCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginCsReq::ArenaDtor(void* object) {
  LoginCsReq* _this = reinterpret_cast< LoginCsReq* >(object);
  (void)_this;
}
void LoginCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginCsReq& LoginCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void LoginCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LoginCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  accountid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LoginCsReq.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accountId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LoginCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LoginCsReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 accountId = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LoginCsReq)
  return target;
}

size_t LoginCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LoginCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 accountId = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LoginCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LoginCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LoginCsReq)
    MergeFrom(*source);
  }
}

void LoginCsReq::MergeFrom(const LoginCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LoginCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void LoginCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LoginCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCsReq::CopyFrom(const LoginCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LoginCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCsReq::IsInitialized() const {
  return true;
}

void LoginCsReq::InternalSwap(LoginCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginScRsp::_Internal {
 public:
};

LoginScRsp::LoginScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LoginScRsp)
}
LoginScRsp::LoginScRsp(const LoginScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&isbattling_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(isbattling_));
  // @@protoc_insertion_point(copy_constructor:pb.LoginScRsp)
}

void LoginScRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isbattling_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(isbattling_));
}

LoginScRsp::~LoginScRsp() {
  // @@protoc_insertion_point(destructor:pb.LoginScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginScRsp::ArenaDtor(void* object) {
  LoginScRsp* _this = reinterpret_cast< LoginScRsp* >(object);
  (void)_this;
}
void LoginScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginScRsp& LoginScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void LoginScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LoginScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbattling_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(isbattling_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.LoginScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::LoginScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsinRoom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isinroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsBattling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isbattling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LoginScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.LoginScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // uint32 accountid = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // bool IsinRoom = 3;
  if (this->isinroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isinroom(), target);
  }

  // bool IsBattling = 4;
  if (this->isbattling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isbattling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LoginScRsp)
  return target;
}

size_t LoginScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LoginScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.LoginScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 accountid = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // bool IsinRoom = 3;
  if (this->isinroom() != 0) {
    total_size += 1 + 1;
  }

  // bool IsBattling = 4;
  if (this->isbattling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LoginScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LoginScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LoginScRsp)
    MergeFrom(*source);
  }
}

void LoginScRsp::MergeFrom(const LoginScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LoginScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.isinroom() != 0) {
    _internal_set_isinroom(from._internal_isinroom());
  }
  if (from.isbattling() != 0) {
    _internal_set_isbattling(from._internal_isbattling());
  }
}

void LoginScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LoginScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginScRsp::CopyFrom(const LoginScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LoginScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginScRsp::IsInitialized() const {
  return true;
}

void LoginScRsp::InternalSwap(LoginScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginScRsp, isbattling_)
      + sizeof(LoginScRsp::isbattling_)
      - PROTOBUF_FIELD_OFFSET(LoginScRsp, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoomInfoMsg::_Internal {
 public:
};

RoomInfoMsg::RoomInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RoomInfoMsg)
}
RoomInfoMsg::RoomInfoMsg(const RoomInfoMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArena());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomInfoMsg)
}

void RoomInfoMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInfoMsg_CsCmd_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(status_));
}

RoomInfoMsg::~RoomInfoMsg() {
  // @@protoc_insertion_point(destructor:pb.RoomInfoMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomInfoMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomInfoMsg::ArenaDtor(void* object) {
  RoomInfoMsg* _this = reinterpret_cast< RoomInfoMsg* >(object);
  (void)_this;
}
void RoomInfoMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfoMsg& RoomInfoMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInfoMsg_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void RoomInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomInfoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfoMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_user_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_user_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_user_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RoomName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.RoomInfoMsg.RoomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInfoMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomInfoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomid(), target);
  }

  // uint32 max_user_count = 2;
  if (this->max_user_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_user_count(), target);
  }

  // uint32 cur_user_count = 3;
  if (this->cur_user_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cur_user_count(), target);
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  // string RoomName = 6;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.RoomInfoMsg.RoomName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomInfoMsg)
  return target;
}

size_t RoomInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomInfoMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RoomName = 6;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 max_user_count = 2;
  if (this->max_user_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_user_count());
  }

  // uint32 cur_user_count = 3;
  if (this->cur_user_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user_count());
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfoMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfoMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInfoMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomInfoMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomInfoMsg)
    MergeFrom(*source);
  }
}

void RoomInfoMsg::MergeFrom(const RoomInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.max_user_count() != 0) {
    _internal_set_max_user_count(from._internal_max_user_count());
  }
  if (from.cur_user_count() != 0) {
    _internal_set_cur_user_count(from._internal_cur_user_count());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RoomInfoMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfoMsg::CopyFrom(const RoomInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoMsg::IsInitialized() const {
  return true;
}

void RoomInfoMsg::InternalSwap(RoomInfoMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfoMsg, status_)
      + sizeof(RoomInfoMsg::status_)
      - PROTOBUF_FIELD_OFFSET(RoomInfoMsg, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGate2ClientMsgNotify::_Internal {
 public:
  static const ::pb::RoomInfoMsg& roommsg(const SCGate2ClientMsgNotify* msg);
};

const ::pb::RoomInfoMsg&
SCGate2ClientMsgNotify::_Internal::roommsg(const SCGate2ClientMsgNotify* msg) {
  return *msg->roommsg_;
}
SCGate2ClientMsgNotify::SCGate2ClientMsgNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SCGate2ClientMsgNotify)
}
SCGate2ClientMsgNotify::SCGate2ClientMsgNotify(const SCGate2ClientMsgNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roommsg()) {
    roommsg_ = new ::pb::RoomInfoMsg(*from.roommsg_);
  } else {
    roommsg_ = nullptr;
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:pb.SCGate2ClientMsgNotify)
}

void SCGate2ClientMsgNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGate2ClientMsgNotify_CsCmd_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roommsg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&roommsg_)) + sizeof(accountid_));
}

SCGate2ClientMsgNotify::~SCGate2ClientMsgNotify() {
  // @@protoc_insertion_point(destructor:pb.SCGate2ClientMsgNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGate2ClientMsgNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roommsg_;
}

void SCGate2ClientMsgNotify::ArenaDtor(void* object) {
  SCGate2ClientMsgNotify* _this = reinterpret_cast< SCGate2ClientMsgNotify* >(object);
  (void)_this;
}
void SCGate2ClientMsgNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGate2ClientMsgNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGate2ClientMsgNotify& SCGate2ClientMsgNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGate2ClientMsgNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void SCGate2ClientMsgNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SCGate2ClientMsgNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArena() == nullptr && roommsg_ != nullptr) {
    delete roommsg_;
  }
  roommsg_ = nullptr;
  accountid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGate2ClientMsgNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RoomInfoMsg roommsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roommsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.InRoomUserInfo users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGate2ClientMsgNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SCGate2ClientMsgNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // .pb.RoomInfoMsg roommsg = 2;
  if (this->has_roommsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roommsg(this), target, stream);
  }

  // repeated .pb.InRoomUserInfo users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SCGate2ClientMsgNotify)
  return target;
}

size_t SCGate2ClientMsgNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SCGate2ClientMsgNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.InRoomUserInfo users = 3;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.RoomInfoMsg roommsg = 2;
  if (this->has_roommsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roommsg_);
  }

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGate2ClientMsgNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SCGate2ClientMsgNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGate2ClientMsgNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGate2ClientMsgNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SCGate2ClientMsgNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SCGate2ClientMsgNotify)
    MergeFrom(*source);
  }
}

void SCGate2ClientMsgNotify::MergeFrom(const SCGate2ClientMsgNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SCGate2ClientMsgNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_roommsg()) {
    _internal_mutable_roommsg()->::pb::RoomInfoMsg::MergeFrom(from._internal_roommsg());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void SCGate2ClientMsgNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SCGate2ClientMsgNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGate2ClientMsgNotify::CopyFrom(const SCGate2ClientMsgNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SCGate2ClientMsgNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGate2ClientMsgNotify::IsInitialized() const {
  return true;
}

void SCGate2ClientMsgNotify::InternalSwap(SCGate2ClientMsgNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGate2ClientMsgNotify, accountid_)
      + sizeof(SCGate2ClientMsgNotify::accountid_)
      - PROTOBUF_FIELD_OFFSET(SCGate2ClientMsgNotify, roommsg_)>(
          reinterpret_cast<char*>(&roommsg_),
          reinterpret_cast<char*>(&other->roommsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGate2ClientMsgNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNode2ClientBattleMsgNotify::_Internal {
 public:
};

SCNode2ClientBattleMsgNotify::SCNode2ClientBattleMsgNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SCNode2ClientBattleMsgNotify)
}
SCNode2ClientBattleMsgNotify::SCNode2ClientBattleMsgNotify(const SCNode2ClientBattleMsgNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:pb.SCNode2ClientBattleMsgNotify)
}

void SCNode2ClientBattleMsgNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
}

SCNode2ClientBattleMsgNotify::~SCNode2ClientBattleMsgNotify() {
  // @@protoc_insertion_point(destructor:pb.SCNode2ClientBattleMsgNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNode2ClientBattleMsgNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCNode2ClientBattleMsgNotify::ArenaDtor(void* object) {
  SCNode2ClientBattleMsgNotify* _this = reinterpret_cast< SCNode2ClientBattleMsgNotify* >(object);
  (void)_this;
}
void SCNode2ClientBattleMsgNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNode2ClientBattleMsgNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNode2ClientBattleMsgNotify& SCNode2ClientBattleMsgNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNode2ClientBattleMsgNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void SCNode2ClientBattleMsgNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SCNode2ClientBattleMsgNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNode2ClientBattleMsgNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SCNode2ClientBattleMsgNotify.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SCNode2ClientBattleMsgNotify.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNode2ClientBattleMsgNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SCNode2ClientBattleMsgNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SCNode2ClientBattleMsgNotify.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SCNode2ClientBattleMsgNotify.token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SCNode2ClientBattleMsgNotify)
  return target;
}

size_t SCNode2ClientBattleMsgNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SCNode2ClientBattleMsgNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNode2ClientBattleMsgNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SCNode2ClientBattleMsgNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNode2ClientBattleMsgNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNode2ClientBattleMsgNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SCNode2ClientBattleMsgNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SCNode2ClientBattleMsgNotify)
    MergeFrom(*source);
  }
}

void SCNode2ClientBattleMsgNotify::MergeFrom(const SCNode2ClientBattleMsgNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SCNode2ClientBattleMsgNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void SCNode2ClientBattleMsgNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SCNode2ClientBattleMsgNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNode2ClientBattleMsgNotify::CopyFrom(const SCNode2ClientBattleMsgNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SCNode2ClientBattleMsgNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNode2ClientBattleMsgNotify::IsInitialized() const {
  return true;
}

void SCNode2ClientBattleMsgNotify::InternalSwap(SCNode2ClientBattleMsgNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNode2ClientBattleMsgNotify, port_)
      + sizeof(SCNode2ClientBattleMsgNotify::port_)
      - PROTOBUF_FIELD_OFFSET(SCNode2ClientBattleMsgNotify, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNode2ClientBattleMsgNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllRoomInfoNotify::_Internal {
 public:
};

AllRoomInfoNotify::AllRoomInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  room_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.AllRoomInfoNotify)
}
AllRoomInfoNotify::AllRoomInfoNotify(const AllRoomInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      room_info_list_(from.room_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_count_ = from.room_count_;
  // @@protoc_insertion_point(copy_constructor:pb.AllRoomInfoNotify)
}

void AllRoomInfoNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllRoomInfoNotify_CsCmd_2eproto.base);
  room_count_ = 0u;
}

AllRoomInfoNotify::~AllRoomInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.AllRoomInfoNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllRoomInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllRoomInfoNotify::ArenaDtor(void* object) {
  AllRoomInfoNotify* _this = reinterpret_cast< AllRoomInfoNotify* >(object);
  (void)_this;
}
void AllRoomInfoNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllRoomInfoNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllRoomInfoNotify& AllRoomInfoNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllRoomInfoNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void AllRoomInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AllRoomInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_info_list_.Clear();
  room_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllRoomInfoNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 room_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.RoomInfoMsg room_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_room_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllRoomInfoNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AllRoomInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_count = 1;
  if (this->room_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_room_count(), target);
  }

  // repeated .pb.RoomInfoMsg room_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_room_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_room_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AllRoomInfoNotify)
  return target;
}

size_t AllRoomInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AllRoomInfoNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.RoomInfoMsg room_info_list = 2;
  total_size += 1UL * this->_internal_room_info_list_size();
  for (const auto& msg : this->room_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 room_count = 1;
  if (this->room_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllRoomInfoNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AllRoomInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AllRoomInfoNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllRoomInfoNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AllRoomInfoNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AllRoomInfoNotify)
    MergeFrom(*source);
  }
}

void AllRoomInfoNotify::MergeFrom(const AllRoomInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AllRoomInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_info_list_.MergeFrom(from.room_info_list_);
  if (from.room_count() != 0) {
    _internal_set_room_count(from._internal_room_count());
  }
}

void AllRoomInfoNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AllRoomInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRoomInfoNotify::CopyFrom(const AllRoomInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AllRoomInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllRoomInfoNotify::IsInitialized() const {
  return true;
}

void AllRoomInfoNotify::InternalSwap(AllRoomInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  room_info_list_.InternalSwap(&other->room_info_list_);
  swap(room_count_, other->room_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllRoomInfoNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryCreateRoomCsReq::_Internal {
 public:
};

TryCreateRoomCsReq::TryCreateRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryCreateRoomCsReq)
}
TryCreateRoomCsReq::TryCreateRoomCsReq(const TryCreateRoomCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxusercount_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(maxusercount_));
  // @@protoc_insertion_point(copy_constructor:pb.TryCreateRoomCsReq)
}

void TryCreateRoomCsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TryCreateRoomCsReq_CsCmd_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxusercount_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(maxusercount_));
}

TryCreateRoomCsReq::~TryCreateRoomCsReq() {
  // @@protoc_insertion_point(destructor:pb.TryCreateRoomCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryCreateRoomCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TryCreateRoomCsReq::ArenaDtor(void* object) {
  TryCreateRoomCsReq* _this = reinterpret_cast< TryCreateRoomCsReq* >(object);
  (void)_this;
}
void TryCreateRoomCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryCreateRoomCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryCreateRoomCsReq& TryCreateRoomCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryCreateRoomCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryCreateRoomCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryCreateRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxusercount_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(maxusercount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryCreateRoomCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxUserCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxusercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TryCreateRoomCsReq.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryCreateRoomCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryCreateRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxusercount(), target);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TryCreateRoomCsReq.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryCreateRoomCsReq)
  return target;
}

size_t TryCreateRoomCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryCreateRoomCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxusercount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryCreateRoomCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryCreateRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TryCreateRoomCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryCreateRoomCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryCreateRoomCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryCreateRoomCsReq)
    MergeFrom(*source);
  }
}

void TryCreateRoomCsReq::MergeFrom(const TryCreateRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryCreateRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.maxusercount() != 0) {
    _internal_set_maxusercount(from._internal_maxusercount());
  }
}

void TryCreateRoomCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryCreateRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryCreateRoomCsReq::CopyFrom(const TryCreateRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryCreateRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryCreateRoomCsReq::IsInitialized() const {
  return true;
}

void TryCreateRoomCsReq::InternalSwap(TryCreateRoomCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryCreateRoomCsReq, maxusercount_)
      + sizeof(TryCreateRoomCsReq::maxusercount_)
      - PROTOBUF_FIELD_OFFSET(TryCreateRoomCsReq, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryCreateRoomCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryCreateRoomScRsp::_Internal {
 public:
};

TryCreateRoomScRsp::TryCreateRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryCreateRoomScRsp)
}
TryCreateRoomScRsp::TryCreateRoomScRsp(const TryCreateRoomScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pb.TryCreateRoomScRsp)
}

void TryCreateRoomScRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
}

TryCreateRoomScRsp::~TryCreateRoomScRsp() {
  // @@protoc_insertion_point(destructor:pb.TryCreateRoomScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryCreateRoomScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryCreateRoomScRsp::ArenaDtor(void* object) {
  TryCreateRoomScRsp* _this = reinterpret_cast< TryCreateRoomScRsp* >(object);
  (void)_this;
}
void TryCreateRoomScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryCreateRoomScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryCreateRoomScRsp& TryCreateRoomScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryCreateRoomScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryCreateRoomScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryCreateRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryCreateRoomScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TryCreateRoomScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::TryCreateRoomScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // uint64 RoomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxUserCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxusercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryCreateRoomScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryCreateRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TryCreateRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxusercount(), target);
  }

  // uint32 Level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryCreateRoomScRsp)
  return target;
}

size_t TryCreateRoomScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryCreateRoomScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // .pb.TryCreateRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxusercount());
  }

  // uint32 Level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryCreateRoomScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryCreateRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TryCreateRoomScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryCreateRoomScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryCreateRoomScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryCreateRoomScRsp)
    MergeFrom(*source);
  }
}

void TryCreateRoomScRsp::MergeFrom(const TryCreateRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryCreateRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.maxusercount() != 0) {
    _internal_set_maxusercount(from._internal_maxusercount());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void TryCreateRoomScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryCreateRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryCreateRoomScRsp::CopyFrom(const TryCreateRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryCreateRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryCreateRoomScRsp::IsInitialized() const {
  return true;
}

void TryCreateRoomScRsp::InternalSwap(TryCreateRoomScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryCreateRoomScRsp, level_)
      + sizeof(TryCreateRoomScRsp::level_)
      - PROTOBUF_FIELD_OFFSET(TryCreateRoomScRsp, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryCreateRoomScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryEnterRoomCsReq::_Internal {
 public:
};

TryEnterRoomCsReq::TryEnterRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryEnterRoomCsReq)
}
TryEnterRoomCsReq::TryEnterRoomCsReq(const TryEnterRoomCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:pb.TryEnterRoomCsReq)
}

void TryEnterRoomCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(accountid_));
}

TryEnterRoomCsReq::~TryEnterRoomCsReq() {
  // @@protoc_insertion_point(destructor:pb.TryEnterRoomCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryEnterRoomCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryEnterRoomCsReq::ArenaDtor(void* object) {
  TryEnterRoomCsReq* _this = reinterpret_cast< TryEnterRoomCsReq* >(object);
  (void)_this;
}
void TryEnterRoomCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryEnterRoomCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryEnterRoomCsReq& TryEnterRoomCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryEnterRoomCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryEnterRoomCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryEnterRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(accountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryEnterRoomCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryEnterRoomCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryEnterRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryEnterRoomCsReq)
  return target;
}

size_t TryEnterRoomCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryEnterRoomCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryEnterRoomCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryEnterRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TryEnterRoomCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryEnterRoomCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryEnterRoomCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryEnterRoomCsReq)
    MergeFrom(*source);
  }
}

void TryEnterRoomCsReq::MergeFrom(const TryEnterRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryEnterRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void TryEnterRoomCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryEnterRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryEnterRoomCsReq::CopyFrom(const TryEnterRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryEnterRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryEnterRoomCsReq::IsInitialized() const {
  return true;
}

void TryEnterRoomCsReq::InternalSwap(TryEnterRoomCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryEnterRoomCsReq, accountid_)
      + sizeof(TryEnterRoomCsReq::accountid_)
      - PROTOBUF_FIELD_OFFSET(TryEnterRoomCsReq, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryEnterRoomCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryEnterRoomScRsp::_Internal {
 public:
};

TryEnterRoomScRsp::TryEnterRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryEnterRoomScRsp)
}
TryEnterRoomScRsp::TryEnterRoomScRsp(const TryEnterRoomScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pb.TryEnterRoomScRsp)
}

void TryEnterRoomScRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
}

TryEnterRoomScRsp::~TryEnterRoomScRsp() {
  // @@protoc_insertion_point(destructor:pb.TryEnterRoomScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryEnterRoomScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryEnterRoomScRsp::ArenaDtor(void* object) {
  TryEnterRoomScRsp* _this = reinterpret_cast< TryEnterRoomScRsp* >(object);
  (void)_this;
}
void TryEnterRoomScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryEnterRoomScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryEnterRoomScRsp& TryEnterRoomScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryEnterRoomScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryEnterRoomScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryEnterRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryEnterRoomScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TryEnterRoomScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::TryEnterRoomScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxUserCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxusercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryEnterRoomScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryEnterRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TryEnterRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxusercount(), target);
  }

  // uint32 Level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryEnterRoomScRsp)
  return target;
}

size_t TryEnterRoomScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryEnterRoomScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // .pb.TryEnterRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 MaxUserCount = 3;
  if (this->maxusercount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxusercount());
  }

  // uint32 Level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryEnterRoomScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryEnterRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TryEnterRoomScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryEnterRoomScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryEnterRoomScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryEnterRoomScRsp)
    MergeFrom(*source);
  }
}

void TryEnterRoomScRsp::MergeFrom(const TryEnterRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryEnterRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.maxusercount() != 0) {
    _internal_set_maxusercount(from._internal_maxusercount());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void TryEnterRoomScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryEnterRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryEnterRoomScRsp::CopyFrom(const TryEnterRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryEnterRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryEnterRoomScRsp::IsInitialized() const {
  return true;
}

void TryEnterRoomScRsp::InternalSwap(TryEnterRoomScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryEnterRoomScRsp, level_)
      + sizeof(TryEnterRoomScRsp::level_)
      - PROTOBUF_FIELD_OFFSET(TryEnterRoomScRsp, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryEnterRoomScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryLeaveRoomCsReq::_Internal {
 public:
};

TryLeaveRoomCsReq::TryLeaveRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryLeaveRoomCsReq)
}
TryLeaveRoomCsReq::TryLeaveRoomCsReq(const TryLeaveRoomCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:pb.TryLeaveRoomCsReq)
}

void TryLeaveRoomCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(roomid_));
}

TryLeaveRoomCsReq::~TryLeaveRoomCsReq() {
  // @@protoc_insertion_point(destructor:pb.TryLeaveRoomCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryLeaveRoomCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryLeaveRoomCsReq::ArenaDtor(void* object) {
  TryLeaveRoomCsReq* _this = reinterpret_cast< TryLeaveRoomCsReq* >(object);
  (void)_this;
}
void TryLeaveRoomCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryLeaveRoomCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryLeaveRoomCsReq& TryLeaveRoomCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryLeaveRoomCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryLeaveRoomCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryLeaveRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryLeaveRoomCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryLeaveRoomCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryLeaveRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryLeaveRoomCsReq)
  return target;
}

size_t TryLeaveRoomCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryLeaveRoomCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryLeaveRoomCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryLeaveRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TryLeaveRoomCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryLeaveRoomCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryLeaveRoomCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryLeaveRoomCsReq)
    MergeFrom(*source);
  }
}

void TryLeaveRoomCsReq::MergeFrom(const TryLeaveRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryLeaveRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void TryLeaveRoomCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryLeaveRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryLeaveRoomCsReq::CopyFrom(const TryLeaveRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryLeaveRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryLeaveRoomCsReq::IsInitialized() const {
  return true;
}

void TryLeaveRoomCsReq::InternalSwap(TryLeaveRoomCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryLeaveRoomCsReq, roomid_)
      + sizeof(TryLeaveRoomCsReq::roomid_)
      - PROTOBUF_FIELD_OFFSET(TryLeaveRoomCsReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryLeaveRoomCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryLeaveRoomScRsp::_Internal {
 public:
};

TryLeaveRoomScRsp::TryLeaveRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryLeaveRoomScRsp)
}
TryLeaveRoomScRsp::TryLeaveRoomScRsp(const TryLeaveRoomScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:pb.TryLeaveRoomScRsp)
}

void TryLeaveRoomScRsp::SharedCtor() {
  retcode_ = 0;
}

TryLeaveRoomScRsp::~TryLeaveRoomScRsp() {
  // @@protoc_insertion_point(destructor:pb.TryLeaveRoomScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryLeaveRoomScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryLeaveRoomScRsp::ArenaDtor(void* object) {
  TryLeaveRoomScRsp* _this = reinterpret_cast< TryLeaveRoomScRsp* >(object);
  (void)_this;
}
void TryLeaveRoomScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryLeaveRoomScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryLeaveRoomScRsp& TryLeaveRoomScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryLeaveRoomScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryLeaveRoomScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryLeaveRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryLeaveRoomScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TryLeaveRoomScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::TryLeaveRoomScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryLeaveRoomScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryLeaveRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TryLeaveRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryLeaveRoomScRsp)
  return target;
}

size_t TryLeaveRoomScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryLeaveRoomScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.TryLeaveRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryLeaveRoomScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryLeaveRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TryLeaveRoomScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryLeaveRoomScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryLeaveRoomScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryLeaveRoomScRsp)
    MergeFrom(*source);
  }
}

void TryLeaveRoomScRsp::MergeFrom(const TryLeaveRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryLeaveRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void TryLeaveRoomScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryLeaveRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryLeaveRoomScRsp::CopyFrom(const TryLeaveRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryLeaveRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryLeaveRoomScRsp::IsInitialized() const {
  return true;
}

void TryLeaveRoomScRsp::InternalSwap(TryLeaveRoomScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TryLeaveRoomScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InRoomUserInfo::_Internal {
 public:
};

InRoomUserInfo::InRoomUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.InRoomUserInfo)
}
InRoomUserInfo::InRoomUserInfo(const InRoomUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&readystate_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(readystate_));
  // @@protoc_insertion_point(copy_constructor:pb.InRoomUserInfo)
}

void InRoomUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InRoomUserInfo_CsCmd_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&readystate_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(readystate_));
}

InRoomUserInfo::~InRoomUserInfo() {
  // @@protoc_insertion_point(destructor:pb.InRoomUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InRoomUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InRoomUserInfo::ArenaDtor(void* object) {
  InRoomUserInfo* _this = reinterpret_cast< InRoomUserInfo* >(object);
  (void)_this;
}
void InRoomUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InRoomUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InRoomUserInfo& InRoomUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InRoomUserInfo_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void InRoomUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InRoomUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readystate_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(readystate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InRoomUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 isHost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ishost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ReadyState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          readystate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.InRoomUserInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InRoomUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InRoomUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint32 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 isHost = 3;
  if (this->ishost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ishost(), target);
  }

  // uint32 ReadyState = 4;
  if (this->readystate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_readystate(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.InRoomUserInfo.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InRoomUserInfo)
  return target;
}

size_t InRoomUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InRoomUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // uint32 isHost = 3;
  if (this->ishost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ishost());
  }

  // uint32 ReadyState = 4;
  if (this->readystate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_readystate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InRoomUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InRoomUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InRoomUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InRoomUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InRoomUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InRoomUserInfo)
    MergeFrom(*source);
  }
}

void InRoomUserInfo::MergeFrom(const InRoomUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InRoomUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.ishost() != 0) {
    _internal_set_ishost(from._internal_ishost());
  }
  if (from.readystate() != 0) {
    _internal_set_readystate(from._internal_readystate());
  }
}

void InRoomUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InRoomUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InRoomUserInfo::CopyFrom(const InRoomUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InRoomUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InRoomUserInfo::IsInitialized() const {
  return true;
}

void InRoomUserInfo::InternalSwap(InRoomUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InRoomUserInfo, readystate_)
      + sizeof(InRoomUserInfo::readystate_)
      - PROTOBUF_FIELD_OFFSET(InRoomUserInfo, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InRoomUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoomUserInfoNotify::_Internal {
 public:
};

RoomUserInfoNotify::RoomUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  userlists_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RoomUserInfoNotify)
}
RoomUserInfoNotify::RoomUserInfoNotify(const RoomUserInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      userlists_(from.userlists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomUserInfoNotify)
}

void RoomUserInfoNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomUserInfoNotify_CsCmd_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
}

RoomUserInfoNotify::~RoomUserInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.RoomUserInfoNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomUserInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomUserInfoNotify::ArenaDtor(void* object) {
  RoomUserInfoNotify* _this = reinterpret_cast< RoomUserInfoNotify* >(object);
  (void)_this;
}
void RoomUserInfoNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomUserInfoNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomUserInfoNotify& RoomUserInfoNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomUserInfoNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void RoomUserInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userlists_.Clear();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomUserInfoNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoomID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxUserCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxusercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.InRoomUserInfo userlists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userlists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomUserInfoNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoomID = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomid(), target);
  }

  // uint32 MaxUserCount = 2;
  if (this->maxusercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxusercount(), target);
  }

  // uint32 Level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated .pb.InRoomUserInfo userlists = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_userlists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_userlists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomUserInfoNotify)
  return target;
}

size_t RoomUserInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomUserInfoNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.InRoomUserInfo userlists = 4;
  total_size += 1UL * this->_internal_userlists_size();
  for (const auto& msg : this->userlists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 RoomID = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 MaxUserCount = 2;
  if (this->maxusercount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxusercount());
  }

  // uint32 Level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomUserInfoNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomUserInfoNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomUserInfoNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomUserInfoNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomUserInfoNotify)
    MergeFrom(*source);
  }
}

void RoomUserInfoNotify::MergeFrom(const RoomUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userlists_.MergeFrom(from.userlists_);
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.maxusercount() != 0) {
    _internal_set_maxusercount(from._internal_maxusercount());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void RoomUserInfoNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUserInfoNotify::CopyFrom(const RoomUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUserInfoNotify::IsInitialized() const {
  return true;
}

void RoomUserInfoNotify::InternalSwap(RoomUserInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userlists_.InternalSwap(&other->userlists_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomUserInfoNotify, level_)
      + sizeof(RoomUserInfoNotify::level_)
      - PROTOBUF_FIELD_OFFSET(RoomUserInfoNotify, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomUserInfoNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChooseLevelCsReq::_Internal {
 public:
};

ChooseLevelCsReq::ChooseLevelCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ChooseLevelCsReq)
}
ChooseLevelCsReq::ChooseLevelCsReq(const ChooseLevelCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(levelid_));
  // @@protoc_insertion_point(copy_constructor:pb.ChooseLevelCsReq)
}

void ChooseLevelCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(levelid_));
}

ChooseLevelCsReq::~ChooseLevelCsReq() {
  // @@protoc_insertion_point(destructor:pb.ChooseLevelCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChooseLevelCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChooseLevelCsReq::ArenaDtor(void* object) {
  ChooseLevelCsReq* _this = reinterpret_cast< ChooseLevelCsReq* >(object);
  (void)_this;
}
void ChooseLevelCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChooseLevelCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChooseLevelCsReq& ChooseLevelCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChooseLevelCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void ChooseLevelCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ChooseLevelCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(levelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChooseLevelCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LevelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          levelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChooseLevelCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ChooseLevelCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountId = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 LevelId = 3;
  if (this->levelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_levelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ChooseLevelCsReq)
  return target;
}

size_t ChooseLevelCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ChooseLevelCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountId = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 LevelId = 3;
  if (this->levelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChooseLevelCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ChooseLevelCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseLevelCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChooseLevelCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ChooseLevelCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ChooseLevelCsReq)
    MergeFrom(*source);
  }
}

void ChooseLevelCsReq::MergeFrom(const ChooseLevelCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ChooseLevelCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.levelid() != 0) {
    _internal_set_levelid(from._internal_levelid());
  }
}

void ChooseLevelCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ChooseLevelCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseLevelCsReq::CopyFrom(const ChooseLevelCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ChooseLevelCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseLevelCsReq::IsInitialized() const {
  return true;
}

void ChooseLevelCsReq::InternalSwap(ChooseLevelCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChooseLevelCsReq, levelid_)
      + sizeof(ChooseLevelCsReq::levelid_)
      - PROTOBUF_FIELD_OFFSET(ChooseLevelCsReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseLevelCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChooseLevelScRsp::_Internal {
 public:
};

ChooseLevelScRsp::ChooseLevelScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ChooseLevelScRsp)
}
ChooseLevelScRsp::ChooseLevelScRsp(const ChooseLevelScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(levelid_));
  // @@protoc_insertion_point(copy_constructor:pb.ChooseLevelScRsp)
}

void ChooseLevelScRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(levelid_));
}

ChooseLevelScRsp::~ChooseLevelScRsp() {
  // @@protoc_insertion_point(destructor:pb.ChooseLevelScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChooseLevelScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChooseLevelScRsp::ArenaDtor(void* object) {
  ChooseLevelScRsp* _this = reinterpret_cast< ChooseLevelScRsp* >(object);
  (void)_this;
}
void ChooseLevelScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChooseLevelScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChooseLevelScRsp& ChooseLevelScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChooseLevelScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void ChooseLevelScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ChooseLevelScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(levelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChooseLevelScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ChooseLevelScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::ChooseLevelScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LevelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          levelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChooseLevelScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ChooseLevelScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ChooseLevelScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 LevelId = 3;
  if (this->levelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_levelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ChooseLevelScRsp)
  return target;
}

size_t ChooseLevelScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ChooseLevelScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // .pb.ChooseLevelScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 LevelId = 3;
  if (this->levelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChooseLevelScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ChooseLevelScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseLevelScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChooseLevelScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ChooseLevelScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ChooseLevelScRsp)
    MergeFrom(*source);
  }
}

void ChooseLevelScRsp::MergeFrom(const ChooseLevelScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ChooseLevelScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.levelid() != 0) {
    _internal_set_levelid(from._internal_levelid());
  }
}

void ChooseLevelScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ChooseLevelScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseLevelScRsp::CopyFrom(const ChooseLevelScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ChooseLevelScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseLevelScRsp::IsInitialized() const {
  return true;
}

void ChooseLevelScRsp::InternalSwap(ChooseLevelScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChooseLevelScRsp, levelid_)
      + sizeof(ChooseLevelScRsp::levelid_)
      - PROTOBUF_FIELD_OFFSET(ChooseLevelScRsp, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseLevelScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadyInRoomCsReq::_Internal {
 public:
};

ReadyInRoomCsReq::ReadyInRoomCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ReadyInRoomCsReq)
}
ReadyInRoomCsReq::ReadyInRoomCsReq(const ReadyInRoomCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&masterport_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(masterport_));
  // @@protoc_insertion_point(copy_constructor:pb.ReadyInRoomCsReq)
}

void ReadyInRoomCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&masterport_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(masterport_));
}

ReadyInRoomCsReq::~ReadyInRoomCsReq() {
  // @@protoc_insertion_point(destructor:pb.ReadyInRoomCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadyInRoomCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadyInRoomCsReq::ArenaDtor(void* object) {
  ReadyInRoomCsReq* _this = reinterpret_cast< ReadyInRoomCsReq* >(object);
  (void)_this;
}
void ReadyInRoomCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadyInRoomCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyInRoomCsReq& ReadyInRoomCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadyInRoomCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void ReadyInRoomCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReadyInRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&masterport_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(masterport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadyInRoomCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MasterPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          masterport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadyInRoomCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReadyInRoomCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint32 MasterPort = 3;
  if (this->masterport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_masterport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReadyInRoomCsReq)
  return target;
}

size_t ReadyInRoomCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReadyInRoomCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // uint32 MasterPort = 3;
  if (this->masterport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_masterport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyInRoomCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReadyInRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyInRoomCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadyInRoomCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReadyInRoomCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReadyInRoomCsReq)
    MergeFrom(*source);
  }
}

void ReadyInRoomCsReq::MergeFrom(const ReadyInRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReadyInRoomCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.masterport() != 0) {
    _internal_set_masterport(from._internal_masterport());
  }
}

void ReadyInRoomCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReadyInRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyInRoomCsReq::CopyFrom(const ReadyInRoomCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReadyInRoomCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyInRoomCsReq::IsInitialized() const {
  return true;
}

void ReadyInRoomCsReq::InternalSwap(ReadyInRoomCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadyInRoomCsReq, masterport_)
      + sizeof(ReadyInRoomCsReq::masterport_)
      - PROTOBUF_FIELD_OFFSET(ReadyInRoomCsReq, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadyInRoomCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadyInRoomScRsp::_Internal {
 public:
};

ReadyInRoomScRsp::ReadyInRoomScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ReadyInRoomScRsp)
}
ReadyInRoomScRsp::ReadyInRoomScRsp(const ReadyInRoomScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:pb.ReadyInRoomScRsp)
}

void ReadyInRoomScRsp::SharedCtor() {
  retcode_ = 0;
}

ReadyInRoomScRsp::~ReadyInRoomScRsp() {
  // @@protoc_insertion_point(destructor:pb.ReadyInRoomScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadyInRoomScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadyInRoomScRsp::ArenaDtor(void* object) {
  ReadyInRoomScRsp* _this = reinterpret_cast< ReadyInRoomScRsp* >(object);
  (void)_this;
}
void ReadyInRoomScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadyInRoomScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyInRoomScRsp& ReadyInRoomScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadyInRoomScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void ReadyInRoomScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReadyInRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadyInRoomScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ReadyInRoomScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::ReadyInRoomScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadyInRoomScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReadyInRoomScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ReadyInRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReadyInRoomScRsp)
  return target;
}

size_t ReadyInRoomScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReadyInRoomScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.ReadyInRoomScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyInRoomScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReadyInRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyInRoomScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadyInRoomScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReadyInRoomScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReadyInRoomScRsp)
    MergeFrom(*source);
  }
}

void ReadyInRoomScRsp::MergeFrom(const ReadyInRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReadyInRoomScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void ReadyInRoomScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReadyInRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyInRoomScRsp::CopyFrom(const ReadyInRoomScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReadyInRoomScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyInRoomScRsp::IsInitialized() const {
  return true;
}

void ReadyInRoomScRsp::InternalSwap(ReadyInRoomScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadyInRoomScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TryLinkTeamScRsp::_Internal {
 public:
};

TryLinkTeamScRsp::TryLinkTeamScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TryLinkTeamScRsp)
}
TryLinkTeamScRsp::TryLinkTeamScRsp(const TryLinkTeamScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  masterip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_masterip().empty()) {
    masterip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_masterip(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(levelid_));
  // @@protoc_insertion_point(copy_constructor:pb.TryLinkTeamScRsp)
}

void TryLinkTeamScRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TryLinkTeamScRsp_CsCmd_2eproto.base);
  masterip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(levelid_));
}

TryLinkTeamScRsp::~TryLinkTeamScRsp() {
  // @@protoc_insertion_point(destructor:pb.TryLinkTeamScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TryLinkTeamScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  masterip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TryLinkTeamScRsp::ArenaDtor(void* object) {
  TryLinkTeamScRsp* _this = reinterpret_cast< TryLinkTeamScRsp* >(object);
  (void)_this;
}
void TryLinkTeamScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryLinkTeamScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryLinkTeamScRsp& TryLinkTeamScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryLinkTeamScRsp_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TryLinkTeamScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TryLinkTeamScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  masterip_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&levelid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(levelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryLinkTeamScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MasterIP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_masterip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TryLinkTeamScRsp.MasterIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LevelID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          levelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryLinkTeamScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TryLinkTeamScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // string MasterIP = 3;
  if (this->masterip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_masterip().data(), static_cast<int>(this->_internal_masterip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TryLinkTeamScRsp.MasterIP");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_masterip(), target);
  }

  // uint32 Port = 4;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // uint32 LevelID = 5;
  if (this->levelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_levelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TryLinkTeamScRsp)
  return target;
}

size_t TryLinkTeamScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TryLinkTeamScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MasterIP = 3;
  if (this->masterip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_masterip());
  }

  // uint32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 Port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 LevelID = 5;
  if (this->levelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryLinkTeamScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TryLinkTeamScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TryLinkTeamScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryLinkTeamScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TryLinkTeamScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TryLinkTeamScRsp)
    MergeFrom(*source);
  }
}

void TryLinkTeamScRsp::MergeFrom(const TryLinkTeamScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TryLinkTeamScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.masterip().size() > 0) {
    _internal_set_masterip(from._internal_masterip());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.levelid() != 0) {
    _internal_set_levelid(from._internal_levelid());
  }
}

void TryLinkTeamScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TryLinkTeamScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryLinkTeamScRsp::CopyFrom(const TryLinkTeamScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TryLinkTeamScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryLinkTeamScRsp::IsInitialized() const {
  return true;
}

void TryLinkTeamScRsp::InternalSwap(TryLinkTeamScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  masterip_.Swap(&other->masterip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryLinkTeamScRsp, levelid_)
      + sizeof(TryLinkTeamScRsp::levelid_)
      - PROTOBUF_FIELD_OFFSET(TryLinkTeamScRsp, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryLinkTeamScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TeamHeartBeatCsReq::_Internal {
 public:
};

TeamHeartBeatCsReq::TeamHeartBeatCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TeamHeartBeatCsReq)
}
TeamHeartBeatCsReq::TeamHeartBeatCsReq(const TeamHeartBeatCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.TeamHeartBeatCsReq)
}

void TeamHeartBeatCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
}

TeamHeartBeatCsReq::~TeamHeartBeatCsReq() {
  // @@protoc_insertion_point(destructor:pb.TeamHeartBeatCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamHeartBeatCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TeamHeartBeatCsReq::ArenaDtor(void* object) {
  TeamHeartBeatCsReq* _this = reinterpret_cast< TeamHeartBeatCsReq* >(object);
  (void)_this;
}
void TeamHeartBeatCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamHeartBeatCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamHeartBeatCsReq& TeamHeartBeatCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamHeartBeatCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void TeamHeartBeatCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TeamHeartBeatCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamHeartBeatCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamHeartBeatCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TeamHeartBeatCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TeamHeartBeatCsReq)
  return target;
}

size_t TeamHeartBeatCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TeamHeartBeatCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamHeartBeatCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TeamHeartBeatCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamHeartBeatCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamHeartBeatCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TeamHeartBeatCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TeamHeartBeatCsReq)
    MergeFrom(*source);
  }
}

void TeamHeartBeatCsReq::MergeFrom(const TeamHeartBeatCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TeamHeartBeatCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TeamHeartBeatCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TeamHeartBeatCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamHeartBeatCsReq::CopyFrom(const TeamHeartBeatCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TeamHeartBeatCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamHeartBeatCsReq::IsInitialized() const {
  return true;
}

void TeamHeartBeatCsReq::InternalSwap(TeamHeartBeatCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamHeartBeatCsReq, type_)
      + sizeof(TeamHeartBeatCsReq::type_)
      - PROTOBUF_FIELD_OFFSET(TeamHeartBeatCsReq, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamHeartBeatCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinkTeamSuccCsReq::_Internal {
 public:
};

LinkTeamSuccCsReq::LinkTeamSuccCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LinkTeamSuccCsReq)
}
LinkTeamSuccCsReq::LinkTeamSuccCsReq(const LinkTeamSuccCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&succ_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(succ_));
  // @@protoc_insertion_point(copy_constructor:pb.LinkTeamSuccCsReq)
}

void LinkTeamSuccCsReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&succ_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(succ_));
}

LinkTeamSuccCsReq::~LinkTeamSuccCsReq() {
  // @@protoc_insertion_point(destructor:pb.LinkTeamSuccCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkTeamSuccCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinkTeamSuccCsReq::ArenaDtor(void* object) {
  LinkTeamSuccCsReq* _this = reinterpret_cast< LinkTeamSuccCsReq* >(object);
  (void)_this;
}
void LinkTeamSuccCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkTeamSuccCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkTeamSuccCsReq& LinkTeamSuccCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkTeamSuccCsReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void LinkTeamSuccCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LinkTeamSuccCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succ_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(succ_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkTeamSuccCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool succ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkTeamSuccCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LinkTeamSuccCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // bool succ = 2;
  if (this->succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_succ(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LinkTeamSuccCsReq)
  return target;
}

size_t LinkTeamSuccCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LinkTeamSuccCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // bool succ = 2;
  if (this->succ() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkTeamSuccCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LinkTeamSuccCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkTeamSuccCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkTeamSuccCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LinkTeamSuccCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LinkTeamSuccCsReq)
    MergeFrom(*source);
  }
}

void LinkTeamSuccCsReq::MergeFrom(const LinkTeamSuccCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LinkTeamSuccCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
}

void LinkTeamSuccCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LinkTeamSuccCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkTeamSuccCsReq::CopyFrom(const LinkTeamSuccCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LinkTeamSuccCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkTeamSuccCsReq::IsInitialized() const {
  return true;
}

void LinkTeamSuccCsReq::InternalSwap(LinkTeamSuccCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkTeamSuccCsReq, succ_)
      + sizeof(LinkTeamSuccCsReq::succ_)
      - PROTOBUF_FIELD_OFFSET(LinkTeamSuccCsReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkTeamSuccCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameStartScReq::_Internal {
 public:
};

GameStartScReq::GameStartScReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GameStartScReq)
}
GameStartScReq::GameStartScReq(const GameStartScReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  levelid_ = from.levelid_;
  // @@protoc_insertion_point(copy_constructor:pb.GameStartScReq)
}

void GameStartScReq::SharedCtor() {
  levelid_ = 0u;
}

GameStartScReq::~GameStartScReq() {
  // @@protoc_insertion_point(destructor:pb.GameStartScReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStartScReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameStartScReq::ArenaDtor(void* object) {
  GameStartScReq* _this = reinterpret_cast< GameStartScReq* >(object);
  (void)_this;
}
void GameStartScReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartScReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartScReq& GameStartScReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartScReq_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void GameStartScReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GameStartScReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levelid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartScReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 LevelID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          levelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartScReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GameStartScReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LevelID = 1;
  if (this->levelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_levelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GameStartScReq)
  return target;
}

size_t GameStartScReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GameStartScReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 LevelID = 1;
  if (this->levelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartScReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GameStartScReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartScReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStartScReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GameStartScReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GameStartScReq)
    MergeFrom(*source);
  }
}

void GameStartScReq::MergeFrom(const GameStartScReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GameStartScReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.levelid() != 0) {
    _internal_set_levelid(from._internal_levelid());
  }
}

void GameStartScReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GameStartScReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartScReq::CopyFrom(const GameStartScReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GameStartScReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartScReq::IsInitialized() const {
  return true;
}

void GameStartScReq::InternalSwap(GameStartScReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(levelid_, other->levelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartScReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameOverCsNotify::_Internal {
 public:
};

GameOverCsNotify::GameOverCsNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GameOverCsNotify)
}
GameOverCsNotify::GameOverCsNotify(const GameOverCsNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:pb.GameOverCsNotify)
}

void GameOverCsNotify::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(score_));
}

GameOverCsNotify::~GameOverCsNotify() {
  // @@protoc_insertion_point(destructor:pb.GameOverCsNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameOverCsNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameOverCsNotify::ArenaDtor(void* object) {
  GameOverCsNotify* _this = reinterpret_cast< GameOverCsNotify* >(object);
  (void)_this;
}
void GameOverCsNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameOverCsNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameOverCsNotify& GameOverCsNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameOverCsNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void GameOverCsNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GameOverCsNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameOverCsNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameOverCsNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GameOverCsNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  // uint64 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GameOverCsNotify)
  return target;
}

size_t GameOverCsNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GameOverCsNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 accountId = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint64 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roomid());
  }

  // uint64 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameOverCsNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GameOverCsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverCsNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameOverCsNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GameOverCsNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GameOverCsNotify)
    MergeFrom(*source);
  }
}

void GameOverCsNotify::MergeFrom(const GameOverCsNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GameOverCsNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void GameOverCsNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GameOverCsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverCsNotify::CopyFrom(const GameOverCsNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GameOverCsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverCsNotify::IsInitialized() const {
  return true;
}

void GameOverCsNotify::InternalSwap(GameOverCsNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameOverCsNotify, score_)
      + sizeof(GameOverCsNotify::score_)
      - PROTOBUF_FIELD_OFFSET(GameOverCsNotify, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameOverCsNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleMsgScNotify::_Internal {
 public:
};

BattleMsgScNotify::BattleMsgScNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BattleMsgScNotify)
}
BattleMsgScNotify::BattleMsgScNotify(const BattleMsgScNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:pb.BattleMsgScNotify)
}

void BattleMsgScNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleMsgScNotify_CsCmd_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
}

BattleMsgScNotify::~BattleMsgScNotify() {
  // @@protoc_insertion_point(destructor:pb.BattleMsgScNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleMsgScNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleMsgScNotify::ArenaDtor(void* object) {
  BattleMsgScNotify* _this = reinterpret_cast< BattleMsgScNotify* >(object);
  (void)_this;
}
void BattleMsgScNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleMsgScNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleMsgScNotify& BattleMsgScNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleMsgScNotify_CsCmd_2eproto.base);
  return *internal_default_instance();
}


void BattleMsgScNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BattleMsgScNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleMsgScNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BattleMsgScNotify.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BattleMsgScNotify.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleMsgScNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleMsgScNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BattleMsgScNotify.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BattleMsgScNotify.token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleMsgScNotify)
  return target;
}

size_t BattleMsgScNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BattleMsgScNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleMsgScNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BattleMsgScNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleMsgScNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleMsgScNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BattleMsgScNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BattleMsgScNotify)
    MergeFrom(*source);
  }
}

void BattleMsgScNotify::MergeFrom(const BattleMsgScNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BattleMsgScNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void BattleMsgScNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BattleMsgScNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleMsgScNotify::CopyFrom(const BattleMsgScNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BattleMsgScNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMsgScNotify::IsInitialized() const {
  return true;
}

void BattleMsgScNotify::InternalSwap(BattleMsgScNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleMsgScNotify, port_)
      + sizeof(BattleMsgScNotify::port_)
      - PROTOBUF_FIELD_OFFSET(BattleMsgScNotify, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleMsgScNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::LoginAuthCsReq* Arena::CreateMaybeMessage< ::pb::LoginAuthCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LoginAuthCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LoginAuthScRsp* Arena::CreateMaybeMessage< ::pb::LoginAuthScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LoginAuthScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LoginCsReq* Arena::CreateMaybeMessage< ::pb::LoginCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LoginCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LoginScRsp* Arena::CreateMaybeMessage< ::pb::LoginScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LoginScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RoomInfoMsg* Arena::CreateMaybeMessage< ::pb::RoomInfoMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RoomInfoMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SCGate2ClientMsgNotify* Arena::CreateMaybeMessage< ::pb::SCGate2ClientMsgNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SCGate2ClientMsgNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SCNode2ClientBattleMsgNotify* Arena::CreateMaybeMessage< ::pb::SCNode2ClientBattleMsgNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SCNode2ClientBattleMsgNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::AllRoomInfoNotify* Arena::CreateMaybeMessage< ::pb::AllRoomInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::AllRoomInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryCreateRoomCsReq* Arena::CreateMaybeMessage< ::pb::TryCreateRoomCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryCreateRoomCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryCreateRoomScRsp* Arena::CreateMaybeMessage< ::pb::TryCreateRoomScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryCreateRoomScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryEnterRoomCsReq* Arena::CreateMaybeMessage< ::pb::TryEnterRoomCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryEnterRoomCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryEnterRoomScRsp* Arena::CreateMaybeMessage< ::pb::TryEnterRoomScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryEnterRoomScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryLeaveRoomCsReq* Arena::CreateMaybeMessage< ::pb::TryLeaveRoomCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryLeaveRoomCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryLeaveRoomScRsp* Arena::CreateMaybeMessage< ::pb::TryLeaveRoomScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryLeaveRoomScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InRoomUserInfo* Arena::CreateMaybeMessage< ::pb::InRoomUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::InRoomUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RoomUserInfoNotify* Arena::CreateMaybeMessage< ::pb::RoomUserInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RoomUserInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ChooseLevelCsReq* Arena::CreateMaybeMessage< ::pb::ChooseLevelCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ChooseLevelCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ChooseLevelScRsp* Arena::CreateMaybeMessage< ::pb::ChooseLevelScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ChooseLevelScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReadyInRoomCsReq* Arena::CreateMaybeMessage< ::pb::ReadyInRoomCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ReadyInRoomCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReadyInRoomScRsp* Arena::CreateMaybeMessage< ::pb::ReadyInRoomScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ReadyInRoomScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TryLinkTeamScRsp* Arena::CreateMaybeMessage< ::pb::TryLinkTeamScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TryLinkTeamScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TeamHeartBeatCsReq* Arena::CreateMaybeMessage< ::pb::TeamHeartBeatCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TeamHeartBeatCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LinkTeamSuccCsReq* Arena::CreateMaybeMessage< ::pb::LinkTeamSuccCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LinkTeamSuccCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GameStartScReq* Arena::CreateMaybeMessage< ::pb::GameStartScReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GameStartScReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GameOverCsNotify* Arena::CreateMaybeMessage< ::pb::GameOverCsNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GameOverCsNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BattleMsgScNotify* Arena::CreateMaybeMessage< ::pb::BattleMsgScNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BattleMsgScNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
