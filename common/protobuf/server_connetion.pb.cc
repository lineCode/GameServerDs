// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_connetion.proto

#include "server_connetion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
class SSConnectPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSConnectPacket> _instance;
} _SSConnectPacket_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_SSConnectPacket_server_5fconnetion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSConnectPacket_default_instance_;
    new (ptr) ::pb::SSConnectPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSConnectPacket_server_5fconnetion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSConnectPacket_server_5fconnetion_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fconnetion_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_5fconnetion_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fconnetion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fconnetion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSConnectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSConnectPacket, sstype_),
  PROTOBUF_FIELD_OFFSET(::pb::SSConnectPacket, serveruid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::SSConnectPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSConnectPacket_default_instance_),
};

const char descriptor_table_protodef_server_5fconnetion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026server_connetion.proto\022\002pb\"4\n\017SSConnec"
  "tPacket\022\016\n\006sstype\030\001 \001(\r\022\021\n\tserveruid\030\002 \001"
  "(\r*Z\n\016SS_CONNECT_CMD\022\026\n\022SS_CONNECT_DEFAU"
  "LT\020\000\022\027\n\021SS_CONNECT_REQ_ID\020\300\270\002\022\027\n\021SS_CONN"
  "ECT_RSP_ID\020\301\270\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fconnetion_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fconnetion_2eproto_sccs[1] = {
  &scc_info_SSConnectPacket_server_5fconnetion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fconnetion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconnetion_2eproto = {
  false, false, descriptor_table_protodef_server_5fconnetion_2eproto, "server_connetion.proto", 182,
  &descriptor_table_server_5fconnetion_2eproto_once, descriptor_table_server_5fconnetion_2eproto_sccs, descriptor_table_server_5fconnetion_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_server_5fconnetion_2eproto::offsets,
  file_level_metadata_server_5fconnetion_2eproto, 1, file_level_enum_descriptors_server_5fconnetion_2eproto, file_level_service_descriptors_server_5fconnetion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fconnetion_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fconnetion_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SS_CONNECT_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fconnetion_2eproto);
  return file_level_enum_descriptors_server_5fconnetion_2eproto[0];
}
bool SS_CONNECT_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 40000:
    case 40001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SSConnectPacket::_Internal {
 public:
};

SSConnectPacket::SSConnectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SSConnectPacket)
}
SSConnectPacket::SSConnectPacket(const SSConnectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sstype_, &from.sstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&serveruid_) -
    reinterpret_cast<char*>(&sstype_)) + sizeof(serveruid_));
  // @@protoc_insertion_point(copy_constructor:pb.SSConnectPacket)
}

void SSConnectPacket::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sstype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&serveruid_) -
      reinterpret_cast<char*>(&sstype_)) + sizeof(serveruid_));
}

SSConnectPacket::~SSConnectPacket() {
  // @@protoc_insertion_point(destructor:pb.SSConnectPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSConnectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSConnectPacket::ArenaDtor(void* object) {
  SSConnectPacket* _this = reinterpret_cast< SSConnectPacket* >(object);
  (void)_this;
}
void SSConnectPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSConnectPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSConnectPacket& SSConnectPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSConnectPacket_server_5fconnetion_2eproto.base);
  return *internal_default_instance();
}


void SSConnectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSConnectPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serveruid_) -
      reinterpret_cast<char*>(&sstype_)) + sizeof(serveruid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSConnectPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sstype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serveruid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serveruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSConnectPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSConnectPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sstype = 1;
  if (this->sstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sstype(), target);
  }

  // uint32 serveruid = 2;
  if (this->serveruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serveruid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSConnectPacket)
  return target;
}

size_t SSConnectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSConnectPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sstype = 1;
  if (this->sstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sstype());
  }

  // uint32 serveruid = 2;
  if (this->serveruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serveruid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSConnectPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSConnectPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SSConnectPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSConnectPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSConnectPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSConnectPacket)
    MergeFrom(*source);
  }
}

void SSConnectPacket::MergeFrom(const SSConnectPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSConnectPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sstype() != 0) {
    _internal_set_sstype(from._internal_sstype());
  }
  if (from.serveruid() != 0) {
    _internal_set_serveruid(from._internal_serveruid());
  }
}

void SSConnectPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSConnectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSConnectPacket::CopyFrom(const SSConnectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSConnectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSConnectPacket::IsInitialized() const {
  return true;
}

void SSConnectPacket::InternalSwap(SSConnectPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSConnectPacket, serveruid_)
      + sizeof(SSConnectPacket::serveruid_)
      - PROTOBUF_FIELD_OFFSET(SSConnectPacket, sstype_)>(
          reinterpret_cast<char*>(&sstype_),
          reinterpret_cast<char*>(&other->sstype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSConnectPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::SSConnectPacket* Arena::CreateMaybeMessage< ::pb::SSConnectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SSConnectPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
