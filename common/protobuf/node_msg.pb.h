// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CsCmd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5fmsg_2eproto;
namespace pb {
class RoomMsgCacheInfo;
class RoomMsgCacheInfoDefaultTypeInternal;
extern RoomMsgCacheInfoDefaultTypeInternal _RoomMsgCacheInfo_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::RoomMsgCacheInfo* Arena::CreateMaybeMessage<::pb::RoomMsgCacheInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class RoomMsgCacheInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RoomMsgCacheInfo) */ {
 public:
  inline RoomMsgCacheInfo() : RoomMsgCacheInfo(nullptr) {}
  virtual ~RoomMsgCacheInfo();

  RoomMsgCacheInfo(const RoomMsgCacheInfo& from);
  RoomMsgCacheInfo(RoomMsgCacheInfo&& from) noexcept
    : RoomMsgCacheInfo() {
    *this = ::std::move(from);
  }

  inline RoomMsgCacheInfo& operator=(const RoomMsgCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMsgCacheInfo& operator=(RoomMsgCacheInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomMsgCacheInfo& default_instance();

  static inline const RoomMsgCacheInfo* internal_default_instance() {
    return reinterpret_cast<const RoomMsgCacheInfo*>(
               &_RoomMsgCacheInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomMsgCacheInfo& a, RoomMsgCacheInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMsgCacheInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMsgCacheInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomMsgCacheInfo* New() const final {
    return CreateMaybeMessage<RoomMsgCacheInfo>(nullptr);
  }

  RoomMsgCacheInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomMsgCacheInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomMsgCacheInfo& from);
  void MergeFrom(const RoomMsgCacheInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMsgCacheInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RoomMsgCacheInfo";
  }
  protected:
  explicit RoomMsgCacheInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fmsg_2eproto);
    return ::descriptor_table_node_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kRoomidFieldNumber = 1,
    kHostFieldNumber = 4,
    kPortFieldNumber = 3,
  };
  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint64 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 host = 4;
  void clear_host();
  ::PROTOBUF_NAMESPACE_ID::uint64 host() const;
  void set_host(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_host() const;
  void _internal_set_host(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RoomMsgCacheInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomMsgCacheInfo

// uint64 roomid = 1;
inline void RoomMsgCacheInfo::clear_roomid() {
  roomid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomMsgCacheInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomMsgCacheInfo::roomid() const {
  // @@protoc_insertion_point(field_get:pb.RoomMsgCacheInfo.roomid)
  return _internal_roomid();
}
inline void RoomMsgCacheInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void RoomMsgCacheInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:pb.RoomMsgCacheInfo.roomid)
}

// string addr = 2;
inline void RoomMsgCacheInfo::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& RoomMsgCacheInfo::addr() const {
  // @@protoc_insertion_point(field_get:pb.RoomMsgCacheInfo.addr)
  return _internal_addr();
}
inline void RoomMsgCacheInfo::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:pb.RoomMsgCacheInfo.addr)
}
inline std::string* RoomMsgCacheInfo::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:pb.RoomMsgCacheInfo.addr)
  return _internal_mutable_addr();
}
inline const std::string& RoomMsgCacheInfo::_internal_addr() const {
  return addr_.Get();
}
inline void RoomMsgCacheInfo::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomMsgCacheInfo::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomMsgCacheInfo.addr)
}
inline void RoomMsgCacheInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.RoomMsgCacheInfo.addr)
}
inline void RoomMsgCacheInfo::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.RoomMsgCacheInfo.addr)
}
inline std::string* RoomMsgCacheInfo::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomMsgCacheInfo::release_addr() {
  // @@protoc_insertion_point(field_release:pb.RoomMsgCacheInfo.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomMsgCacheInfo::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.RoomMsgCacheInfo.addr)
}

// uint32 port = 3;
inline void RoomMsgCacheInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMsgCacheInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMsgCacheInfo::port() const {
  // @@protoc_insertion_point(field_get:pb.RoomMsgCacheInfo.port)
  return _internal_port();
}
inline void RoomMsgCacheInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void RoomMsgCacheInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pb.RoomMsgCacheInfo.port)
}

// uint64 host = 4;
inline void RoomMsgCacheInfo::clear_host() {
  host_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomMsgCacheInfo::_internal_host() const {
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomMsgCacheInfo::host() const {
  // @@protoc_insertion_point(field_get:pb.RoomMsgCacheInfo.host)
  return _internal_host();
}
inline void RoomMsgCacheInfo::_internal_set_host(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  host_ = value;
}
inline void RoomMsgCacheInfo::set_host(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:pb.RoomMsgCacheInfo.host)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5fmsg_2eproto
