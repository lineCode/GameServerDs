// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_battle.proto

#include "client_battle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fbattle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerStatusStruct_client_5fbattle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BaseType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuaternionStruct_BaseType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fbattle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SkillStatusStruct_client_5fbattle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BaseType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3Struct_BaseType_2eproto;
namespace pb {
class CliTryLinkBattleCsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliTryLinkBattleCsReq> _instance;
} _CliTryLinkBattleCsReq_default_instance_;
class CliTryLinkBattleScRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliTryLinkBattleScRsp> _instance;
} _CliTryLinkBattleScRsp_default_instance_;
class CliStatusChangeNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliStatusChangeNotify> _instance;
} _CliStatusChangeNotify_default_instance_;
class ClientInputPushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInputPush> _instance;
} _ClientInputPush_default_instance_;
class PlayerStatusStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerStatusStruct> _instance;
} _PlayerStatusStruct_default_instance_;
class SkillStatusStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillStatusStruct> _instance;
} _SkillStatusStruct_default_instance_;
class WorldSnapshotPushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldSnapshotPush> _instance;
} _WorldSnapshotPush_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_CliStatusChangeNotify_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CliStatusChangeNotify_default_instance_;
    new (ptr) ::pb::CliStatusChangeNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliStatusChangeNotify_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliStatusChangeNotify_client_5fbattle_2eproto}, {}};

static void InitDefaultsscc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CliTryLinkBattleCsReq_default_instance_;
    new (ptr) ::pb::CliTryLinkBattleCsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto}, {}};

static void InitDefaultsscc_info_CliTryLinkBattleScRsp_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CliTryLinkBattleScRsp_default_instance_;
    new (ptr) ::pb::CliTryLinkBattleScRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliTryLinkBattleScRsp_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliTryLinkBattleScRsp_client_5fbattle_2eproto}, {}};

static void InitDefaultsscc_info_ClientInputPush_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ClientInputPush_default_instance_;
    new (ptr) ::pb::ClientInputPush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientInputPush_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientInputPush_client_5fbattle_2eproto}, {
      &scc_info_Vector3Struct_BaseType_2eproto.base,}};

static void InitDefaultsscc_info_PlayerStatusStruct_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PlayerStatusStruct_default_instance_;
    new (ptr) ::pb::PlayerStatusStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerStatusStruct_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayerStatusStruct_client_5fbattle_2eproto}, {
      &scc_info_Vector3Struct_BaseType_2eproto.base,
      &scc_info_QuaternionStruct_BaseType_2eproto.base,}};

static void InitDefaultsscc_info_SkillStatusStruct_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SkillStatusStruct_default_instance_;
    new (ptr) ::pb::SkillStatusStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SkillStatusStruct_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SkillStatusStruct_client_5fbattle_2eproto}, {
      &scc_info_Vector3Struct_BaseType_2eproto.base,
      &scc_info_QuaternionStruct_BaseType_2eproto.base,}};

static void InitDefaultsscc_info_WorldSnapshotPush_client_5fbattle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_WorldSnapshotPush_default_instance_;
    new (ptr) ::pb::WorldSnapshotPush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorldSnapshotPush_client_5fbattle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorldSnapshotPush_client_5fbattle_2eproto}, {
      &scc_info_PlayerStatusStruct_client_5fbattle_2eproto.base,
      &scc_info_SkillStatusStruct_client_5fbattle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fbattle_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fbattle_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fbattle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fbattle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleCsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleCsReq, gameid_),
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleCsReq, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleCsReq, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleScRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleScRsp, retcode_),
  PROTOBUF_FIELD_OFFSET(::pb::CliTryLinkBattleScRsp, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CliStatusChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CliStatusChangeNotify, code_),
  PROTOBUF_FIELD_OFFSET(::pb::CliStatusChangeNotify, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, dir_),
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, bp_),
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, realtime_),
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, playerid_),
  PROTOBUF_FIELD_OFFSET(::pb::ClientInputPush, slavestep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, entityid_),
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, _position_),
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, _rotation_),
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, _velocity_),
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, health_),
  PROTOBUF_FIELD_OFFSET(::pb::PlayerStatusStruct, skilleffect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, entityid_),
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, _position_),
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, _rotation_),
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, _scale_),
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, ownerid_),
  PROTOBUF_FIELD_OFFSET(::pb::SkillStatusStruct, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::WorldSnapshotPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::WorldSnapshotPush, serverstep_),
  PROTOBUF_FIELD_OFFSET(::pb::WorldSnapshotPush, processedslavestep_),
  PROTOBUF_FIELD_OFFSET(::pb::WorldSnapshotPush, playerstatuslist_),
  PROTOBUF_FIELD_OFFSET(::pb::WorldSnapshotPush, skillstatuslist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::CliTryLinkBattleCsReq)},
  { 8, -1, sizeof(::pb::CliTryLinkBattleScRsp)},
  { 15, -1, sizeof(::pb::CliStatusChangeNotify)},
  { 22, -1, sizeof(::pb::ClientInputPush)},
  { 32, -1, sizeof(::pb::PlayerStatusStruct)},
  { 43, -1, sizeof(::pb::SkillStatusStruct)},
  { 54, -1, sizeof(::pb::WorldSnapshotPush)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CliTryLinkBattleCsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CliTryLinkBattleScRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CliStatusChangeNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ClientInputPush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PlayerStatusStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SkillStatusStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_WorldSnapshotPush_default_instance_),
};

const char descriptor_table_protodef_client_5fbattle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023client_battle.proto\022\002pb\032\016BaseType.prot"
  "o\"G\n\025CliTryLinkBattleCsReq\022\016\n\006gameid\030\001 \001"
  "(\r\022\017\n\007account\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\"\204\001\n\025C"
  "liTryLinkBattleScRsp\0222\n\007retcode\030\001 \001(\0162!."
  "pb.CliTryLinkBattleScRsp.RetCode\022\016\n\006game"
  "id\030\002 \001(\r\"\'\n\007RetCode\022\014\n\010RET_SUCC\020\000\022\016\n\nRET"
  "_FAILED\020\001\"\267\001\n\025CliStatusChangeNotify\0220\n\004c"
  "ode\030\001 \001(\0162\".pb.CliStatusChangeNotify.Typ"
  "eCode\022\020\n\010playerid\030\002 \001(\r\"Z\n\010TypeCode\022\017\n\013P"
  "LAYER_JOIN\020\000\022\020\n\014PLAYER_LEAVE\020\001\022\025\n\021PLAYER"
  "_DISCONNECT\020\002\022\024\n\020PLAYER_RECONNECT\020\003\"t\n\017C"
  "lientInputPush\022\036\n\003dir\030\001 \001(\0132\021.pb.Vector3"
  "Struct\022\n\n\002bp\030\002 \003(\r\022\020\n\010realTime\030\003 \001(\002\022\020\n\010"
  "playerID\030\004 \001(\r\022\021\n\tSlaveStep\030\005 \001(\r\"\300\001\n\022Pl"
  "ayerStatusStruct\022\020\n\010entityID\030\001 \001(\r\022$\n\t_p"
  "osition\030\002 \001(\0132\021.pb.Vector3Struct\022\'\n\t_rot"
  "ation\030\003 \001(\0132\024.pb.QuaternionStruct\022$\n\t_ve"
  "locity\030\004 \001(\0132\021.pb.Vector3Struct\022\016\n\006healt"
  "h\030\005 \001(\002\022\023\n\013skillEffect\030\006 \001(\005\"\266\001\n\021SkillSt"
  "atusStruct\022\020\n\010entityID\030\001 \001(\r\022$\n\t_positio"
  "n\030\002 \001(\0132\021.pb.Vector3Struct\022\'\n\t_rotation\030"
  "\003 \001(\0132\024.pb.QuaternionStruct\022!\n\006_scale\030\004 "
  "\001(\0132\021.pb.Vector3Struct\022\017\n\007ownerID\030\005 \001(\r\022"
  "\014\n\004name\030\006 \001(\t\"\245\001\n\021WorldSnapshotPush\022\022\n\nS"
  "erverStep\030\001 \001(\r\022\032\n\022ProcessedSlaveStep\030\002 "
  "\003(\r\0220\n\020PlayerStatusList\030\003 \003(\0132\026.pb.Playe"
  "rStatusStruct\022.\n\017SkillStatusList\030\004 \003(\0132\025"
  ".pb.SkillStatusStruct*\310\002\n\016CSCliBattleCMD"
  "\022\020\n\014CSC2BDefault\020\000\022\033\n\025CMDCliLinkBattleCs"
  "Req\020\241\234\001\022\033\n\025CMDCliLinkBattleScRsp\020\242\234\001\022\035\n\027"
  "CMDCliUnLinkBattleCsReq\020\243\234\001\022\035\n\027CMDCliUnL"
  "inkBattleScRsp\020\244\234\001\022\026\n\020CMDCliInstruSync\020\245"
  "\234\001\022\034\n\026CMDCliStatusSyncNotify\020\246\234\001\022\037\n\031CMDB"
  "attleStatusSyncNotify\020\247\234\001\022\033\n\025CMDEntitySt"
  "atusNotify\020\250\234\001\022\033\n\025CMDTryLinkBattleCsReq\020"
  "\251\234\001\022\033\n\025CMDTryLinkBattleScRsp\020\252\234\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fbattle_2eproto_deps[1] = {
  &::descriptor_table_BaseType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fbattle_2eproto_sccs[7] = {
  &scc_info_CliStatusChangeNotify_client_5fbattle_2eproto.base,
  &scc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto.base,
  &scc_info_CliTryLinkBattleScRsp_client_5fbattle_2eproto.base,
  &scc_info_ClientInputPush_client_5fbattle_2eproto.base,
  &scc_info_PlayerStatusStruct_client_5fbattle_2eproto.base,
  &scc_info_SkillStatusStruct_client_5fbattle_2eproto.base,
  &scc_info_WorldSnapshotPush_client_5fbattle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fbattle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbattle_2eproto = {
  false, false, descriptor_table_protodef_client_5fbattle_2eproto, "client_battle.proto", 1440,
  &descriptor_table_client_5fbattle_2eproto_once, descriptor_table_client_5fbattle_2eproto_sccs, descriptor_table_client_5fbattle_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_client_5fbattle_2eproto::offsets,
  file_level_metadata_client_5fbattle_2eproto, 7, file_level_enum_descriptors_client_5fbattle_2eproto, file_level_service_descriptors_client_5fbattle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fbattle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fbattle_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CliTryLinkBattleScRsp_RetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbattle_2eproto);
  return file_level_enum_descriptors_client_5fbattle_2eproto[0];
}
bool CliTryLinkBattleScRsp_RetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::RET_SUCC;
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::RET_FAILED;
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::RetCode_MIN;
constexpr CliTryLinkBattleScRsp_RetCode CliTryLinkBattleScRsp::RetCode_MAX;
constexpr int CliTryLinkBattleScRsp::RetCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CliStatusChangeNotify_TypeCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbattle_2eproto);
  return file_level_enum_descriptors_client_5fbattle_2eproto[1];
}
bool CliStatusChangeNotify_TypeCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::PLAYER_JOIN;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::PLAYER_LEAVE;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::PLAYER_DISCONNECT;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::PLAYER_RECONNECT;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::TypeCode_MIN;
constexpr CliStatusChangeNotify_TypeCode CliStatusChangeNotify::TypeCode_MAX;
constexpr int CliStatusChangeNotify::TypeCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSCliBattleCMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbattle_2eproto);
  return file_level_enum_descriptors_client_5fbattle_2eproto[2];
}
bool CSCliBattleCMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 20001:
    case 20002:
    case 20003:
    case 20004:
    case 20005:
    case 20006:
    case 20007:
    case 20008:
    case 20009:
    case 20010:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CliTryLinkBattleCsReq::_Internal {
 public:
};

CliTryLinkBattleCsReq::CliTryLinkBattleCsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CliTryLinkBattleCsReq)
}
CliTryLinkBattleCsReq::CliTryLinkBattleCsReq(const CliTryLinkBattleCsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(account_));
  // @@protoc_insertion_point(copy_constructor:pb.CliTryLinkBattleCsReq)
}

void CliTryLinkBattleCsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&account_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(account_));
}

CliTryLinkBattleCsReq::~CliTryLinkBattleCsReq() {
  // @@protoc_insertion_point(destructor:pb.CliTryLinkBattleCsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CliTryLinkBattleCsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CliTryLinkBattleCsReq::ArenaDtor(void* object) {
  CliTryLinkBattleCsReq* _this = reinterpret_cast< CliTryLinkBattleCsReq* >(object);
  (void)_this;
}
void CliTryLinkBattleCsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CliTryLinkBattleCsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CliTryLinkBattleCsReq& CliTryLinkBattleCsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliTryLinkBattleCsReq_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void CliTryLinkBattleCsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CliTryLinkBattleCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(account_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CliTryLinkBattleCsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CliTryLinkBattleCsReq.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CliTryLinkBattleCsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CliTryLinkBattleCsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // uint32 account = 2;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CliTryLinkBattleCsReq.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CliTryLinkBattleCsReq)
  return target;
}

size_t CliTryLinkBattleCsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CliTryLinkBattleCsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  // uint32 account = 2;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CliTryLinkBattleCsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CliTryLinkBattleCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CliTryLinkBattleCsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliTryLinkBattleCsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CliTryLinkBattleCsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CliTryLinkBattleCsReq)
    MergeFrom(*source);
  }
}

void CliTryLinkBattleCsReq::MergeFrom(const CliTryLinkBattleCsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CliTryLinkBattleCsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
}

void CliTryLinkBattleCsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CliTryLinkBattleCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliTryLinkBattleCsReq::CopyFrom(const CliTryLinkBattleCsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CliTryLinkBattleCsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliTryLinkBattleCsReq::IsInitialized() const {
  return true;
}

void CliTryLinkBattleCsReq::InternalSwap(CliTryLinkBattleCsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CliTryLinkBattleCsReq, account_)
      + sizeof(CliTryLinkBattleCsReq::account_)
      - PROTOBUF_FIELD_OFFSET(CliTryLinkBattleCsReq, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CliTryLinkBattleCsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CliTryLinkBattleScRsp::_Internal {
 public:
};

CliTryLinkBattleScRsp::CliTryLinkBattleScRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CliTryLinkBattleScRsp)
}
CliTryLinkBattleScRsp::CliTryLinkBattleScRsp(const CliTryLinkBattleScRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(gameid_));
  // @@protoc_insertion_point(copy_constructor:pb.CliTryLinkBattleScRsp)
}

void CliTryLinkBattleScRsp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gameid_));
}

CliTryLinkBattleScRsp::~CliTryLinkBattleScRsp() {
  // @@protoc_insertion_point(destructor:pb.CliTryLinkBattleScRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CliTryLinkBattleScRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CliTryLinkBattleScRsp::ArenaDtor(void* object) {
  CliTryLinkBattleScRsp* _this = reinterpret_cast< CliTryLinkBattleScRsp* >(object);
  (void)_this;
}
void CliTryLinkBattleScRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CliTryLinkBattleScRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CliTryLinkBattleScRsp& CliTryLinkBattleScRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliTryLinkBattleScRsp_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void CliTryLinkBattleScRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CliTryLinkBattleScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CliTryLinkBattleScRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.CliTryLinkBattleScRsp.RetCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_retcode(static_cast<::pb::CliTryLinkBattleScRsp_RetCode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CliTryLinkBattleScRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CliTryLinkBattleScRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CliTryLinkBattleScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CliTryLinkBattleScRsp)
  return target;
}

size_t CliTryLinkBattleScRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CliTryLinkBattleScRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.CliTryLinkBattleScRsp.RetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }

  // uint32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CliTryLinkBattleScRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CliTryLinkBattleScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CliTryLinkBattleScRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliTryLinkBattleScRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CliTryLinkBattleScRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CliTryLinkBattleScRsp)
    MergeFrom(*source);
  }
}

void CliTryLinkBattleScRsp::MergeFrom(const CliTryLinkBattleScRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CliTryLinkBattleScRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CliTryLinkBattleScRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CliTryLinkBattleScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliTryLinkBattleScRsp::CopyFrom(const CliTryLinkBattleScRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CliTryLinkBattleScRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliTryLinkBattleScRsp::IsInitialized() const {
  return true;
}

void CliTryLinkBattleScRsp::InternalSwap(CliTryLinkBattleScRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CliTryLinkBattleScRsp, gameid_)
      + sizeof(CliTryLinkBattleScRsp::gameid_)
      - PROTOBUF_FIELD_OFFSET(CliTryLinkBattleScRsp, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CliTryLinkBattleScRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CliStatusChangeNotify::_Internal {
 public:
};

CliStatusChangeNotify::CliStatusChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CliStatusChangeNotify)
}
CliStatusChangeNotify::CliStatusChangeNotify(const CliStatusChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:pb.CliStatusChangeNotify)
}

void CliStatusChangeNotify::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
}

CliStatusChangeNotify::~CliStatusChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.CliStatusChangeNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CliStatusChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CliStatusChangeNotify::ArenaDtor(void* object) {
  CliStatusChangeNotify* _this = reinterpret_cast< CliStatusChangeNotify* >(object);
  (void)_this;
}
void CliStatusChangeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CliStatusChangeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CliStatusChangeNotify& CliStatusChangeNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliStatusChangeNotify_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void CliStatusChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CliStatusChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CliStatusChangeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.CliStatusChangeNotify.TypeCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::pb::CliStatusChangeNotify_TypeCode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 playerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CliStatusChangeNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CliStatusChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CliStatusChangeNotify.TypeCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // uint32 playerid = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CliStatusChangeNotify)
  return target;
}

size_t CliStatusChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CliStatusChangeNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.CliStatusChangeNotify.TypeCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // uint32 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CliStatusChangeNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CliStatusChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CliStatusChangeNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliStatusChangeNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CliStatusChangeNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CliStatusChangeNotify)
    MergeFrom(*source);
  }
}

void CliStatusChangeNotify::MergeFrom(const CliStatusChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CliStatusChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CliStatusChangeNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CliStatusChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliStatusChangeNotify::CopyFrom(const CliStatusChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CliStatusChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliStatusChangeNotify::IsInitialized() const {
  return true;
}

void CliStatusChangeNotify::InternalSwap(CliStatusChangeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CliStatusChangeNotify, playerid_)
      + sizeof(CliStatusChangeNotify::playerid_)
      - PROTOBUF_FIELD_OFFSET(CliStatusChangeNotify, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CliStatusChangeNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientInputPush::_Internal {
 public:
  static const ::pb::Vector3Struct& dir(const ClientInputPush* msg);
};

const ::pb::Vector3Struct&
ClientInputPush::_Internal::dir(const ClientInputPush* msg) {
  return *msg->dir_;
}
void ClientInputPush::clear_dir() {
  if (GetArena() == nullptr && dir_ != nullptr) {
    delete dir_;
  }
  dir_ = nullptr;
}
ClientInputPush::ClientInputPush(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ClientInputPush)
}
ClientInputPush::ClientInputPush(const ClientInputPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bp_(from.bp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dir()) {
    dir_ = new ::pb::Vector3Struct(*from.dir_);
  } else {
    dir_ = nullptr;
  }
  ::memcpy(&realtime_, &from.realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&slavestep_) -
    reinterpret_cast<char*>(&realtime_)) + sizeof(slavestep_));
  // @@protoc_insertion_point(copy_constructor:pb.ClientInputPush)
}

void ClientInputPush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInputPush_client_5fbattle_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&slavestep_) -
      reinterpret_cast<char*>(&dir_)) + sizeof(slavestep_));
}

ClientInputPush::~ClientInputPush() {
  // @@protoc_insertion_point(destructor:pb.ClientInputPush)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientInputPush::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dir_;
}

void ClientInputPush::ArenaDtor(void* object) {
  ClientInputPush* _this = reinterpret_cast< ClientInputPush* >(object);
  (void)_this;
}
void ClientInputPush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInputPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInputPush& ClientInputPush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInputPush_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void ClientInputPush::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ClientInputPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bp_.Clear();
  if (GetArena() == nullptr && dir_ != nullptr) {
    delete dir_;
  }
  dir_ = nullptr;
  ::memset(&realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slavestep_) -
      reinterpret_cast<char*>(&realtime_)) + sizeof(slavestep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInputPush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Vector3Struct dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float realTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 playerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SlaveStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          slavestep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInputPush::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ClientInputPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Vector3Struct dir = 1;
  if (this->has_dir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dir(this), target, stream);
  }

  // repeated uint32 bp = 2;
  {
    int byte_size = _bp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_bp(), byte_size, target);
    }
  }

  // float realTime = 3;
  if (!(this->realtime() <= 0 && this->realtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_realtime(), target);
  }

  // uint32 playerID = 4;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  // uint32 SlaveStep = 5;
  if (this->slavestep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_slavestep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ClientInputPush)
  return target;
}

size_t ClientInputPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ClientInputPush)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bp = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.Vector3Struct dir = 1;
  if (this->has_dir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dir_);
  }

  // float realTime = 3;
  if (!(this->realtime() <= 0 && this->realtime() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 playerID = 4;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // uint32 SlaveStep = 5;
  if (this->slavestep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slavestep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInputPush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ClientInputPush)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInputPush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInputPush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ClientInputPush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ClientInputPush)
    MergeFrom(*source);
  }
}

void ClientInputPush::MergeFrom(const ClientInputPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ClientInputPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bp_.MergeFrom(from.bp_);
  if (from.has_dir()) {
    _internal_mutable_dir()->::pb::Vector3Struct::MergeFrom(from._internal_dir());
  }
  if (!(from.realtime() <= 0 && from.realtime() >= 0)) {
    _internal_set_realtime(from._internal_realtime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.slavestep() != 0) {
    _internal_set_slavestep(from._internal_slavestep());
  }
}

void ClientInputPush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ClientInputPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInputPush::CopyFrom(const ClientInputPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ClientInputPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInputPush::IsInitialized() const {
  return true;
}

void ClientInputPush::InternalSwap(ClientInputPush* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bp_.InternalSwap(&other->bp_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInputPush, slavestep_)
      + sizeof(ClientInputPush::slavestep_)
      - PROTOBUF_FIELD_OFFSET(ClientInputPush, dir_)>(
          reinterpret_cast<char*>(&dir_),
          reinterpret_cast<char*>(&other->dir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInputPush::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerStatusStruct::_Internal {
 public:
  static const ::pb::Vector3Struct& _position(const PlayerStatusStruct* msg);
  static const ::pb::QuaternionStruct& _rotation(const PlayerStatusStruct* msg);
  static const ::pb::Vector3Struct& _velocity(const PlayerStatusStruct* msg);
};

const ::pb::Vector3Struct&
PlayerStatusStruct::_Internal::_position(const PlayerStatusStruct* msg) {
  return *msg->_position_;
}
const ::pb::QuaternionStruct&
PlayerStatusStruct::_Internal::_rotation(const PlayerStatusStruct* msg) {
  return *msg->_rotation_;
}
const ::pb::Vector3Struct&
PlayerStatusStruct::_Internal::_velocity(const PlayerStatusStruct* msg) {
  return *msg->_velocity_;
}
void PlayerStatusStruct::clear__position() {
  if (GetArena() == nullptr && _position_ != nullptr) {
    delete _position_;
  }
  _position_ = nullptr;
}
void PlayerStatusStruct::clear__rotation() {
  if (GetArena() == nullptr && _rotation_ != nullptr) {
    delete _rotation_;
  }
  _rotation_ = nullptr;
}
void PlayerStatusStruct::clear__velocity() {
  if (GetArena() == nullptr && _velocity_ != nullptr) {
    delete _velocity_;
  }
  _velocity_ = nullptr;
}
PlayerStatusStruct::PlayerStatusStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PlayerStatusStruct)
}
PlayerStatusStruct::PlayerStatusStruct(const PlayerStatusStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has__position()) {
    _position_ = new ::pb::Vector3Struct(*from._position_);
  } else {
    _position_ = nullptr;
  }
  if (from._internal_has__rotation()) {
    _rotation_ = new ::pb::QuaternionStruct(*from._rotation_);
  } else {
    _rotation_ = nullptr;
  }
  if (from._internal_has__velocity()) {
    _velocity_ = new ::pb::Vector3Struct(*from._velocity_);
  } else {
    _velocity_ = nullptr;
  }
  ::memcpy(&entityid_, &from.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilleffect_) -
    reinterpret_cast<char*>(&entityid_)) + sizeof(skilleffect_));
  // @@protoc_insertion_point(copy_constructor:pb.PlayerStatusStruct)
}

void PlayerStatusStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerStatusStruct_client_5fbattle_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&_position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&skilleffect_) -
      reinterpret_cast<char*>(&_position_)) + sizeof(skilleffect_));
}

PlayerStatusStruct::~PlayerStatusStruct() {
  // @@protoc_insertion_point(destructor:pb.PlayerStatusStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerStatusStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete _position_;
  if (this != internal_default_instance()) delete _rotation_;
  if (this != internal_default_instance()) delete _velocity_;
}

void PlayerStatusStruct::ArenaDtor(void* object) {
  PlayerStatusStruct* _this = reinterpret_cast< PlayerStatusStruct* >(object);
  (void)_this;
}
void PlayerStatusStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerStatusStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerStatusStruct& PlayerStatusStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerStatusStruct_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void PlayerStatusStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PlayerStatusStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && _position_ != nullptr) {
    delete _position_;
  }
  _position_ = nullptr;
  if (GetArena() == nullptr && _rotation_ != nullptr) {
    delete _rotation_;
  }
  _rotation_ = nullptr;
  if (GetArena() == nullptr && _velocity_ != nullptr) {
    delete _velocity_;
  }
  _velocity_ = nullptr;
  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilleffect_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(skilleffect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStatusStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Vector3Struct _position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable__position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.QuaternionStruct _rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable__rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Vector3Struct _velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable__velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float health = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 skillEffect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          skilleffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerStatusStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PlayerStatusStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entityID = 1;
  if (this->entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entityid(), target);
  }

  // .pb.Vector3Struct _position = 2;
  if (this->has__position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::_position(this), target, stream);
  }

  // .pb.QuaternionStruct _rotation = 3;
  if (this->has__rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::_rotation(this), target, stream);
  }

  // .pb.Vector3Struct _velocity = 4;
  if (this->has__velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::_velocity(this), target, stream);
  }

  // float health = 5;
  if (!(this->health() <= 0 && this->health() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_health(), target);
  }

  // int32 skillEffect = 6;
  if (this->skilleffect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_skilleffect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PlayerStatusStruct)
  return target;
}

size_t PlayerStatusStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PlayerStatusStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Vector3Struct _position = 2;
  if (this->has__position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_position_);
  }

  // .pb.QuaternionStruct _rotation = 3;
  if (this->has__rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_rotation_);
  }

  // .pb.Vector3Struct _velocity = 4;
  if (this->has__velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_velocity_);
  }

  // uint32 entityID = 1;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityid());
  }

  // float health = 5;
  if (!(this->health() <= 0 && this->health() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 skillEffect = 6;
  if (this->skilleffect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skilleffect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerStatusStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PlayerStatusStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStatusStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerStatusStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PlayerStatusStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PlayerStatusStruct)
    MergeFrom(*source);
  }
}

void PlayerStatusStruct::MergeFrom(const PlayerStatusStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PlayerStatusStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has__position()) {
    _internal_mutable__position()->::pb::Vector3Struct::MergeFrom(from._internal__position());
  }
  if (from.has__rotation()) {
    _internal_mutable__rotation()->::pb::QuaternionStruct::MergeFrom(from._internal__rotation());
  }
  if (from.has__velocity()) {
    _internal_mutable__velocity()->::pb::Vector3Struct::MergeFrom(from._internal__velocity());
  }
  if (from.entityid() != 0) {
    _internal_set_entityid(from._internal_entityid());
  }
  if (!(from.health() <= 0 && from.health() >= 0)) {
    _internal_set_health(from._internal_health());
  }
  if (from.skilleffect() != 0) {
    _internal_set_skilleffect(from._internal_skilleffect());
  }
}

void PlayerStatusStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PlayerStatusStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStatusStruct::CopyFrom(const PlayerStatusStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PlayerStatusStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatusStruct::IsInitialized() const {
  return true;
}

void PlayerStatusStruct::InternalSwap(PlayerStatusStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStatusStruct, skilleffect_)
      + sizeof(PlayerStatusStruct::skilleffect_)
      - PROTOBUF_FIELD_OFFSET(PlayerStatusStruct, _position_)>(
          reinterpret_cast<char*>(&_position_),
          reinterpret_cast<char*>(&other->_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStatusStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SkillStatusStruct::_Internal {
 public:
  static const ::pb::Vector3Struct& _position(const SkillStatusStruct* msg);
  static const ::pb::QuaternionStruct& _rotation(const SkillStatusStruct* msg);
  static const ::pb::Vector3Struct& _scale(const SkillStatusStruct* msg);
};

const ::pb::Vector3Struct&
SkillStatusStruct::_Internal::_position(const SkillStatusStruct* msg) {
  return *msg->_position_;
}
const ::pb::QuaternionStruct&
SkillStatusStruct::_Internal::_rotation(const SkillStatusStruct* msg) {
  return *msg->_rotation_;
}
const ::pb::Vector3Struct&
SkillStatusStruct::_Internal::_scale(const SkillStatusStruct* msg) {
  return *msg->_scale_;
}
void SkillStatusStruct::clear__position() {
  if (GetArena() == nullptr && _position_ != nullptr) {
    delete _position_;
  }
  _position_ = nullptr;
}
void SkillStatusStruct::clear__rotation() {
  if (GetArena() == nullptr && _rotation_ != nullptr) {
    delete _rotation_;
  }
  _rotation_ = nullptr;
}
void SkillStatusStruct::clear__scale() {
  if (GetArena() == nullptr && _scale_ != nullptr) {
    delete _scale_;
  }
  _scale_ = nullptr;
}
SkillStatusStruct::SkillStatusStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SkillStatusStruct)
}
SkillStatusStruct::SkillStatusStruct(const SkillStatusStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has__position()) {
    _position_ = new ::pb::Vector3Struct(*from._position_);
  } else {
    _position_ = nullptr;
  }
  if (from._internal_has__rotation()) {
    _rotation_ = new ::pb::QuaternionStruct(*from._rotation_);
  } else {
    _rotation_ = nullptr;
  }
  if (from._internal_has__scale()) {
    _scale_ = new ::pb::Vector3Struct(*from._scale_);
  } else {
    _scale_ = nullptr;
  }
  ::memcpy(&entityid_, &from.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&entityid_)) + sizeof(ownerid_));
  // @@protoc_insertion_point(copy_constructor:pb.SkillStatusStruct)
}

void SkillStatusStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkillStatusStruct_client_5fbattle_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&_position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&_position_)) + sizeof(ownerid_));
}

SkillStatusStruct::~SkillStatusStruct() {
  // @@protoc_insertion_point(destructor:pb.SkillStatusStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkillStatusStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete _position_;
  if (this != internal_default_instance()) delete _rotation_;
  if (this != internal_default_instance()) delete _scale_;
}

void SkillStatusStruct::ArenaDtor(void* object) {
  SkillStatusStruct* _this = reinterpret_cast< SkillStatusStruct* >(object);
  (void)_this;
}
void SkillStatusStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkillStatusStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillStatusStruct& SkillStatusStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillStatusStruct_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void SkillStatusStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SkillStatusStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && _position_ != nullptr) {
    delete _position_;
  }
  _position_ = nullptr;
  if (GetArena() == nullptr && _rotation_ != nullptr) {
    delete _rotation_;
  }
  _rotation_ = nullptr;
  if (GetArena() == nullptr && _scale_ != nullptr) {
    delete _scale_;
  }
  _scale_ = nullptr;
  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(ownerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillStatusStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Vector3Struct _position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable__position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.QuaternionStruct _rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable__rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Vector3Struct _scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable__scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ownerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SkillStatusStruct.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillStatusStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillStatusStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entityID = 1;
  if (this->entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entityid(), target);
  }

  // .pb.Vector3Struct _position = 2;
  if (this->has__position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::_position(this), target, stream);
  }

  // .pb.QuaternionStruct _rotation = 3;
  if (this->has__rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::_rotation(this), target, stream);
  }

  // .pb.Vector3Struct _scale = 4;
  if (this->has__scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::_scale(this), target, stream);
  }

  // uint32 ownerID = 5;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ownerid(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SkillStatusStruct.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillStatusStruct)
  return target;
}

size_t SkillStatusStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SkillStatusStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.Vector3Struct _position = 2;
  if (this->has__position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_position_);
  }

  // .pb.QuaternionStruct _rotation = 3;
  if (this->has__rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_rotation_);
  }

  // .pb.Vector3Struct _scale = 4;
  if (this->has__scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_scale_);
  }

  // uint32 entityID = 1;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityid());
  }

  // uint32 ownerID = 5;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillStatusStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SkillStatusStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillStatusStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillStatusStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SkillStatusStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SkillStatusStruct)
    MergeFrom(*source);
  }
}

void SkillStatusStruct::MergeFrom(const SkillStatusStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SkillStatusStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has__position()) {
    _internal_mutable__position()->::pb::Vector3Struct::MergeFrom(from._internal__position());
  }
  if (from.has__rotation()) {
    _internal_mutable__rotation()->::pb::QuaternionStruct::MergeFrom(from._internal__rotation());
  }
  if (from.has__scale()) {
    _internal_mutable__scale()->::pb::Vector3Struct::MergeFrom(from._internal__scale());
  }
  if (from.entityid() != 0) {
    _internal_set_entityid(from._internal_entityid());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
}

void SkillStatusStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SkillStatusStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillStatusStruct::CopyFrom(const SkillStatusStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SkillStatusStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillStatusStruct::IsInitialized() const {
  return true;
}

void SkillStatusStruct::InternalSwap(SkillStatusStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillStatusStruct, ownerid_)
      + sizeof(SkillStatusStruct::ownerid_)
      - PROTOBUF_FIELD_OFFSET(SkillStatusStruct, _position_)>(
          reinterpret_cast<char*>(&_position_),
          reinterpret_cast<char*>(&other->_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillStatusStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorldSnapshotPush::_Internal {
 public:
};

WorldSnapshotPush::WorldSnapshotPush(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  processedslavestep_(arena),
  playerstatuslist_(arena),
  skillstatuslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.WorldSnapshotPush)
}
WorldSnapshotPush::WorldSnapshotPush(const WorldSnapshotPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      processedslavestep_(from.processedslavestep_),
      playerstatuslist_(from.playerstatuslist_),
      skillstatuslist_(from.skillstatuslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverstep_ = from.serverstep_;
  // @@protoc_insertion_point(copy_constructor:pb.WorldSnapshotPush)
}

void WorldSnapshotPush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldSnapshotPush_client_5fbattle_2eproto.base);
  serverstep_ = 0u;
}

WorldSnapshotPush::~WorldSnapshotPush() {
  // @@protoc_insertion_point(destructor:pb.WorldSnapshotPush)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorldSnapshotPush::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorldSnapshotPush::ArenaDtor(void* object) {
  WorldSnapshotPush* _this = reinterpret_cast< WorldSnapshotPush* >(object);
  (void)_this;
}
void WorldSnapshotPush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorldSnapshotPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldSnapshotPush& WorldSnapshotPush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldSnapshotPush_client_5fbattle_2eproto.base);
  return *internal_default_instance();
}


void WorldSnapshotPush::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.WorldSnapshotPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processedslavestep_.Clear();
  playerstatuslist_.Clear();
  skillstatuslist_.Clear();
  serverstep_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldSnapshotPush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ServerStep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverstep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ProcessedSlaveStep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_processedslavestep(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_processedslavestep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.PlayerStatusStruct PlayerStatusList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerstatuslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.SkillStatusStruct SkillStatusList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skillstatuslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldSnapshotPush::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.WorldSnapshotPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ServerStep = 1;
  if (this->serverstep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverstep(), target);
  }

  // repeated uint32 ProcessedSlaveStep = 2;
  {
    int byte_size = _processedslavestep_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_processedslavestep(), byte_size, target);
    }
  }

  // repeated .pb.PlayerStatusStruct PlayerStatusList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerstatuslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_playerstatuslist(i), target, stream);
  }

  // repeated .pb.SkillStatusStruct SkillStatusList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skillstatuslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_skillstatuslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.WorldSnapshotPush)
  return target;
}

size_t WorldSnapshotPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.WorldSnapshotPush)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ProcessedSlaveStep = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->processedslavestep_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _processedslavestep_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pb.PlayerStatusStruct PlayerStatusList = 3;
  total_size += 1UL * this->_internal_playerstatuslist_size();
  for (const auto& msg : this->playerstatuslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.SkillStatusStruct SkillStatusList = 4;
  total_size += 1UL * this->_internal_skillstatuslist_size();
  for (const auto& msg : this->skillstatuslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 ServerStep = 1;
  if (this->serverstep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverstep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldSnapshotPush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.WorldSnapshotPush)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldSnapshotPush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldSnapshotPush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.WorldSnapshotPush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.WorldSnapshotPush)
    MergeFrom(*source);
  }
}

void WorldSnapshotPush::MergeFrom(const WorldSnapshotPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.WorldSnapshotPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processedslavestep_.MergeFrom(from.processedslavestep_);
  playerstatuslist_.MergeFrom(from.playerstatuslist_);
  skillstatuslist_.MergeFrom(from.skillstatuslist_);
  if (from.serverstep() != 0) {
    _internal_set_serverstep(from._internal_serverstep());
  }
}

void WorldSnapshotPush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.WorldSnapshotPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldSnapshotPush::CopyFrom(const WorldSnapshotPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.WorldSnapshotPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldSnapshotPush::IsInitialized() const {
  return true;
}

void WorldSnapshotPush::InternalSwap(WorldSnapshotPush* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processedslavestep_.InternalSwap(&other->processedslavestep_);
  playerstatuslist_.InternalSwap(&other->playerstatuslist_);
  skillstatuslist_.InternalSwap(&other->skillstatuslist_);
  swap(serverstep_, other->serverstep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldSnapshotPush::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::CliTryLinkBattleCsReq* Arena::CreateMaybeMessage< ::pb::CliTryLinkBattleCsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CliTryLinkBattleCsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CliTryLinkBattleScRsp* Arena::CreateMaybeMessage< ::pb::CliTryLinkBattleScRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CliTryLinkBattleScRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CliStatusChangeNotify* Arena::CreateMaybeMessage< ::pb::CliStatusChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CliStatusChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ClientInputPush* Arena::CreateMaybeMessage< ::pb::ClientInputPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ClientInputPush >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PlayerStatusStruct* Arena::CreateMaybeMessage< ::pb::PlayerStatusStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PlayerStatusStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SkillStatusStruct* Arena::CreateMaybeMessage< ::pb::SkillStatusStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SkillStatusStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::WorldSnapshotPush* Arena::CreateMaybeMessage< ::pb::WorldSnapshotPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::WorldSnapshotPush >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
